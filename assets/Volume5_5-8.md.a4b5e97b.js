import{_ as s,o,c as n,S as a}from"./chunks/framework.7f03344f.js";const d=JSON.parse('{"title":"5-8 自定义进度","description":"","frontmatter":{},"headers":[],"relativePath":"Volume5/5-8.md","filePath":"docs/Volume5/5-8.md","lastUpdated":1698403164000}'),t={name:"Volume5/5-8.md"},e=a(`<h1 id="_5-8-自定义进度" tabindex="-1">5-8 自定义进度 <a class="header-anchor" href="#_5-8-自定义进度" aria-label="Permalink to &quot;5-8 自定义进度&quot;">​</a></h1><p>这是我临时添加的一节，我也是纠结了好久，决定是否要写这一节。</p><p>自定义进度有两个办法：</p><ul><li>使用 NMS 提供的功能（呕——）</li><li>使用 Bukkit 的「Unsafe」方法</li></ul><p>虽然按照我的准则，我很少使用 <code>@Deprecated</code> 的方法，但相比之下，我更不想写反射代码（笑）！</p><h2 id="基于-json-的进度" tabindex="-1">基于 JSON 的进度 <a class="header-anchor" href="#基于-json-的进度" aria-label="Permalink to &quot;基于 JSON 的进度&quot;">​</a></h2><p>出人意料的是，进度并不是 Bukkit API 的一部分。它实际上更接近于「运行在服务端的数据包」。</p><p>因此，我希望你能看看 <a href="https://wiki.biligame.com/mc/%E8%BF%9B%E5%BA%A6/JSON%E6%A0%BC%E5%BC%8F" target="_blank" rel="noreferrer">Wiki 上有关进度的内容</a>。</p><p>好，如果你看完了，那么我们回来。</p><p>下面我们以创建「咏 e 之歌」进度，演示进度的创建方法。</p><p>要创建一个新的进度，首先我们要写好进度的 JSON 文件。</p><p>右键 <code>src</code>，「New」、「File」，文件名填写 <code>advancement.json</code>。实际上这里使用任意名字都是可以的，我们利用的是<strong>自定义配置文件</strong>。虽然配置文件都是 YAML 格式，但 Bukkit 具有保存和读取的功能，这是对任何文件都可以使用的。</p><p>接下来我们来编写：</p><div class="language-jsonc"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);">// &quot;parent&quot;: &quot;helloworld:root&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;display&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;icon&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;item&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;minecraft:ender_eye&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 显示图标，可以使用一个物品</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;title&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">&quot;text&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;咏 e 之歌&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 文本</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">&quot;color&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;white&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 颜色</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 还有很多可设置，查 Wiki！</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;description&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;累计在聊天栏发送 91.35 万个 e&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 如果不需要进行样式设置，可以直接写字符串</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;frame&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;challenge&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 可选 task、goal、challenge，分别是进度、目标、挑战</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;show_toast&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 是否右上角弹窗提示 </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;announce_to_chat&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 是否聊天栏提示「完成了进度」</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;hidden&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 完成之前是否可见</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;background&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;minecraft:textures/gui/advancements/backgrounds/stone.png&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// 如果没有 parent（是根进度）则需要，否则不填</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// 表示进度的背景图，可选的内容很有限：</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// minecraft:textures/gui/advancements/backgrounds/adventure.png</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// minecraft:textures/gui/advancements/backgrounds/end.png</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// minecraft:textures/gui/advancements/backgrounds/husbandry.png</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// minecraft:textures/gui/advancements/backgrounds/nether.png</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-comment);">// minecraft:textures/gui/advancements/backgrounds/stone.png</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;criteria&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-comment);">// 触发器，建议不要使用原版判定，保持以下内容即可</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">&quot;imp&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;trigger&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;minecraft:impossible&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;requirements&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> [</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    [</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-string-expression);">&quot;imp&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    ]</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  ]</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这里有很多要说明的。</p><p>首先是 <code>parent</code> 键，如果你的进度<strong>具有上级节点</strong>，就需要填写这一项。反之，如果你的进度是根节点，就不需要。另外，如果该进度是根节点，那么 Minecraft 会自动在「进度」页面中用它的图标创建一个新的页面。</p><p><code>parent</code> 的命名很有趣，它遵循：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">&lt;插件名称小写&gt;:&lt;注册时用的名字&gt;</span></span></code></pre></div><p>实际上就是 <code>NamespacedKey</code> 序列化后的结果。注意这里是<strong>插件名的小写</strong>，如果你的插件叫「HelloWorld」，这里就得写<code>helloworld</code>。</p><p>注册时用的名字（<code>NamespacedKey</code> 的第二个参数）也得是小写，下面我们就会看到。</p><p><code>display</code> 键中包含了所有的显示内容。</p><ul><li><code>icon</code> 是图标，目前似乎仅能够通过物品来获取，命名方式遵循 <code>minecraft:&lt;物品的 ID&gt;</code>，其中物品的 ID 你可以在 <a href="https://wiki.biligame.com/mc/" target="_blank" rel="noreferrer">Wiki</a> 查到。</li><li><code>title</code> 是标题，使用的就是 <a href="https://wiki.biligame.com/mc/%E5%8E%9F%E5%A7%8BJSON%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F" target="_blank" rel="noreferrer">原始 JSON 文本</a>，只不过这里不能使用 Java 代码，而要使用 JSON，你可以参考 Wiki 中的内容来了解如何使用 JSON 做到同样的效果，也就是说，这里也可以设置「点击事件」之类的。</li><li><code>description</code> 是描述，同样可以使用原始 JSON 文本，如果不想使用，就直接提供字符串吧。</li><li><code>frame</code> 是框架， 只有 <code>task</code>、<code>goal</code> 和 <code>challenge</code> 三个选择，决定了该进度在进度窗口的显示形状以及完成时的提示文本。</li><li><code>show_toast</code> 是否右上角弹窗提示「进度已达成」。</li><li><code>announce_to_chat</code> 是否在聊天栏告知所有玩家「ThatRarityEG 达成了进度 XXX」之类的内容。</li><li><code>hidden</code> 在完成前是否可见。</li><li><code>background</code> <strong>仅用于根进度</strong>（没有 <code>parent</code> 的）。设置该页面的背景，可选的值已经列在上面的 JSON 中了。</li></ul><p><code>criteria</code> 及之后的部分我不建议修改，该部分用于使用 JSON 判断成就什么时候触发，但我们有<strong>事件处理器</strong>，可以通过 CLI 触发，因此不需要这项功能。</p><p>接下来我们就要考虑如何将其读入 Bukkit。</p><h2 id="载入进度" tabindex="-1">载入进度 <a class="header-anchor" href="#载入进度" aria-label="Permalink to &quot;载入进度&quot;">​</a></h2><p>回到插件主类中来。</p><p>首先我们需要让 Bukkit 保存（解压）刚刚的 <code>advancement.json</code>，写在 <code>onEnable</code> 方法中：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-function);">saveResource(</span><span style="color:var(--shiki-token-string-expression);">&quot;advancement.json&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>然后我们需要读取它。由于这里没有现成的方法，我们只能使用 Java 的内置 IO 解决方案：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">File</span><span style="color:var(--shiki-color-text);"> f </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">File(getDataFolder()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;advancement.json&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> advancementJSON; </span><span style="color:var(--shiki-token-comment);">// 最终产物，先占个位置</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">StringBuilder</span><span style="color:var(--shiki-color-text);"> s </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">StringBuilder()</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 高速修改时，StringBuilder 更快</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> { </span><span style="color:var(--shiki-token-comment);">// IO 操作可能会出错</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">BufferedReader</span><span style="color:var(--shiki-color-text);"> reader </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BufferedReader(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> FileReader(f))</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 创建读取器，文件的内容先流向 FileReader，再流向 BufferedReader</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> temp; </span><span style="color:var(--shiki-token-comment);">// 临时存储，用于读取一行</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">while</span><span style="color:var(--shiki-color-text);"> ((temp </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">reader</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">readLine</span><span style="color:var(--shiki-color-text);">()) </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// readLine 方法用于读取下一行，当读到文件末尾会返回 null，while 后的括号中一步完成了读取、赋值和判断 null</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">s</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(temp); </span><span style="color:var(--shiki-token-comment);">// 添加到 StringBuilder 中</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">reader</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">close</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 读取完成后关闭连接</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">} </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">IOException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">advancementJSON </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">s</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-color-text);">();</span></span></code></pre></div><p>上面的代码不难，如果无法理解也没关系，总之，这些代码运行后，<code>advancement.json</code> 中的内容已经被读取到了 <code>advancementJSON</code> 这个 <code>String</code> 变量中。</p><p>接下来考虑如何注册它。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getUnsafe</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">loadAdvancement</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;eee_advancement&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    advancementJSON</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>就是这样。也正是因为使用了 <code>getUnsafe</code>，这里被 IDEA 用一条横线划掉了。</p><p><img src="https://s2.loli.net/2022/04/15/rqFRHdz8OSnLft4.png" alt="UNSAFE.png"></p><p>IDEA 很聪明，它知道这个方法被 Bukkit 设为了 <code>@Deprecated</code>（不建议使用），没办法，就算是 <code>@Deprecated</code> 也只能用了。</p><p>当然，不使用 Bukkit 创建进度的方法也是有的，但实现起来超级麻烦（反射无易事），我们就不介绍了。</p><p><code>loadAdvancement</code> 接受两个参数，一个 <code>NamespacedKey</code>，一个 <code>String</code>，这里的 <code>NamespacedKey</code> 仍然表示一个独特的 ID。建议 <code>new NamespacedKey(...)</code> 的第二个参数用小写，否则可能会出现未知的错误。</p><p>如果你的插件名叫「HelloWorld」，进度名叫 <code>eee_advancement</code>，那么如果你需要将其指定为 <code>parent</code>，就需要使用 <code>helloworld:eee_advancement</code>（插件名小写 + 进度名）。</p><p><em>注意这里是「插件名」（<code>plugin.yml</code> 中的 <code>name</code>），不是「插件主类名」！</em></p><p><code>String</code> 就是刚刚读进来的 <code>advancementJSON</code>。</p><p>需要注意的是，如果 <code>advancement.json</code> 读取失败，这个方法可能会出错，因此我们需要将它包裹在 <code>try</code> 和 <code>catch</code> 中，完整的 <code>onEnable</code> 方法如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">instance </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">saveResource(</span><span style="color:var(--shiki-token-string-expression);">&quot;advancement.json&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 保存</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">File</span><span style="color:var(--shiki-color-text);"> f </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">File(getDataFolder()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;advancement.json&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> advancementJSON;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">StringBuilder</span><span style="color:var(--shiki-color-text);"> s </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">StringBuilder()</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">BufferedReader</span><span style="color:var(--shiki-color-text);"> reader </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BufferedReader(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> FileReader(f))</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> temp;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">while</span><span style="color:var(--shiki-color-text);"> ((temp </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">reader</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">readLine</span><span style="color:var(--shiki-color-text);">()) </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">s</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(temp);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">reader</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">close</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">} </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">IOException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">advancementJSON </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">s</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 读取</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getUnsafe</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">loadAdvancement</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">NamespacedKey(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;eee_advancement&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 这里不用 &lt;插件主类名&gt;.instance 是因为我们就在 onEnable 方法中，this 就是插件实例，没必要多此一举</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        advancementJSON</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    ); </span><span style="color:var(--shiki-token-comment);">// 注册</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">} </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">IllegalArgumentException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这里和合成表一样，在服务器关闭时要移除已经注册的进度，在 <code>onDisable</code> 方法中：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getUnsafe</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">removeAdvancement</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">NamespacedKey(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;eee_advancement&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">reloadData</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">} </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">Exception</span><span style="color:var(--shiki-color-text);"> ignored) {} </span><span style="color:var(--shiki-token-comment);">// 忽略异常</span></span></code></pre></div><p>另外，我们还需要在 <code>onEnable</code> 方法前额外打一个注解：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">SuppressWarnings</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;deprecation&quot;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onEnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// ... 其中内容</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p><code>@SuppressWarnings</code> 用于「压制」编译器警告，这里我们压制了编译器，要求它不显示「使用了不安全的方法」这一警告。当然，不加也是可以的。</p><h2 id="进度触发" tabindex="-1">进度触发 <a class="header-anchor" href="#进度触发" aria-label="Permalink to &quot;进度触发&quot;">​</a></h2><p>我们为这个进度设置的触发器是 <code>minecraft:impossible</code>，亦即「只能用命令触发」。那我们就使用一个 CLI 来完成它吧。说是 CLI，实际上就是命令啦：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">/advancement grant &lt;玩家名&gt; only &lt;进度名&gt;</span></span></code></pre></div><p>如果要撤回一个玩家的进度，也很简单：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">/advancement revoke &lt;玩家名&gt; only &lt;进度名&gt;</span></span></code></pre></div><p>下面我们还是演示「咏 e 之歌」的开发方法，我们要求「在聊天栏中累计发送 91.35 万个 e」，实际上这很简单，我们只需要在玩家聊天时统计一下「e」的个数就行了。</p><p>当然，我们需要存储玩家已经输入的「e」数量，这里限于篇幅就不演示了，各位读者应该已经有能力自己实现了吧？</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Map</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);">&gt; eeeCount </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ConcurrentHashMap</span><span style="color:var(--shiki-color-text);">&lt;&gt;(); </span><span style="color:var(--shiki-token-comment);">// 这里要换成相应的读取代码，自己实现</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 使用 ConcurrentHashMap 的原因是需要线程安全，请参考 7-4 节的内容</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">EventHandler</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">countEEE(</span><span style="color:var(--shiki-token-keyword);">AsyncPlayerChatEvent</span><span style="color:var(--shiki-token-function);"> e)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getUniqueId</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 基于 UUID 存储数据</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> eee </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">eeeCount</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">get</span><span style="color:var(--shiki-color-text);">(id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (eee </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">) { </span><span style="color:var(--shiki-token-comment);">// -1 表示已经达成该进度，直接 return</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> msg </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMessage</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 原先的消息</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> after </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">msg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">replace</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;e&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">replace</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;E&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 把 e 和 E 都去掉，修改前后字符串长度作差即得到 e 和 E 的数量总和</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> eeeS </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">msg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">after</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    eee </span><span style="color:var(--shiki-token-keyword);">+=</span><span style="color:var(--shiki-color-text);"> eeeS; </span><span style="color:var(--shiki-token-comment);">// 增加 e 的个数</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (eee </span><span style="color:var(--shiki-token-keyword);">&gt;=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">913500</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 91.35 万个 e</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        eee </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 已经完成</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// Bukkit API 不能在异步操作（AsyncXXXEvent）中使用，需要创建单独的线程，从此开始</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">dispatchCommand</span><span style="color:var(--shiki-color-text);">( </span><span style="color:var(--shiki-token-comment);">// 该方法执行命令</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getConsoleSender</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 控制台发送</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-string-expression);">&quot;advancement grant &quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getName</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot; only &lt;插件名小写&gt;:eee_advancement&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-comment);">// 这里需要换成你的插件名小写</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                );</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-comment);">// 这次使用普通的 runTask 就可以了，到此结束</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">eeeCount</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">put</span><span style="color:var(--shiki-color-text);">(id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> eee);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 保存 eeeCount 即可，自己实现</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>唯一需要说明的是这里用到的多线程。按照 Bukkit 规定，<code>Bukkit.XXX</code> 不能在异步事件的处理器中被调用，而聊天用的 <code>AsyncPlayerChatEvent</code> 是个明显的异步事件。</p><p>因此我们需要创建单独的线程执行这个命令。这里由于没有什么额外的要求，使用最普通的 <code>runTask</code> 就行了。</p><p>打开游戏试试，最后的效果大概是这样的（1.16.5 原版<s>，资源包是 Love-And-Tolerance，语言是 Modern Equish Full</s>）：</p><p><img src="https://s2.loli.net/2023/06/19/bReFCWQB2TsJhry.png" alt="GRANT.png"></p><p><img src="https://s2.loli.net/2023/06/19/cShVDaifsWr9eNq.png" alt="DESCRIPTION.png"></p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>有鉴于图床失效、原图丢失，上图系定稿后再行修补，截图时未使用前述资源包和语言。</p></div><p><em>我没有那么傻，我自己执行了一下 <code>/advancement grant ThatRarityEG only helloworld:eee_advancement</code> 而已啦。</em></p><p>因此我们总结出进度的创建方法：</p><ol><li>编写一个表示进度的 JSON 文件，主要决定了进度的显示。 <ul><li>如果要使用上级进度，需要使用 <code>parent</code>，值为 <code>&lt;插件名称小写&gt;:&lt;进度名&gt;</code></li><li><code>title</code> 和 <code>description</code> 所对应的对象都可以使用<strong>原始 JSON 文本</strong>来设置样式和行为</li></ul></li><li>在 <code>onEnable</code> 方法中保存它们（<code>saveResource</code>）。</li><li>在 <code>onEnable</code> 方法中读取它们（<code>BufferedReader</code>）。</li><li>在 <code>onEnable</code> 方法中注册它们（<code>loadAdvancement</code>），注册名就是进度名，小写！</li><li>在 <code>onDisable</code> 方法中注销它们（<code>removeAdvancement</code>）。</li><li>编写对应的事件处理器，注意数据的存储。</li></ol><p>不难吧？进度确实是一个很好用的游戏元素哦~</p><hr><p>第 5 章的内容到此就结束了，你可能会想：什么嘛，这么简单？</p><p>是的，第 5 章是「终极」级别篇目，但<strong>高级并不意味着困难</strong>，笔者一直在挑战自己，到底能够把高级的东西写得多简单，你觉得呢？</p>`,69),l=[e];function r(p,i,c,k,y,v){return o(),n("div",null,l)}const u=s(t,[["render",r]]);export{d as __pageData,u as default};
