import{_ as s,o,c as a,S as n}from"./chunks/framework.7f03344f.js";const v=JSON.parse('{"title":"6-1 Java 中的一些工具类","description":"","frontmatter":{},"headers":[],"relativePath":"Volume6/6-1.md","filePath":"docs/Volume6/6-1.md","lastUpdated":1698403164000}'),e={name:"Volume6/6-1.md"},t=n('<h1 id="_6-1-java-中的一些工具类" tabindex="-1">6-1 Java 中的一些工具类 <a class="header-anchor" href="#_6-1-java-中的一些工具类" aria-label="Permalink to &quot;6-1 Java 中的一些工具类&quot;">​</a></h1><p>Java 为我们提供了一些非常好用的工具类。</p><p>实际上我们对它们并不陌生，之前我们见到过它们的：</p><ul><li><code>Arrays.asList</code></li><li><code>Collections.singletonList</code></li><li><code>Objects.requireNonNull</code></li></ul><p>等等。这一节我们介绍一些插件开发常用的。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>这些都是静态方法</strong></p><p>下面介绍的方法都是静态方法，也就是要通过 <code>&lt;类名&gt;.&lt;方法&gt;</code> 进行调用，例如 <code>Objects.requireNonNull</code>，<code>Collections.reverse</code>。</p></div><h2 id="objects" tabindex="-1"><code>Objects</code> <a class="header-anchor" href="#objects" aria-label="Permalink to &quot;`Objects`&quot;">​</a></h2><h3 id="requirenonnull" tabindex="-1"><code>requireNonNull</code> <a class="header-anchor" href="#requirenonnull" aria-label="Permalink to &quot;`requireNonNull`&quot;">​</a></h3><p>该方法用于<strong>确认</strong>得到的对象不是 <code>null</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">requireNonNull(</span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-token-function);"> obj)</span></span></code></pre></div><p>如果不是 <code>null</code>，它将原封不动返回，否则抛出 <code>NullPointerException</code>。</p><h3 id="requirenonnullelse" tabindex="-1"><code>requireNonNullElse</code> <a class="header-anchor" href="#requirenonnullelse" aria-label="Permalink to &quot;`requireNonNullElse`&quot;">​</a></h3><p>上面那个方法的变种，适合用于<strong>判断</strong>得到的对象是不是 <code>null</code>，如果是，它将返回设定的默认值。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">requireNonNullElse(</span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-token-function);"> obj</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-token-function);"> defaultObj)</span></span></code></pre></div><h3 id="equals" tabindex="-1"><code>equals</code> <a class="header-anchor" href="#equals" aria-label="Permalink to &quot;`equals`&quot;">​</a></h3><p>这和一般的 <code>equals</code> 一样，判断两个对象是否相同，但它避免了 <code>NullPointerException</code>，示例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(b);</span></span>\n<span class="line"><span style="color:var(--shiki-token-comment);">// 不好，如果 a 是 null 将触发 NullPointerException</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:var(--shiki-token-constant);">Objects</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(a</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> b);</span></span>\n<span class="line"><span style="color:var(--shiki-token-comment);">// 这样多好！</span></span></code></pre></div><h2 id="arrays" tabindex="-1"><code>Arrays</code> <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;`Arrays`&quot;">​</a></h2><p><code>Arrays</code> 类被设计用于处理数组（如 <code>String[]</code>），但它还有很多功能。</p><h3 id="sort" tabindex="-1"><code>sort</code> <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;`sort`&quot;">​</a></h3><p>该方法用于将一个数组排序，可以排序的类型包括任何种类的<strong>数字</strong>数组、<code>char[]</code> 和 <code>Comparable[]</code>（亦即实现了 <code>Comparable</code> 接口的）。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sort(</span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-token-function);">[] input)</span></span></code></pre></div><p>该方法是就地修改，调用后无返回值。</p><h3 id="fill" tabindex="-1"><code>fill</code> <a class="header-anchor" href="#fill" aria-label="Permalink to &quot;`fill`&quot;">​</a></h3><p>该方法使用指定的值填充一个数组，就地修改。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fill(</span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-token-function);">[] a</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-token-function);"> val)</span></span>\n<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">fill(</span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-token-function);">[] a</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> fromIndex</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> toIndex</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-token-function);"> val)</span></span></code></pre></div><p>第一个方法填充整个数组，第二个仅填充指定区间（取头不取尾）。</p><h3 id="binarysearch" tabindex="-1"><code>binarySearch</code> <a class="header-anchor" href="#binarysearch" aria-label="Permalink to &quot;`binarySearch`&quot;">​</a></h3><p>使用二分法查找某个对象在数组中的位置。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">binarySearch(</span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-token-function);">[] a</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">long</span><span style="color:var(--shiki-token-function);"> key)</span></span></code></pre></div><h3 id="tostring" tabindex="-1"><code>toString</code> <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;`toString`&quot;">​</a></h3><p>将数组转换为字符串形式。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">toString(</span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-token-function);">[] a)</span></span></code></pre></div><h3 id="aslist" tabindex="-1"><code>asList</code> <a class="header-anchor" href="#aslist" aria-label="Permalink to &quot;`asList`&quot;">​</a></h3><p>这个我们已经用过了，快速生成一个 <code>List</code>（内部实现是 <code>ArrayList</code>）。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">List&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">asList(</span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-token-punctuation);">...</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-token-function);">)</span></span></code></pre></div><p>这个方法也可以将数组转换为 <code>List</code>，从而使得上面这些功能可以同时与下面即将介绍到的这个类一起使用……</p><h2 id="collections" tabindex="-1"><code>Collections</code> <a class="header-anchor" href="#collections" aria-label="Permalink to &quot;`Collections`&quot;">​</a></h2><p><code>Collections</code> 用于对集合进行操作，但现在几乎只用于 <code>List</code>，性能很高。</p><h3 id="emptylist" tabindex="-1"><code>emptyList</code> <a class="header-anchor" href="#emptylist" aria-label="Permalink to &quot;`emptyList`&quot;">​</a></h3><p>以最低的成本，创建空的<strong>只读</strong> <code>List</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">List&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">emptyList()</span></span></code></pre></div><h3 id="singletonlist" tabindex="-1"><code>singletonList</code> <a class="header-anchor" href="#singletonlist" aria-label="Permalink to &quot;`singletonList`&quot;">​</a></h3><p>以最低的成本，创建只有一项的<strong>只读</strong> <code>List</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">List&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">singletonList(</span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-token-function);"> o)</span></span></code></pre></div><h3 id="reverse" tabindex="-1"><code>reverse</code> <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;`reverse`&quot;">​</a></h3><p>将 <code>List</code> 倒序过来，这是就地修改。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reverse(</span><span style="color:var(--shiki-token-keyword);">List&lt;?&gt;</span><span style="color:var(--shiki-token-function);"> list)</span></span></code></pre></div><h3 id="shuffle" tabindex="-1"><code>shuffle</code> <a class="header-anchor" href="#shuffle" aria-label="Permalink to &quot;`shuffle`&quot;">​</a></h3><p>将 <code>List</code> 随机排序，相当于「洗牌」，就地修改。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">shuffle(</span><span style="color:var(--shiki-token-keyword);">List&lt;?&gt;</span><span style="color:var(--shiki-token-function);"> list)</span></span></code></pre></div><h3 id="sort-1" tabindex="-1"><code>sort</code> <a class="header-anchor" href="#sort-1" aria-label="Permalink to &quot;`sort`&quot;">​</a></h3><p>和 <code>Arrays.sort</code> 很像，只不过目标是 <code>List</code>，按照元素的「自然」顺序排序，就地修改。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;T</span><span style="color:var(--shiki-color-text);"> extends </span><span style="color:var(--shiki-token-keyword);">Comparable&lt;?</span><span style="color:var(--shiki-color-text);"> super T</span><span style="color:var(--shiki-token-keyword);">&gt;&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sort(</span><span style="color:var(--shiki-token-keyword);">List&lt;</span><span style="color:var(--shiki-token-function);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-function);"> list)</span></span>\n<span class="line"><span style="color:var(--shiki-token-comment);">// 意思就是要被排序的必须实现了 Comparable 接口</span></span></code></pre></div><h3 id="swap" tabindex="-1"><code>swap</code> <a class="header-anchor" href="#swap" aria-label="Permalink to &quot;`swap`&quot;">​</a></h3><p>交换 <code>List</code> 中指定的两个位置上的元素，就地修改。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">swap(</span><span style="color:var(--shiki-token-keyword);">List&lt;?&gt;</span><span style="color:var(--shiki-token-function);"> list</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> i</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> j)</span></span></code></pre></div><h3 id="rotate" tabindex="-1"><code>rotate</code> <a class="header-anchor" href="#rotate" aria-label="Permalink to &quot;`rotate`&quot;">​</a></h3><p>将 <code>List</code> 切成两块，交换顺序后重新粘起来，就地修改。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">rotate(</span><span style="color:var(--shiki-token-keyword);">List&lt;?&gt;</span><span style="color:var(--shiki-token-function);"> list</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> distance)</span></span></code></pre></div><p>当 <code>distance</code> 为正数时，将后 <code>distance</code> 个元素一起切下来，移到前面，反之，将前 <code>distance</code> 个元素移到后面（有什么区别！）。</p><hr><p>可以看到，虽然不是很多，但这些功能都超级有用的！</p><p>下面的三节中，我们将自己来编写一些这样的工具类，并且最终能够用于后面的插件开发，想想很快就能摆脱恐怖的 <code>getItemMeta</code>，我也很开心呢~</p>',64),l=[t];function r(i,c,p,k,d,y){return o(),a("div",null,l)}const u=s(e,[["render",r]]);export{v as __pageData,u as default};
