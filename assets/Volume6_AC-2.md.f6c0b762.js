import{_ as o,o as a,c as n,S as t,k as s}from"./chunks/framework.7f03344f.js";const g=JSON.parse('{"title":"AC-2 向其它插件提供 API","description":"","frontmatter":{},"headers":[],"relativePath":"Volume6/AC-2.md","filePath":"docs/Volume6/AC-2.md","lastUpdated":1698403164000}'),e={name:"Volume6/AC-2.md"},l=t(`<h1 id="ac-2-向其它插件提供-api" tabindex="-1">AC-2 向其它插件提供 API <a class="header-anchor" href="#ac-2-向其它插件提供-api" aria-label="Permalink to &quot;AC-2 向其它插件提供 API&quot;">​</a></h1><p>这一节里，我们介绍如何向其它插件提供 API，并会以 HarmonyAuth SMART 为基础，编写它的 API。</p><p>首先要说明的一点是，提供 API 时是非常宽松的，基本上没有任何限制。</p><h2 id="行动规划" tabindex="-1">行动规划 <a class="header-anchor" href="#行动规划" aria-label="Permalink to &quot;行动规划&quot;">​</a></h2><blockquote><p>行动名称：HarmonyAuth SMART API</p><p>行动代号：AC-2</p><p>行动类别：作战</p><p>涉及章节：</p><ul><li>AC-2</li></ul><p>难度：小僵尸</p></blockquote><h2 id="再谈接口" tabindex="-1">再谈接口 <a class="header-anchor" href="#再谈接口" aria-label="Permalink to &quot;再谈接口&quot;">​</a></h2><p>首先我们需要学习一点理论知识。</p><p>我们知道，API 是最终要被其它开发者引用的，而我们需要去实现这些 API，那么，API 在 Java 中，是怎样一种表现形式呢？</p><p><strong>接口</strong>或<strong>抽象类</strong>。</p><p>还记得我们对接口的比方吗？</p><ul><li>订酒店的人只管有没有这些服务，不管如何提供</li><li>服务商只管好好提供服务，不管它们被用来做啥</li></ul><p>就是这样。</p><p>要定义一个接口，需要使用 <code>interface</code> 关键字。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">MyInterface</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">doThis</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">doThat</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> arg);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>接口中有如下规定：</p><ul><li>只允许抽象方法（即只有签名，没有方法体），除了 <code>default</code> 以外。</li><li>只允许定义静态常量（<code>public static final</code>），不允许成员变量</li></ul><p>光说可能不好理解，我们写代码就知道了。</p><p>我们以 HarmonyAuth SMART 为例，演示 API 的创建方法。</p><h2 id="创建模块" tabindex="-1">创建模块 <a class="header-anchor" href="#创建模块" aria-label="Permalink to &quot;创建模块&quot;">​</a></h2><p>HarmonyAuth SMART 还是一个经典项目（没有链接到 Maven），因此这次我们就不用 Maven 了。</p><p>创建新模块「HarmonyAuth SMART API」（「New module」时选择「Java」）。</p><p>右键 <code>src</code>，创建包，你应该非常非常熟练了。</p><h2 id="制定-api" tabindex="-1">制定 API <a class="header-anchor" href="#制定-api" aria-label="Permalink to &quot;制定 API&quot;">​</a></h2><p>我们先根据 HarmonyAuth SMART 的实际功能，制定几个 API。</p><p>首先当然是那些和登录相关的操作。</p><p>右键你的包，「New」、「Java Class」，在弹出的窗口中选择「Interface」，接口名输入 <code>ILoginManager</code>（别的名字也是可以的）。按照 Java 编程规范，我们应该在接口名称前加上一个字母 <code>I</code>。</p><p><img src="https://s2.loli.net/2022/04/15/hB7N9uK1DXOayjJ.png" alt="INTERFACE.png"></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">harmonyauth</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">api</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ILoginManager</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Check if the player has logged in.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> id The uuid of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> If this player has logged in.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isLoggedIn</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Set a player logged in, password is not essential.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> id The uuid of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">login</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>可以看到，功能非常简单（因为 HarmonyAuth SMART 的对外交流方式主要是 CLI 的钩子），但 JavaDocs 很多。</p><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>认真编写 JavaDocs</strong>！</p><p>你的实现无法被其它开发者看到，外人不能通过分析源代码来了解这个方法是做什么的，唯一的参考就是 JavaDocs，你不会希望经历那种对着写得不明不白的 JavaDocs 时，怎么想都想不明白的那种体验的！</p></div><p>然后我们再创建一个 <code>IStoredDataManager</code> 用于修改已经存储的数据。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">harmonyauth</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">api</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">interface</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">IStoredDataManager</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Set the password hash for a player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Please ensure that the play knows the new password!</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> id   The uuid of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> hash The MD5 hash of the password.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setPasswordHash</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> hash);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Set the IForgot state of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> id          The uuid of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> isInIforgot Whether the player is in IForgot mode.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setIForgotState</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> isInIforgot);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Get the IForgot state of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> id The uuid of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The IForgot state.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getIForgotState</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Set the IForgot reason of the player.&lt;br/&gt;</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * &lt;code&gt;&amp;lt;Internal&amp;gt; Accepted.&lt;/code&gt; for accepted and &lt;code&gt;&amp;lt;Internal&amp;gt; Rejected.&lt;/code&gt; for rejected.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> id     The uuid of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> reason The IForgot reason.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setIForgotReason</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> reason);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Get the IForgot reason of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> id The uuid of the player.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The IForgot reason.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getIForgotReason</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>功能同样很简单。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>不止于接口</strong></p><p>虽然这里我们用的是接口，但 API 中不仅可以使用接口，还可以使用一般的类，抽象类等等。API 从本质上来说只是从插件本体中剥离下来的「一层」而已。API <strong>本身也是一种类库</strong>，因此自然可以使用类。</p><p>某种意义上来说，插件本体实际上也相当于一个「臃肿的」API。实际上我们已经见到过了，是什么呢？「spigot-1.16.5」嘛。虽然它是一个完整的服务端，但实际上它也「相当于」服务端的 API。</p></div><h2 id="实现-api" tabindex="-1">实现 API <a class="header-anchor" href="#实现-api" aria-label="Permalink to &quot;实现 API&quot;">​</a></h2><p>接下来我们来实现这些 API。</p><p>首先，为了实现 API，我们需要将 API 作为 HarmonyAuth SMART 的依赖。</p><p>打开「Project Structure」，选择「HarmonyAuth SMART」，在右边选项卡中打开「Dependencies」，单击左下方的「+」、「Module dependency」（这次我们是依赖自己的模块，因此选这个），并在弹出窗口中选择 「HarmonyAuth SMART API」。</p><p><img src="https://s2.loli.net/2022/04/15/pbzUNH7nK9XI1xW.png" alt="DEPMODULE.png"></p><p>单击「OK」、「Apply」、「OK」。</p><p>接下来回到 HarmonyAuth SMART 的代码中，新建两个类，分别叫做 <code>APILoginManager</code> 和 <code>APIStoredDataManager</code>。<code>APILoginManager</code> 实现 <code>ILoginManager</code>，<code>APIStoredDataManager</code> 实现 <code>IStoredDataManager</code>。</p><p>实现起来很简单，大家看代码吧。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">harmonyauthsmart</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Bukkit</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">entity</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">scheduler</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">BukkitRunnable</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">harmonyauth</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">api</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ILoginManager</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Date</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">APILoginManager</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">implements</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ILoginManager</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isLoggedIn</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-constant);">RuntimeDataManager</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">hasRestrictUUID</span><span style="color:var(--shiki-color-text);">(id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">login</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-function);">isLoggedIn(id)</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);"> p </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (p </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">RuntimeDataManager</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">removeRestrictUUID</span><span style="color:var(--shiki-color-text);">(id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">p</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setWalkSpeed</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">EventHarmony</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">originSpeed</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">get</span><span style="color:var(--shiki-color-text);">(id));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">p</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">sendMessage</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getAndTranslate</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;msg.login-success&quot;</span><span style="color:var(--shiki-color-text);">));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">&gt; hooks </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">generateHooks</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;hook.on-login-success&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">p</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getName</span><span style="color:var(--shiki-color-text);">());</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> cmd </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> hooks) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-constant);">Util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">dispatchCommandAsServer</span><span style="color:var(--shiki-color-text);">(cmd);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">IDataManager</span><span style="color:var(--shiki-color-text);"> idm;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">HarmonyAuthSMART</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getConfig</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getBoolean</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;mysql.enabled&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">&amp;&amp;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-constant);">HarmonyAuthSMART</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">dbError</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    idm </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">DBDataManager()</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    idm </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">FileDataManager()</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                        </span><span style="color:var(--shiki-token-constant);">idm</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setIForgotManualReason</span><span style="color:var(--shiki-color-text);">(id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                        </span><span style="color:var(--shiki-token-constant);">idm</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setIForgotState</span><span style="color:var(--shiki-color-text);">(id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                        </span><span style="color:var(--shiki-token-constant);">idm</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLastLoginTime</span><span style="color:var(--shiki-color-text);">(id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Date()</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTaskAsynchronously</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">HarmonyAuthSMART</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">HarmonyAuthSMART</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>实现部分就不需要那么详细地编写 JavaDocs 了，但注释还是很有用的，如果需要请尽管写~</p><p>下面是 <code>APIStoredDataManager</code> 的代码。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">harmonyauthsmart</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">harmonyauth</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">api</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">IStoredDataManager</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">APIStoredDataManager</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">implements</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">IStoredDataManager</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setPasswordHash</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> hash) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-function);">getDataManager()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setPasswordHash</span><span style="color:var(--shiki-color-text);">(id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> hash);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setIForgotState</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> isInIforgot) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-function);">getDataManager()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setIForgotState</span><span style="color:var(--shiki-color-text);">(id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> isInIforgot);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getIForgotState</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getDataManager()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getIForgotState</span><span style="color:var(--shiki-color-text);">(id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setIForgotReason</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> reason) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-function);">getDataManager()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setIForgotManualReason</span><span style="color:var(--shiki-color-text);">(id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> reason);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getIForgotReason</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getDataManager()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getIForgotManualReason</span><span style="color:var(--shiki-color-text);">(id);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">IDataManager</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getDataManager</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">HarmonyAuthSMART</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getConfig</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getBoolean</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;mysql.enabled&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">&amp;&amp;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-constant);">HarmonyAuthSMART</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">dbError</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">DBDataManager()</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        } </span><span style="color:var(--shiki-token-keyword);">else</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">FileDataManager()</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><h2 id="注册到-bukkit" tabindex="-1">注册到 Bukkit <a class="header-anchor" href="#注册到-bukkit" aria-label="Permalink to &quot;注册到 Bukkit&quot;">​</a></h2><p>现在接口创建好了，实现也完成了，接下来怎么做呢？</p><p>嗯……我们现在面对的问题是，<strong>如何在开发者只有接口，不知道它的实现类的情况下，获得该接口对应的对象</strong>。</p><p>解决这个问题的方法就是利用 <code>RegisteredServiceProvider</code>。Bukkit 的这个机制允许我们将接口和实现「分开」，只需要把接口交给其它开发者，开发者通过 <code>RegisteredServiceProvider</code> 重新获得对应的类。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>到底怎么回事</strong>？</p><p>（为了方便表述，下面我们将「依赖你的插件的那个插件」称为「X 插件」）</p><p>X 插件的开发者们只有接口（<code>IStoredDataManager</code> 等），<strong>没有它们对应的实现</strong>（<code>APIStoredDataManager</code>），因此无法通过 <code>new</code> 创建一个新的对象。</p><p>X 插件的开发者们不知道实现的类是哪一个，但 Bukkit 应该知道，因为 X 插件需要的实现在我们的插件中，而我们的插件正是由 Bukkit 加载的。</p><p><code>RegisteredServiceProvider</code> 做的事无非就是「牵线」，其它插件提供给它一个需求（接口），它就返回注册好的一个对象，<strong>代替了 <code>new</code> 的工作</strong>，仅此而已。</p><p>另外，API 的本质实际上就是要将「对外开放的一部分」分离出去，因此在你的 API 中应该<strong>只包含你希望被其它插件使用的内容</strong>。</p></div><p>那我们需要在主类的 <code>onLoad</code> 方法中注册这两个服务，注册服务很简单：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onLoad()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getServicesManager</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">register</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">ILoginManager</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">APILoginManager()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ServicePriority</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Normal</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getServicesManager</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">register</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">IStoredDataManager</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">APIStoredDataManager()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ServicePriority</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Normal</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>注册方法的签名如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">register(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">Class&lt;</span><span style="color:var(--shiki-token-function);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-function);"> aClass</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">T</span><span style="color:var(--shiki-token-function);"> provider</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">Plugin</span><span style="color:var(--shiki-token-function);"> plugin</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">ServicePriority</span><span style="color:var(--shiki-token-function);"> priority</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span></span></code></pre></div><p>第一个参数是接口的 <code>class</code>，传入接口的 <code>class</code> 属性即可。</p><p>第二个参数是提供方的对象，这里只能提供对象，于是我们实例化一个 <code>APILoginManager</code> 作为服务提供方了。这也告诉我们，实现方法时<strong>不要使用</strong> <code>static</code>！（实际上接口中也不允许 <code>static</code> 方法被重写）</p><p>第三个参数是插件实例，在插件主类中注册时是 <code>this</code>。</p><p>第四个参数是优先级，只能取 <code>ServicePriority</code> 中的值，从 <code>Lowest</code> 到 <code>Highest</code>。这表示当<strong>同一个</strong>插件的<strong>两个服务</strong>都注册了<strong>同一个接口</strong>时，优先使用哪个服务。正常情况下一般不会出现，因为没人会傻到给自己注册两个冲突的服务。一般设为 <code>ServicePriority.Normal</code>。</p><p>这样我们就已经注册好了，Bukkit 下次收到 <code>getRegistration(IStoredDataManager.class)</code> 这样的请求时，就知道「哦，这家伙需要 <code>IStoredDataManager</code> 的一个实现啊，好办，这里有，给你！」</p><p>最后就是打包的问题了。</p><h2 id="构建与打包" tabindex="-1">构建与打包 <a class="header-anchor" href="#构建与打包" aria-label="Permalink to &quot;构建与打包&quot;">​</a></h2><p>由于我们修改了 HarmonyAuth SMART 的代码，我们也需要修改它们的构建方式。</p><p>基本上要遵循如下两个原则：</p><ul><li>API（HarmonyAuth SMART API）构建时<strong>不能</strong>包含任何实现中的类，否则开发者编译时会出现错误</li><li>实现（HarmonyAuth SMART）构建时<strong>必须</strong>包含 API，否则当注册服务时会出现 <code>ClassNotFoundException</code> 异常</li></ul><p>这样就很好解决了。</p><h3 id="构建-harmonyauth-smart" tabindex="-1">构建 HarmonyAuth SMART <a class="header-anchor" href="#构建-harmonyauth-smart" aria-label="Permalink to &quot;构建 HarmonyAuth SMART&quot;">​</a></h3><p>打开「Project Structure」，转到「Artifacts」，修改 HarmonyAuth SMART 的构建方案：</p><ul><li>Extracted &#39;mysql-connector-java-8.0.23.jar/&#39;（AC-1-3 中添加）</li><li>&#39;HarmonyAuth SMART&#39; compile output（AC-1-2 中添加）</li><li><strong>&#39;HarmonyAuth SMART API&#39; compile output（现在添加）</strong></li></ul><p><img src="https://s2.loli.net/2022/04/15/tNEwy3pimazfYsR.png" alt="ARTIFACT.png"></p><p><em>在右侧单击「HarmonyAuth SMART API」左侧的小三角将它展开，双击其中的「&#39;HarmonyAuth SMART API&#39; compile output」即可将它添加到左边。</em></p><p>勾选「Include in project build」。</p><h3 id="构建-api" tabindex="-1">构建 API <a class="header-anchor" href="#构建-api" aria-label="Permalink to &quot;构建 API&quot;">​</a></h3><p>不要关闭窗口，单击左上角的「+」、「JAR」、「Empty」，将它命名为「HarmonyAuth SMART API」（这个名字真的无所谓！）。</p><p>在右侧找到「&#39;HarmonyAuth SMART API&#39; compile output」，将它添加到左边，这样构建时就仅含有 API 的内容。</p><p>勾选「Include in project build」。「Apply」、「OK」。</p><p>现在单击绿色锤子按钮，然后查收 <code>HarmonyAuth SMART API.jar</code> 和 <code>HarmonyAuth SMART.jar</code>，现在你可以把 API 发给别的开发者了！HarmonyAuth SMART 的开发也算正式完工了！</p><h2 id="打包的选择" tabindex="-1">打包的选择 <a class="header-anchor" href="#打包的选择" aria-label="Permalink to &quot;打包的选择&quot;">​</a></h2><p>有时候我们会用到第三方库，这时候打包应该怎么选择呢？</p><p>记住这样几条规则：</p><ul><li><p>打包本体时，<strong>如果一个组件在运行时存在，那就不需要打包，否则就需要打包</strong>，以下是详细规则：</p><ul><li><p><strong>必须</strong>打包的有（不打包可能出现错误）：</p><ul><li>你自己的插件本体</li><li>你自己的插件 API</li><li>所有<strong>非插件支援库</strong>（如 JDBC）</li></ul></li><li><p><strong>不能</strong>打包的有（打包后可能会出现错误）：</p><ul><li>其它插件本体（如 Vault 本体，会 <code>InvalidPluginException</code>）</li><li>服务端或者服务端 API（会出现未知的错误）</li></ul></li><li><p><strong>不必</strong>打包的有（没有打包的必要）：</p><ul><li>前置插件的 API（如 Vault API）</li><li>其它没有在上面提到的东西</li></ul></li></ul></li><li><p>打包 API 时，<strong>如果开发者能够获取这个组件，就不需要打包，否则就需要打包</strong>，规则如下：</p><ul><li><p><strong>必须</strong>打包的有：</p><ul><li>如果 <strong>API 中</strong>（注意<strong>不是</strong>本体中！）包含了前置插件的 API 中的类，哪怕<strong>只是一个类</strong>，也需要打包完整的这个前置插件的 API（不是本体！）</li><li>如果 <strong>API 中</strong>包含了非插件支援库（如 JDBC）的类，哪怕<strong>只是一个类</strong>，也需要打包完整的这个支援库</li></ul></li><li><p><strong>不能</strong>打包的有：</p><ul><li>本体不能打包的内容，API 中一样不能打包</li><li>API 应当是<strong>独立的</strong>，本体需要包含 API，但 API 不能包含本体</li></ul></li></ul></li></ul><p>那什么叫「包含」呢？</p><p>举个例子吧，如果我的 API 接口中有一个方法是：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sendMail(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> content)</span></span></code></pre></div><p>虽然它的<strong>功能是发送邮件</strong>，但该方法<strong>本身没有使用邮件相关的类</strong>，因此打包这个 API 时就<strong>不需要</strong>打包邮件支援库。</p><p>相比之下，如果我有一个方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Mail</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getMail()</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>即使它仅仅使用了 <code>Mail</code> 类，但这个类定义在邮件支援库中，打包这个 API 时就<strong>应当</strong>打包邮件支援库的 API（如果它提供了，否则就直接打包整个支援库）。</p><p>就是这样的原理。</p><hr><p>那么再看一个例子，你知道 Vault 是一个分离了 API 的插件，那么，现在我们有几个其它的插件：</p><ul><li>NotEnoughMoney，需要依赖 Vault，同样提供了分离的 API</li><li>CutieShop，需要依赖 NotEnoughMoney</li></ul><p>现在你是 CutieShop 的开发人员，你需要为你的插件编写 API，虽然你巧妙地进行了设计，没有使用 NotEnoughMoney 的类，但你的 API 中不可避免的使用到了 Vault API 中的类，那么你的 API 构建时，需要打包哪些资源呢？请选择（可以多选）：</p><ol><li>Vault 本体</li><li>Vault API</li><li>NotEnoughMoney 本体</li><li>NotEnoughMoney API</li><li>CutieShop 本体</li></ol><p>答案是什么？</p><p>答案是 2，只有 2。因为你<strong>只用到了 Vault API 的类</strong>。也就是说，如果你的 API 用到了其它的 API，也<strong>只需要打包那个 API</strong>，不需要打包对应的本体。</p><hr><p>再把题目改一下，如果你不得不使用 NotEnoughMoney API 中的类和 Vault API 中的类，那么应该打包哪些呢？</p><p>4 吗？只有 4 吗？</p><p>答案是 2 和 4。因为虽然 NotEnoughMoney API 依赖了 Vault API，但它的 API 中<strong>未必包含了 Vault API 中的内容</strong>。所以 Vault API 还是要带着。</p><p>本次行动的源代码：<a href="https://github.com/Andy-K-Sparklight/PluginDiaryCode/tree/master/HarmonyAuth%20SMART%20API/src" target="_blank" rel="noreferrer">https://github.com/Andy-K-Sparklight/PluginDiaryCode/tree/master/HarmonyAuth SMART API/src</a></p><h2 id="行动结束" tabindex="-1">行动结束 <a class="header-anchor" href="#行动结束" aria-label="Permalink to &quot;行动结束&quot;">​</a></h2><p>战斗不费吹灰之力，很简单，但这场战役很重要，因为我们已经具备了开发一个完整的、可应用的、可扩展的插件的能力。按下按钮吧，这是属于你的胜利。</p>`,103),r=s("p",null,[s("button",{type:"button",class:"btn-unconfirmed",style:{width:"100%",transition:"500ms"},onclick:"this.innerHTML=' ✓ 恭喜！';document.getElementById('hiddenEle').style.display = 'block';this.className='btn-confirmed';this.onclick=function(){};"}," ❔ 确认行动结束 ")],-1),i=s("div",{id:"hiddenEle",style:{display:"none"}},[s("blockquote",null,[s("p",null,"行动结果：胜利")]),s("p",null,"这就是有关向其它插件提供 API 的方法了。话说，本小马好累啊~"),s("p",null,"好吧，稍微休息一下，听首歌，我们准备进入第 7 章。"),s("iframe",{frameborder:"no",border:"0",marginwidth:"0",marginheight:"0",width:"100%",height:"86",src:"//music.163.com/outchain/player?type=2&id=31649687&auto=0&height=66"})],-1),p=[l,r,i];function c(k,y,h,v,d,u){return a(),n("div",null,p)}const m=o(e,[["render",c]]);export{g as __pageData,m as default};
