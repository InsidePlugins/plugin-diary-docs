import{_ as o,o as s,c as a,S as n}from"./chunks/framework.7f03344f.js";const d=JSON.parse('{"title":"8-1 世界生成器","description":"","frontmatter":{},"headers":[],"relativePath":"Volume8/8-1.md","filePath":"docs/Volume8/8-1.md","lastUpdated":1698403164000}'),t={name:"Volume8/8-1.md"},l=n(`<h1 id="_8-1-世界生成器" tabindex="-1">8-1 世界生成器 <a class="header-anchor" href="#_8-1-世界生成器" aria-label="Permalink to &quot;8-1 世界生成器&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>参考资料</strong></p><p>世界生成是一个较为复杂的问题，本节写得非常简略，有关世界生成的详细信息，你可以参考 <a href="https://www.mcbbs.net/thread-811614-1-1.html" target="_blank" rel="noreferrer">如何写一个世界生成器</a>。</p></div><h2 id="服务端的世界" tabindex="-1">服务端的世界 <a class="header-anchor" href="#服务端的世界" aria-label="Permalink to &quot;服务端的世界&quot;">​</a></h2><p>如果你观察过服务端文件夹，你应该看到里面有 <code>world</code>、<code>world_nether</code> 和 <code>world_end</code> 三个文件夹，这三个文件夹分别保存主世界、下界和末地的数据。</p><p>实际上在 Bukkit 中，<strong>不同世界的存储方法是相同的。</strong>每一个世界有它单独的一个文件夹，保存独立的数据。</p><p><em>服务端的「世界」和客户端的「维度」是一样的。</em></p><h2 id="世界从哪儿来" tabindex="-1">世界从哪儿来？ <a class="header-anchor" href="#世界从哪儿来" aria-label="Permalink to &quot;世界从哪儿来？&quot;">​</a></h2><p>Minecraft 的世界以<strong>区块</strong>（Chunk）构成，当玩家靠近一个未加载的区块时，Bukkit 会尝试从硬盘中读取该区块，如果这个区块已经生成了，就将它读取到内存中并展示给玩家。</p><p>如果没有生成，那么 Bukkit 就要劳烦 CPU 来生成一个区块了。</p><p>Minecraft 的世界生成，可以看成以下 4 个步骤：</p><ol><li>载入，读取种子，分配内存空间，获取周围区块信息，准备生成该区块。</li><li><strong>生成</strong>（Generation），这一步骤又分为几个小部分： <ul><li>定高，通过高度图绘制基本的地形（用的是石头）。</li><li>渲染，根据生物群系，用合适的方块替换石头。</li><li>雕刻，这一步实际上主要是生成洞穴、矿井、村庄等。</li><li>校验，检查大致地形是否有错。</li></ul></li><li><strong>点缀</strong>（Population），这一步完成第 2 步没完成的工作，诸如生成植物、水洼、岩浆湖、地牢等，虽然按道理生物生成也应该在这一阶段完成，但 Bukkit 通常会等到生物进入模拟距离时才真正生成它们。</li><li>保存，将区块整理在内存中，如果有必要，现在就可以发送给玩家。</li></ol><h2 id="通过监听事件来干预世界生成" tabindex="-1">通过监听事件来干预世界生成 <a class="header-anchor" href="#通过监听事件来干预世界生成" aria-label="Permalink to &quot;通过监听事件来干预世界生成&quot;">​</a></h2><p>在 Bukkit 中，当一个世界<strong>正在被初始化时</strong>，Bukkit 会触发这个事件。在这个事件发生时，我们可以为它添加<strong>装饰器</strong>（Populator），最常用的装饰器是 <code>BlockPopulator</code>（并且也是在不用反射时唯一可用的装饰器）。</p><p>首先，我们要创建一个新的装饰器，下面我们演示如何在世界的表面随机覆盖粉色羊毛和玻璃，看上去很可爱呢~</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">PinkWoolPopulator</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BlockPopulator</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">populate</span><span style="color:var(--shiki-color-text);">(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">World</span><span style="color:var(--shiki-color-text);"> world</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> @</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Random</span><span style="color:var(--shiki-color-text);"> random</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> @</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Chunk</span><span style="color:var(--shiki-color-text);"> source) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>和命令执行器很类似，这里需要实现一个 <code>populate</code> 方法。</p><p><code>world</code> 是正在被装饰的世界，你可以用它来操作世界中的方块，<code>World</code> 类的方法非常多，包括创建树、创建爆炸等等，查阅 JavaDocs 可以获得更多的内容。</p><p>最终完成的效果像这样：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> CHUNK_SIZE </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">16</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> GENERATE_COUNT </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">64</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">populate(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">World</span><span style="color:var(--shiki-token-function);"> world</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> @</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Random</span><span style="color:var(--shiki-token-function);"> random</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> @</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Chunk</span><span style="color:var(--shiki-token-function);"> source)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> GENERATE_COUNT; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> x </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">random</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">nextInt</span><span style="color:var(--shiki-color-text);">(CHUNK_SIZE);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> z </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">random</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">nextInt</span><span style="color:var(--shiki-color-text);">(CHUNK_SIZE);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Block</span><span style="color:var(--shiki-color-text);"> origin </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">source</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getBlock</span><span style="color:var(--shiki-color-text);">(x</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> z);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Location</span><span style="color:var(--shiki-color-text);"> worldLocation </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">origin</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getLocation</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Block</span><span style="color:var(--shiki-color-text);"> b </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getHighestBlockAt</span><span style="color:var(--shiki-color-text);">(worldLocation);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Location</span><span style="color:var(--shiki-color-text);"> l </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">worldLocation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">clone</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">subtract</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">b</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setType</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">PINK_WOOL</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getBlockAt</span><span style="color:var(--shiki-color-text);">(l)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setType</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">PINK_STAINED_GLASS</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>值得注意的是，Population 是按区块进行的，因此我们一次只能设置一个区块的内容。</p><p>一个区块是边长为 16 的正方形，由于我们<strong>并不知道区块的起始坐标</strong>（具体的坐标需要等到实际 <code>populate</code> 时才能知道），我们先<strong>假定坐标从 0 开始</strong>，然后通过 <code>source.getBlock</code> 获得了区块内的临时地址，再通过 <code>origin.getLocation</code> 获得了该方块在世界中的<strong>实际坐标</strong>。这里 <code>y</code> 传入 0 是因为我们不能确定最高的方块在哪里，<code>getLocation</code> 的目的只是确定 <code>x</code> 和 <code>z</code> 在 <code>world</code>（而不是 <code>source</code>）中的坐标。</p><p>然后我们通过 <code>getHighestBlockAt</code> 得到了实际坐标处的最高方块，然后将最高处的方块换成粉色羊毛，将第二高的方块换成了粉色玻璃。不直接向上累加是为了避免超出最高建筑高度。</p><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>一定要使用传入的 <code>random</code></strong>！</p><p>上面的代码中，我们使用了传入的 <code>random</code> 随机数生成器，那为什么要这样做呢？自己创建一个随机数生成器不好吗？</p><p>虽然从技术角度而言完全没有问题，但是 Minecraft 的世界有一个特点：<strong>相同的种子总是生成相同的地形</strong>，这个种子就包含在 <code>random</code> 中，如果你不使用它，那么服主使用相同的种子可能无法得到相同的世界，这是我们不希望看到的。</p><p>当然，也可以利用这一机制防止玩家破解种子，但还是应当尽可能使用传入的 <code>random</code> 对象。</p></div><hr><p>现在监听 <code>WorldInitEvent</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">EventHandler</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onWorldInit(</span><span style="color:var(--shiki-token-keyword);">WorldInitEvent</span><span style="color:var(--shiki-token-function);"> e)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getWorld</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPopulators</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">PinkWoolPopulator()</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这样就可以了，别忘了注册事件处理器！</p><p>通过以上内容，你应该能够体会到 <code>Populator</code> 不能单独工作，一个区块可能是由很多 <code>Populator</code> 共同装点的。</p><h2 id="更多内容" tabindex="-1">更多内容？ <a class="header-anchor" href="#更多内容" aria-label="Permalink to &quot;更多内容？&quot;">​</a></h2><p>本来这里应该说一说 <code>WorldCreator</code>、<code>ChunkGenerator</code> 等内容的，但考虑到地形生成算法涉及包括噪波在内的许多高级知识，远没有 <code>Populator</code> 那么简单，因此笔者就不介绍了，如果你有兴趣，可以看看本节开头提到的「如何写一个世界生成器」中的内容。</p>`,30),r=[l];function e(i,p,c,k,y,h){return s(),a("div",null,r)}const u=o(t,[["render",e]]);export{d as __pageData,u as default};
