import{_ as s,o,c as a,S as n}from"./chunks/framework.7f03344f.js";const d=JSON.parse('{"title":"4-2 MySQL 与 JDBC","description":"","frontmatter":{},"headers":[],"relativePath":"Volume4/4-2.md","filePath":"docs/Volume4/4-2.md","lastUpdated":1698403164000}'),e={name:"Volume4/4-2.md"},t=n(`<h1 id="_4-2-mysql-与-jdbc" tabindex="-1">4-2 MySQL 与 JDBC <a class="header-anchor" href="#_4-2-mysql-与-jdbc" aria-label="Permalink to &quot;4-2 MySQL 与 JDBC&quot;">​</a></h1><p>这节我们来学习一下数据库。哦，不会很难的，各位！</p><h2 id="什么是数据库" tabindex="-1">什么是数据库 <a class="header-anchor" href="#什么是数据库" aria-label="Permalink to &quot;什么是数据库&quot;">​</a></h2><p>数据库存储了许多数据。（这简直是废话）</p><p>更详细地说，一个数据库中有许多不同名字的表。（MySQL 中）</p><p>一台数据库服务器上通常有许多不同名字的数据库。</p><p>相比文件而言，数据库有更好的管理方式，虽然速度不如内存（除了寄存器和缓存也就没哪个能超越内存好吧），但比磁盘更快。除此之外，数据库提供了<strong>数据引擎</strong>用于有效率地在一大堆数据中找出需要的数据。</p><p>简单说，数据库比硬盘强。</p><h2 id="什么是-sql" tabindex="-1">什么是 SQL <a class="header-anchor" href="#什么是-sql" aria-label="Permalink to &quot;什么是 SQL&quot;">​</a></h2><p><strong>SQL 用于控制、管理、访问数据库</strong>。</p><p>SQL 是另一种语言（不是 Java 的一部分），用于在不同的数据库间获得一个尽可能统一的控制方法。</p><p>虽然 SQL 语言的格式是固定的，但目前为止，SQL 的平台差异性仍然很强。一个能在 MySQL 中正常工作的 SQL 指令（很）可能无法在 SQL Server 或者 Access 中工作。</p><p>我们介绍的是 MySQL 数据库，所有的内容都是针对它编写的。</p><h2 id="sql-语言特征" tabindex="-1">SQL 语言特征 <a class="header-anchor" href="#sql-语言特征" aria-label="Permalink to &quot;SQL 语言特征&quot;">​</a></h2><p>SQL 是<strong>指令格式</strong>。</p><p>所谓指令格式，就是这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">做这件事;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">做这件事;</span></span></code></pre></div><p>SQL 指令组成的也不能成为程序，因为终端向数据库发送信息时也是一条一条发送的，因此 SQL 没有「程序」的概念，一条指令就叫做一条 <strong>SQL 语句</strong>。</p><p>SQL 长得像这样：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">INSERT INTO</span><span style="color:var(--shiki-color-text);"> myTable (a, b, c) </span><span style="color:var(--shiki-token-keyword);">VALUES</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-string-expression);">&quot;String&quot;</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>SQL 中，不同的操作的写法也不一样。幸亏我们在插件开发中只需要用到一小部分，全部介绍也不难。</p><h2 id="选用-mysql" tabindex="-1">选用 MySQL <a class="header-anchor" href="#选用-mysql" aria-label="Permalink to &quot;选用 MySQL&quot;">​</a></h2><p>选用 MySQL 的原因很简单：大多数面板服都默认搭载了这种数据库。如果我们不进行相应的调整，我们的插件就没办法很好地进行兼容。此外，MySQL （社区版）是自由的（GPL 许可证），这是该软件相比其它价格高昂的数据库软件的优点之一。</p><h2 id="安装-mysql" tabindex="-1">安装 MySQL <a class="header-anchor" href="#安装-mysql" aria-label="Permalink to &quot;安装 MySQL&quot;">​</a></h2><p>我们假定读者是 Windows 操作系统，实际上在 GNU/Linux 上的安装方法也很相似。</p><p>前往 <a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noreferrer">MySQL 下载页面</a> 获取安装程序。安装程序只有 32 位版本，但在安装时你可以选择安装 32 位或 64 位。下载页面提供两个版本，在线版和离线版，由于 MySQL 的速度还比较快，建议使用在线版。</p><p>下载后运行安装。所有的设置都默认就可以了。在安装时可能会出现下载失败的情况，单击「Try Again」让它再试一次就可以了。</p><p>到达「Accounts and Roles」页面时，你需要为 MySQL 的 root 用户设置一个密码，这对你而言应该很简单吧？</p><p><img src="https://s2.loli.net/2023/07/07/GvF2sIY41xQrBmk.png" alt="CONFIGURE.png"></p><p>接着继续，到达「Connect To Server」时，你需要输入之前的密码登录一次。</p><p>最后几个「Next」，安装就完成了。「MySQL Workbench」和「MySQL Shell」会打开，但我们不需要，将它们关闭就好。</p><p>打开「开始」菜单，选择「MySQL 8.0 Command Line Client - Unicode」，单击打开。</p><p><img src="https://s2.loli.net/2023/07/07/XroVlNjmHkuZpbD.png" alt="MYSQLCMD.png"></p><p>输入之前设置的密码，即可进入 MySQL 终端。</p><p>现在，MySQL 就准备好了。</p><h2 id="mysql-语句" tabindex="-1">MySQL 语句 <a class="header-anchor" href="#mysql-语句" aria-label="Permalink to &quot;MySQL 语句&quot;">​</a></h2><p>如果你刚刚登录成功了，现在你就可以在终端中输入语句了。</p><p>我们先来学习第一条语句。</p><h3 id="创建数据库" tabindex="-1">创建数据库 <a class="header-anchor" href="#创建数据库" aria-label="Permalink to &quot;创建数据库&quot;">​</a></h3><p>我们说，MySQL 中有许多数据库，一个数据库中有许多表。一般而言，一个应用程序使用一个数据库。</p><p>现在 MySQL 中还没有数据库，我们来创建一个，这是创建数据库的语句：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">CREATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">DATABASE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">数据库名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p><em>每一条 SQL 语句的最后都有分号。</em></p><p>请注意这是一条<strong>管理语句</strong>，也就是说，只有我们这种登录到 MySQL 终端后的管理用户才有资格使用，一般的应用程序不可以（也没必要）使用。</p><p>例如，创建名为 <code>test</code> 的数据库：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">CREATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">DATABASE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">test</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p><em>SQL 语句不区分大小写，上面的语句也可以写成 <code>create database test</code>。一般而言，我们用大写书写关键字，用小写和 <code>_</code> 表示标识符（各种名字）。</em></p><h3 id="选定数据库" tabindex="-1">选定数据库 <a class="header-anchor" href="#选定数据库" aria-label="Permalink to &quot;选定数据库&quot;">​</a></h3><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">USE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">数据库名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这也是一条<strong>管理语句</strong>，用于切换当前使用的数据库。当你进入 MySQL 终端时是没有选定数据库的，这条语句用于选定一个数据库。</p><h3 id="创建表" tabindex="-1">创建表 <a class="header-anchor" href="#创建表" aria-label="Permalink to &quot;创建表&quot;">​</a></h3><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">CREATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">TABLE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> (</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标识符 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">类型 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">PRIMARY KEY</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">NOT NULL</span><span style="color:var(--shiki-color-text);"> ,</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标识符 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">类型 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">NOT NULL</span><span style="color:var(--shiki-color-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">更多标识符</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">更多类型</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">最后一个标识符</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">类型后面不要加逗号</span><span style="color:var(--shiki-token-keyword);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>MySQL 中的表必须在创建时规划好，也就是说，每个表的「列」在创建后就无法修改。</p><p><code>PRIMARY KEY</code> 表示主键，主键被 MySQL 索引，查询时会有大幅的性能提升，并且可以判断是否重复。一个表只能有一个主键。</p><p><code>NOT NULL</code> 表示非空，插入数据时不允许插入 <code>NULL</code> 或者不插入。</p><p>这两个都是可选的。</p><p><em>SQL 语句可以跨行，只有分号才表示结束，不换行也是可以的，表名和左括号之间的空格也不是必需的。</em></p><p>比如，我们要创建一个存储玩家信息的数据表：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">CREATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">TABLE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">player_data</span><span style="color:var(--shiki-color-text);"> (</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">uuid </span><span style="color:var(--shiki-token-keyword);">VARCHAR</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">255</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">PRIMARY KEY</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">NOT NULL</span><span style="color:var(--shiki-color-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">name</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">TEXT</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">NOT NULL</span><span style="color:var(--shiki-color-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">isGirl </span><span style="color:var(--shiki-token-keyword);">BOOLEAN</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">NOT NULL</span><span style="color:var(--shiki-color-text);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">money</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">INTEGER</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">NOT NULL</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p><em>指定 <code>NOT NULL</code> 可以提供更高的安全性，不指定则可以在插入数据时只插入必要的部分。</em></p><p>由于创建已经存在的表会触发错误，通常我们使用更聪明的：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">CREATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">TABLE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">IF</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">NOT</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">EXISTS</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">数据表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> (</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">（中间的内容）</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">) ;</span></span></code></pre></div><p>只有当表不存在时才会创建。</p><p>这就不会出现错误了。</p><p>另外，这是一条<strong>应用语句</strong>，这条语句可以被应用程序使用。（一个应用程序使用一个单独的数据库，该应用程序可以管理属于自己的多张表）</p><h3 id="插入数据" tabindex="-1">插入数据 <a class="header-anchor" href="#插入数据" aria-label="Permalink to &quot;插入数据&quot;">​</a></h3><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">INSERT INTO</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">VALUES</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">)</span></span></code></pre></div><p>这是插入「一行」数据到指定的表中。所有注明了 <code>NOT NULL</code> 的标签都必须在 <code>VALUES</code> 前的括号中出现，<code>VALUES</code> 后面的括号中的值与 <code>VALUES</code> 一一对应。没有 <code>NOT NULL</code> 修饰的可以不提供，它将被设为空。</p><p>MySQL 在插入数据时<strong>不覆盖</strong>！也就是说，在 MySQL 中可以有完全相同的两行。</p><p><code>INSERT INTO</code> 有一个变种：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">INSERT INTO</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">VALUES</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ON</span><span style="color:var(--shiki-color-text);"> DUPLICATE </span><span style="color:var(--shiki-token-keyword);">KEY</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">UPDATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签</span><span style="color:var(--shiki-token-keyword);">&gt;=&lt;</span><span style="color:var(--shiki-color-text);">值</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签</span><span style="color:var(--shiki-token-keyword);">&gt;=&lt;</span><span style="color:var(--shiki-color-text);">值</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这个版本会在主键（<code>PRIMARY KEY</code>）重复时执行后面的 <code>UPDATE</code> 操作，也就是设定指定的标签。这可以避免创建重复的行。</p><p>那有没有插入列的方法呢？很遗憾，没有。由于我们在创建表时就指定了列，因此无法修改。</p><h3 id="更新数据" tabindex="-1">更新数据 <a class="header-anchor" href="#更新数据" aria-label="Permalink to &quot;更新数据&quot;">​</a></h3><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">UPDATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">SET</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;=&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;=&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">WHERE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">条件 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;&lt;</span><span style="color:var(--shiki-color-text);">操作符</span><span style="color:var(--shiki-token-keyword);">&gt;&lt;</span><span style="color:var(--shiki-color-text);">值 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span></span></code></pre></div><p>这用来更新指定的一行。</p><p><code>WHERE</code> 是 MySQL 中的大杀器，它相当于 <code>if</code>，后面可以跟一些条件。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">WHERE</span><span style="color:var(--shiki-color-text);"> isGirl</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);">true;</span></span></code></pre></div><p>最基本的 <code>WHERE</code>，查找 <code>isGirl</code> 为真的行。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">WHERE</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">money&gt;=</span><span style="color:var(--shiki-token-constant);">3000</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">OR</span><span style="color:var(--shiki-color-text);"> (isGirl</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);">true);</span></span></code></pre></div><p>改进后的 <code>WHERE</code>，查找 <code>money</code> 大于等于 <code>3000</code> 或者 <code>isGirl</code> 的行。这里也可以用 <code>AND</code>（与）。不过遗憾的是，MySQL 不支持 <code>XOR</code>（亦或）。除了 <code>=</code> 和 <code>&gt;=</code>，还有 <code>&gt;</code>，<code>&lt;</code>，<code>!=</code> 可以使用。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">WHERE</span><span style="color:var(--shiki-color-text);"> (isGirl</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);">true) </span><span style="color:var(--shiki-token-keyword);">AND</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">name</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">LIKE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;%FHC&quot;</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p><code>LIKE</code> 用于执行一次相似查找，<code>%</code> 表示「任意」。如果不使用 <code>%</code>，<code>LIKE</code> 和 <code>=</code> 是一样的。上面这个方法用于查找任何以 <code>FHC</code> 结尾的小姐姐。</p><p><em>SQL 语句中所有的字符串都要打引号，与 Java 相同。</em></p><p><code>WHERE</code> 在查找主键时非常迅速，而在查找其它值则会有性能损耗。并且对于较大的数据类型（<code>LONGTEXT</code>、<code>LONGBLOB</code> 等）不一定能够返回正确的结果。</p><h3 id="读出值" tabindex="-1">读出值 <a class="header-anchor" href="#读出值" aria-label="Permalink to &quot;读出值&quot;">​</a></h3><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">SELECT</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">标签 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">FROM</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">WHERE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">条件 </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">, </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">条件 </span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p><code>SELECT</code> 从整个表中「复制」一部分。标签是选定的列，<code>WHERE</code> 和上面的用法一样，查找指定的行。</p><p>以上面创建的数据表为例，这一次我想查询服务器中所有的平民玩家和小姐姐的 <code>uuid</code>，就应该这样写：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">SELECT</span><span style="color:var(--shiki-color-text);"> uuid </span><span style="color:var(--shiki-token-keyword);">FROM</span><span style="color:var(--shiki-color-text);"> player_data </span><span style="color:var(--shiki-token-keyword);">WHERE</span><span style="color:var(--shiki-color-text);"> (isGirl</span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);">true) </span><span style="color:var(--shiki-token-keyword);">OR</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">money&lt;</span><span style="color:var(--shiki-token-constant);">3000</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p><em>仅选择一列时，括号可以省略。</em></p><p>在终端中，MySQL 会将返回值直接以表格的显示展示出来。如果要使用 Java 来读取呢？那我们就要用到 <code>ResultSet</code> 了。这一点马上我们就会说明。</p><h3 id="删除值" tabindex="-1">删除值 <a class="header-anchor" href="#删除值" aria-label="Permalink to &quot;删除值&quot;">​</a></h3><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">DELETE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">FROM</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">WHERE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">条件</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>用于删除一行或几行。如果不使用 <code>WHERE</code> 将删除所有的记录！</p><p>另外 <code>DELETE</code> 不支持删除一「格」，要这样做应该使用 <code>UPDATE WHERE</code>。</p><h3 id="删除数据表" tabindex="-1">删除数据表 <a class="header-anchor" href="#删除数据表" aria-label="Permalink to &quot;删除数据表&quot;">​</a></h3><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">DROP</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">TABLE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">表名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这会删除一个表的所有数据。不可撤销！</p><h3 id="删除数据库" tabindex="-1">删除数据库 <a class="header-anchor" href="#删除数据库" aria-label="Permalink to &quot;删除数据库&quot;">​</a></h3><p>（学着点，将来<s>删库跑路时</s>会用到的！）</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">DROP</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">DATABASE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">数据库名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这也是一条<strong>管理语句</strong>。</p><h2 id="mysql-中的类型" tabindex="-1">MySQL 中的类型 <a class="header-anchor" href="#mysql-中的类型" aria-label="Permalink to &quot;MySQL 中的类型&quot;">​</a></h2><h3 id="文本" tabindex="-1">文本 <a class="header-anchor" href="#文本" aria-label="Permalink to &quot;文本&quot;">​</a></h3><p>MySQL 中的文本有好几种。</p><ul><li><code>CHAR(大小)</code>，定长字符串，大小不能超过 255，可用作主键</li><li><code>VARCHAR(大小)</code>，弹性字符串，大小不能超过 16383，大小不大于 768 的可用作主键</li><li><code>TINYTEXT</code>，弹性短文本，能够存储最大达 255 的字符串，不能用作主键</li><li><code>TEXT</code>，弹性文本，能够存储最大达 65535 的字符串，不能用作主键</li><li><code>MEDIUMTEXT</code>，弹性扩展文本，能够存储最大达 16777215 的字符串，不能用作主键</li><li><code>LONGTEXT</code>，弹性长文本，能够存储最大达 4294967295 的字符串，不能用作主键</li></ul><p>文本不适合用 <code>WHERE</code> 来查找，<code>WHERE</code> 适合查找下面这种类型……</p><h3 id="数学" tabindex="-1">数学 <a class="header-anchor" href="#数学" aria-label="Permalink to &quot;数学&quot;">​</a></h3><p>所有的数学类型都可以用作主键。</p><ul><li><code>BOOLEAN</code>，逻辑值，仅有 <code>true</code> 和 <code>false</code></li><li><code>TINYINT</code>，极短整数，从 -128 到 127</li><li><code>SMALLINT</code>，短整数，从 -32768 到 32767</li><li><code>MEDIUMINT</code>，弹性短整数，从 -8388608 到 8388607</li><li><code>INTEGER</code>，整数，从 -2147483648 到 2147483647</li><li><code>BIGINT</code>，大整数，从 -9223372036854775808 到 9223372036854775807</li><li><code>FLOAT</code>，单精度小数，从 -3.402823466 E+38 到 -1.175494351 E-38，0 以及从 1.175494351 E-38 到 3.402823466351 E+38</li><li><code>DOUBLE</code>，双精度小数，能够存储极大和极小的数据（这里就不列出了，CPU 放得下的 <code>DOUBLE</code> 都放得下）</li></ul><hr><p>除此之外，MySQL 中还有 <code>BLOB</code> 家族用于保存二进制数据，<code>DATE</code> 家族用于保存日期，但它们在插件开发中都不是很常用，就不介绍了。</p><h2 id="插件开发中的数据库" tabindex="-1">插件开发中的数据库 <a class="header-anchor" href="#插件开发中的数据库" aria-label="Permalink to &quot;插件开发中的数据库&quot;">​</a></h2><blockquote><p>要驾驭更强大的力量，就必须有更强大的能力。</p></blockquote><p>Bukkit 没有为我们提供连接 MySQL 的方法，因此我们不得不自己连接。</p><h2 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-label="Permalink to &quot;异步编程&quot;">​</a></h2><p>数据库的各种操作都是异步（Asynchronous）的。因为<strong>虽然服务端的动作很快，但数据库软件的响应并没有那么快</strong>，如果服务端采用同步（Synchronous）方式处理，和数据库进行的交互就要浪费大量时间。我们还是举例子说明：</p><p>你在等一个快递（数据库的结果），它大概会在一个小时之后到（需要时间，相比服务端，数据库花的时间更多），而你需要写插件（后面有操作在等待）。</p><p>如果采用同步方法，那就是这样：</p><ol><li>等一个小时，等到快递过来（等待数据库返回）</li><li>收取快递，然后写插件（继续操作）</li></ol><p>如果只是浪费时间还好，问题是，等待数据库返回时，服务端阻塞在 1 这个位置。也许就在这个时候，有玩家的移动数据被发送过来，而服务端却不能进行处理，它在等待数据库的响应。</p><p>而如果采用异步方法，就会是这样：</p><ol><li>先设置一个提醒事项，告诉自己，一会快递来的时候，如此这般……（不等待数据库的返回）</li><li>继续写插件（后面的处理得以及时运行）</li><li>当快递来了（数据库返回），暂停手中的插件开发（中断），进行快递的签收（回调函数）</li><li>签收完毕后切换回插件开发，继续完成其它任务</li></ol><p>从这里不难看出，异步是在等待一个很慢的外部操作（读取文件，访问数据库等）时，不中断主程序的操作。</p><p>在 Bukkit 中，要实现异步需要多线程，幸运的是 Bukkit 已经为我们实现了这个功能。只需要使用 <code>BukkitRunnable</code> 就行了：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 要做之事……</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTaskAsynchronously</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>其中的 <code>this</code> 是插件实例，如果这些代码不是在插件主类中运行的，可以参考 EX-1-2 中的小技巧：在插件主类中暴露出 <code>instance</code>。</p><h2 id="jdbc" tabindex="-1">JDBC <a class="header-anchor" href="#jdbc" aria-label="Permalink to &quot;JDBC&quot;">​</a></h2><p>按道理讲，MySQL 的 CP 是 PHP，此二者才是最合适的组合~</p><p>然而我们的插件使用的是 Java，钢铁直男一般的角色，显然不能直接和娇滴滴的小姑娘进行交♂流……这当然又只是玩笑，但 Java 确实无法直接和 MySQL 交互。</p><p>这时候 JDBC 出场了。JDBC 是一个驱动程序，能够帮助 Java 和 MySQL 进行连接。</p><p>JDBC 是一个库，我们需要像引入 <code>spigot-1.16.5.jar</code> 一样引入它。</p><p><em>MySQL 在安装时已经为我们准备了对应的 JDBC，但笔者还是决定手动下载，因为 JDBC 有时候会更新，而我们不可能每次都重新安装数据库。</em></p><p>前往 <a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noreferrer">MySQL JDBC 下载地址</a> 下载 JDBC。在下载页面中需要选择「Platform Independent」。</p><p><img src="https://s2.loli.net/2023/06/19/2Es7Q63FJLqyfYm.png" alt="DL.png"></p><p><em>Windows 下载下面那个（ZIP），GNU/Linux 下载上面那个（TAR）。</em></p><p>单击「Download」后不会直接进入下载地址，你需要在新的页面单击「No thanks, just start my download.」</p><p><img src="https://s2.loli.net/2023/06/19/DPBI7TmXFMAeQRE.png" alt="DIRECTDL.png"></p><p>下载的文件是一个压缩包，解压它，你可以在解压的文件中找到 <code>mysql-connector-java-8.0.23.jar</code>。当你阅读本教程时可能已经有了更新的版本，尽管使用就行。</p><p>这个库要怎么使用呢？我们先卖个关子，到了本章的演习（「HarmonyAuth SMART」），我们再来说它的引入方法。</p><h2 id="连接-mysql" tabindex="-1">连接 MySQL <a class="header-anchor" href="#连接-mysql" aria-label="Permalink to &quot;连接 MySQL&quot;">​</a></h2><p>出于安全原因，MySQL（和大多数其它的数据库）都使用账号密码进行身份验证。这些信息我们无法读取，因此应当让服主在配置文件中指定。除此之外，因为一个应用程序使用一个数据库，因此这个数据库名由服主为我们分配，我们也要取得这一信息。</p><p>连接 MySQL 时用到了 <code>java.sql</code> 包。很有趣的是，为了使用 JDBC，我们需要使用反射：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> JDBC_DRIVER </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 驱动名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> PORT </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;3306&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 由服主指定</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> DB_NAME </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;plugin_db&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 由服主指定</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> DB_URL </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;jdbc:mysql://localhost:&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> PORT </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;/&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> DB_NAME </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 连接参数的固定格式</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> USERNAME </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;root&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 由服主指定</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> PASSWORD </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;******&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 由服主指定</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Connection</span><span style="color:var(--shiki-color-text);"> connection;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Statement</span><span style="color:var(--shiki-color-text);"> statement;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(JDBC_DRIVER); </span><span style="color:var(--shiki-token-comment);">// forName 又来了！</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    connection </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">DriverManager</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getConnection</span><span style="color:var(--shiki-color-text);">(DB_URL</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> USERNAME</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> PASSWORD);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">} </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">SQLException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>当心</strong>！</p><p>上述代码片段必须写在 <code>BukkitRunnable</code> 中，并进行异步调用，所有涉及数据库的操作都要这样！</p></div><p>这里的反射加载是一个特例，因为 SQL 的实现多种多样，<code>jav.sql</code> 这个包不可能考虑到所有的 SQL 驱动程序，因此这个包只使用了一个接口（一张未实现的协议），具体的实现由驱动程序完成。</p><p>我们不需要清楚内部的原理，只要知道执行一次 <code>Class.forName</code> 设定就完成了。如果有错，会触发 <code>ClassNotFoundException</code>。</p><p><code>DriverManager.getConnection</code> 方法获得一个连接。如果连不上，<strong>不要自作聪明进行处理</strong>，直接使用 <code>printStackTrace</code>（或者稍微转换以下）将错误报告给服主吧。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>到底怎么回事</strong>？</p><p>虽然对于插件自己的错误，我们应当全力进行捕获并且处理，但对于像数据库这种外部错误，<strong>不要擅自处理</strong>。</p><p>数据库中可能包含其它插件的重要数据，如果擅自进行处理可能导致意想不到的后果，这时候我们最好的做法就是报告错误，让服务器的技术人员来处理。</p></div><p>获取到连接后，就可以进行操作了。</p><h2 id="java-中的-sql-语句" tabindex="-1">Java 中的 SQL 语句 <a class="header-anchor" href="#java-中的-sql-语句" aria-label="Permalink to &quot;Java 中的 SQL 语句&quot;">​</a></h2><p>我们直接使用 <code>PreparedStatement</code> 类就可以创建 SQL 语句并进行执行。</p><p>注意：<strong>任何有关 SQL 的操作都可能引发 <code>SQLException</code>，请进行捕获</strong>！</p><p>使用 <code>Connection</code> 对象的 <code>prepareStatement</code> 可以创建 SQL 语句，并且用 <code>?</code> 以备将来插值。如果没有需要插值的地方呢？那就不用 <code>?</code> 嘛……</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">PreparedStatement</span><span style="color:var(--shiki-color-text);"> ps </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">connection</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">prepareStatement</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;UPDATE MYTABLE SET MYKEY = ? WHERE ID = ?&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ps</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setString</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;someKey&quot;</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 如果用了 ?，这里就要进行插值</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ps</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setString</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;someId&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// SQL 中索引从 1 开始！</span></span></code></pre></div><p>我们先创建了语句，再通过 <code>setXXX</code> 方法设置各个 <code>?</code> 处的值。这里和 Java 不一样：SQL 的第一项就是 1（Java 数组中是 0）！</p><h3 id="执行-sql" tabindex="-1">执行 SQL <a class="header-anchor" href="#执行-sql" aria-label="Permalink to &quot;执行 SQL&quot;">​</a></h3><p>上面创建好了语句，那么下面我们看看怎么执行。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 普通的执行</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ps</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">execute</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 用于更新数据</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> affected </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ps</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">executeUpdate</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 用于查询数据</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ResultSet</span><span style="color:var(--shiki-color-text);"> rs </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ps</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">executeQuery</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">ResultSet</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">TYPE_SCROLL_SENSITIVE</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ResultSet</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">CONCUR_READ_ONLY</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>第一个是一般的执行，不关心结果。</p><p>第二个返回受影响的行数。</p><p>第三个用于获得 <code>SELECT</code> 的结果。</p><p>那 <code>ResultSet</code> 是什么捏？</p><p><code>ResultSet</code> 是 <code>SELECT</code> 返回的一个「切片」，也就是一小张表。它的用法是：「先选行，再选列」。</p><p>调用它的 <code>first</code> 方法选择第一行，<code>next</code> 滚动到下一行。</p><p><code>ResultSet</code> 有一系列的 <code>getXXX</code> 方法（和 YAML 很像）。<code>getXXX</code> 获得<strong>已选行</strong>中的指定列上的值。<strong>一定要选择正确的类型</strong>！如果 <code>getXXX</code> 与那里实际存储的值无法相互转换，就会出错。</p><p>例如，<code>getString(&quot;UUID&quot;)</code> 用于获取当前行中名为 <code>UUID</code> 的列。除了可以使用列的名字，还可以使用编号来获得，例如 <code>getString(1)</code> 获取当前行中第一列的内容。这里同样从 1 开始。</p><p>括号中为什么有两个参数呢？这是 <code>executeQuery</code> 的固定写法，如果不这样做，<code>ResultSet.first</code> 方法就不能正常运行。其中的原理已经超出了本教程涵盖的内容，总之，要使用这些功能，就需要这样写。</p><p>我们在行动调试中（AC-1-3）中会见到这个问题的。</p><h2 id="关闭连接" tabindex="-1">关闭连接 <a class="header-anchor" href="#关闭连接" aria-label="Permalink to &quot;关闭连接&quot;">​</a></h2><p>处理结束后一定要关闭连接！保持连接很容易消耗 MySQL 的性能，如果一直不关闭，不知道会有什么后果！</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">st</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">close</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 先关闭语句</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">connection</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">close</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 再断开连接</span></span></code></pre></div><hr><p>有关 MySQL 的应用我们暂且只说到这里，在一般的插件开发中使用到的 SQL 都仅限于增删查改，因此更高级的内容我们就不介绍了。在本章的演习中我们会再次介绍 SQL。</p>`,175),l=[t];function r(p,i,c,k,y,h){return o(),a("div",null,l)}const x=s(e,[["render",r]]);export{d as __pageData,x as default};
