import{_ as s,o as n,c as a,S as o}from"./chunks/framework.7f03344f.js";const u=JSON.parse('{"title":"5-1 自定义合成表","description":"","frontmatter":{},"headers":[],"relativePath":"Volume5/5-1.md","filePath":"docs/Volume5/5-1.md","lastUpdated":1698403164000}'),t={name:"Volume5/5-1.md"},e=o(`<h1 id="_5-1-自定义合成表" tabindex="-1">5-1 自定义合成表 <a class="header-anchor" href="#_5-1-自定义合成表" aria-label="Permalink to &quot;5-1 自定义合成表&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>注意兼容性</strong>！</p><p>本节中的部分内容可能不与旧版本（1.12.2 及以下）兼容，请使用 1.13 或更高版本！</p></div><p>很多服务器中允许玩家使用两个泥土合成一个钻石块……啊不对，是两个（笑）。</p><p>好啦，不开玩笑，但是这样的功能确实可以做到。</p><p>物品的合成并不是在客户端进行处理的，客户端将玩家的合成表发送到服务端，服务端计算后返回合适的产物。</p><p>因此我们自然可以在上面动点手脚……</p><h2 id="工作台合成配方-有序" tabindex="-1">工作台合成配方（有序） <a class="header-anchor" href="#工作台合成配方-有序" aria-label="Permalink to &quot;工作台合成配方（有序）&quot;">​</a></h2><p>出人意料的是（也许只有我是这样），Minecraft 中的合成表表述很人性化，和小学的竖式填空很像。<strong>相同的符号代表相同的物品，空格代表不放</strong>。如果 <code>a</code> 代表圆石，<code>b</code> 代表木棍，那么石斧的摆放方式如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">aa </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">ab </span></span>
<span class="line"><span style="color:var(--shiki-color-text);"> b</span></span></code></pre></div><p><em>每一行的最后都有一个空格，虽然你看不见，但你可以用鼠标选中一部分，就能看到最后有一个空格。</em></p><p>很简单吧？</p><p>如果 <code>c</code> 代表煤炭，<code>d</code> 代表木棍，那么火把的表示是这样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">c</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">d</span></span></code></pre></div><p>可以看到，这<strong>不遵循九宫格模式，最后也没有空格</strong>。这样设计就使得玩家可以在工作台的<strong>任意位置</strong>合成火把，而不一定非要放在九宫格的中间和下面两格。</p><p>然后我们把它转换成代码。</p><p>首先我们设计一个合成表：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">ccc</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">cxc</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">ccc</span></span></code></pre></div><p><code>c</code> 代表煤炭，<code>x</code> 代表铁锭，最后得到一个黑曜石。</p><p>然后我们需要把合成表从二维转换成一维：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">ccc</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">cxc</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">ccc</span></span></code></pre></div><p>转换为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">ccc cxc ccc</span></span></code></pre></div><p>现在配方设计好了，我们需要将这些告知 Bukkit。</p><p>Bukkit 中有一个名为 <code>ShapedRecipe</code> 的类来完成这项任务。这个类看上去可以直接实例化，我们来试试：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ShapedRecipe</span><span style="color:var(--shiki-color-text);"> shapedRecipe </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ShapedRecipe(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;interesting_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">OBSIDIAN</span><span style="color:var(--shiki-token-function);">))</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这里有两个参数，一个是 <code>NamespacedKey</code>，一个是产物。</p><p>正如你想到的，这个 <code>ItemStack</code> 也可以 <code>setAmount</code> 设置合成的数量或者对它的 <code>ItemMeta</code> 进行 <code>setLore</code> 用于获得更漂亮的物品等等。相比而言这比 Mod 和数据包（指客户端本地的那个）更灵活。</p><p><code>NamespacedKey</code> 是什么呢？它是这个合成表的名字。一般我们直接 <code>new</code> 来创建。<code>NamespacedKey</code> 也需要两个参数，第一个是<strong>插件实例</strong>，可以通过之前那个小戏法获得，第二个是这个合成表的名字。</p><p><strong>注意：名字（第二个参数）只能使用小写！这对所有的 <code>NamespacedKey</code> 都一样！</strong></p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>学习开发思维</strong></p><p>从现在开始，我们要学会利用之前学习过的知识了。就像这里的 <code>ItemStack</code> 可以自定义一样，Bukkit 中有很多这样的可以自定义的地方。要学会把知识结合起来使用。记住：<strong>没有说明不行的，都是可以</strong>！</p></div><p>然后调用 <code>shape</code> 方法就可以设置合成表。如果你的合成表一维化后只有两个或一个，<code>shape</code> 方法也能认得出来。顺序是从上到下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">shapedRecipe </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">shapedRecipe</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">shape</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;ccc&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;cxc&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;ccc&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 一定要按顺序！</span></span></code></pre></div><p><em>如果有一行什么都不用放，那也不用打三个空格，提供 <code>&quot;&quot;</code>（空字符串）即可。</em></p><p>别慌，还没完，Bukkit 还不知道各个字母代表什么呢。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">shapedRecipe </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">shapedRecipe</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setIngredient</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;c&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">COAL</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setIngredient</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;x&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">IRON_INGOT</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 单引号！</span></span></code></pre></div><p><code>ShapedRecipe</code> 修改后<strong>返回一个副本</strong>，需要赋给一个变量，而不像 <code>ItemMeta</code> 是就地修改，这一点务必当心！</p><p>这里的 <code>setIngredient</code> 实际上有两个常用版本：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ShapedRecipe</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setIngredient(</span><span style="color:var(--shiki-token-keyword);">char</span><span style="color:var(--shiki-token-function);"> symbol</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Material</span><span style="color:var(--shiki-token-function);"> material)</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 宽松模式</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ShapedRecipe</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setIngredient(</span><span style="color:var(--shiki-token-keyword);">char</span><span style="color:var(--shiki-token-function);"> symbol</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">RecipeChoice</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">ExactChoice</span><span style="color:var(--shiki-token-function);"> choice)</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 严格模式</span></span></code></pre></div><p>上面的例子中，我们使用的是「宽松模式」。这两个有什么区别呢？</p><p>使用 <code>Material</code> 的是「宽松模式」，也就是只要放上来的物品是这个材料就行了，不管名称，数量默认是 1 个。例如，一个火把改名为「大火球」也可以被这个模式识别。</p><p>而使用 <code>RecipeChoice.ExactChoice</code> 的是「严格模式」，需要名称、介绍（Lore）等等<strong>与设置的物品完全一致</strong>才接受，只要有一点点不一样就不认。例如，一个火把改名为「大火球」可能就不能被该模式识别，它可以用 <code>ItemStack</code> 为参数构造，使用 <code>new RecipeChoice.ExactChoice(ItemStack item)</code> 即可。</p><p>这两种方法各有利弊。第一种对玩家更友好，第二种可以让服务器「仅允许使用特定的物品进行合成」。</p><hr><p>最后将它注册到服务器中：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addRecipe</span><span style="color:var(--shiki-color-text);">(shapedRecipe);</span></span></code></pre></div><p>Bukkit 这里还有一个很坑的地方，服务器要关闭时要<strong>调用 <code>resetRecipes</code> 清除我们自定义的合成表</strong>，否则<strong>不知道会有什么后果</strong>！这个应该写在 <code>onDisable</code> 方法中。另有 <code>clearRecipes</code>，无论原版、插件，悉以清除。舛由形似，紊以名同，慎之慎之。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onDisable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">resetRecipes</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这样就完成了。很简单，对吧？</p><h2 id="工作台合成配方-无序" tabindex="-1">工作台合成配方（无序） <a class="header-anchor" href="#工作台合成配方-无序" aria-label="Permalink to &quot;工作台合成配方（无序）&quot;">​</a></h2><p>无序配方和有序配方很相似，唯一的区别就是它不使用「形状 - 原料」形式进行设置，而使用「原料 - 数量」进行设置。Mojang 称之为 <code>ShapelessRecipe</code>。</p><p>我们演示一下四个泥土合成一个钻石。其中泥土无论怎么放都行，数量够了就可以（无序配方）。</p><p>首先创建 <code>ShapelessRecipe</code> 实例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ShapelessRecipe</span><span style="color:var(--shiki-color-text);"> shapelessRecipe </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ShapelessRecipe(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;another_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">DIAMOND</span><span style="color:var(--shiki-token-function);">))</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这里的参数同样是 <code>NamespacedKey</code> 和产物。</p><p>然后调用 <code>addIngredient</code> 添加原料，<code>addIngredient</code> 同样也有宽松和严格两个模式。这里我们演示一下严格模式。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> requiredItem </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">DIRT</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">requiredItem</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">im</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setDisplayName</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;大地的皮肤&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">requiredItem</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(im);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">shapelessRecipe </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">shapelessRecipe</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addIngredient</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">4</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> RecipeChoice</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">ExactChoice</span><span style="color:var(--shiki-color-text);">(requiredItem));</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 不是就地修改！切记！</span></span></code></pre></div><p>这就是严格模式，用于合成的泥土必须是名为「大地的皮肤」的泥土。如果使用宽松模式，那么没有这个限制。</p><p>后面就和有序合成一样啦~</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addRecipe</span><span style="color:var(--shiki-color-text);">(shapelessRecipe);</span></span></code></pre></div><p>当然，最后也别忘了在插件禁用时清除合成表，不过，清除只需要一次就可以了。（清除所有的自定义合成表）</p><h2 id="熔炉配方" tabindex="-1">熔炉配方 <a class="header-anchor" href="#熔炉配方" aria-label="Permalink to &quot;熔炉配方&quot;">​</a></h2><p>熔炉和工作台配方稍有不同。熔炉的工作模式决定了：</p><ul><li>输入只能是一个物品</li><li>输入的物品只能使用「宽松模式」</li></ul><p>熔炉配方的设置在创造时就决定了。它由 <code>FurnaceRecipe</code> 描述：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">FurnaceRecipe</span><span style="color:var(--shiki-color-text);"> fr </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">FurnaceRecipe(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;a_furnace_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLACK_WOOL</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE_WOOL</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">0.8</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">200</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>五个参数有各自的意义：</p><ul><li><code>NamespacedKey</code> 和 <code>ItemStack</code> 和上面一样，是配方的名字和产物</li><li><code>Material</code> 是原料</li><li><code>0.8</code> 是经验值，熔炼完成后给予玩家</li><li><code>200</code> 是熔炼时间，单位刻（20 刻 = 1 秒），一桶熔岩可以燃烧 20000 刻，Minecraft 原版中所有物品的熔炼时间都是 200，你也可以自己修改</li></ul><p>这里的原料也可以使用严格模式。（通过 <code>RecipeChoice.ExactChoice</code>）</p><p><code>Material</code> 只能指定一种原料，那如果很多原料（例如所有的铁质装备）得到同一种结果呢？这就得编写很多很多的 <code>FurnaceRecipe</code>！</p><p>这是不方便的，因此 Bukkit 提供了一个解决方案，只需要把：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE_WOOL</span></span></code></pre></div><p>换成：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> RecipeChoice</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">MaterialChoice</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE_WOOL</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">PINK_WOOL</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">RED_WOOL</span><span style="color:var(--shiki-color-text);">)</span></span></code></pre></div><p>也就是提供一个 <code>RecipeChoice.MaterialChoice</code> 对象啦，括号里面可以放入任意多的 <code>Material</code>，这样就很方便啦！</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>内部类</strong></p><p>这里的类名中有一个 <code>.</code>。这表示<strong>内部类</strong>。</p><p>记得我们之前说过的「类也是一个对象」吗？那这样就好理解了，<code>MaterialChoice</code> 并没有定义在单独的文件中，它是 <code>RecipeChoice</code> 的一部分。这里的点仍然表示「的」。</p><p>这种定义在另一个类中的类就是内部类，了解即可，要通过 <code>&lt;公共类名&gt;.&lt;内部类名&gt;</code> 进行访问。</p></div><p>当然，无论使用哪种方法，最后都要注册：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addRecipe</span><span style="color:var(--shiki-color-text);">(fr);</span></span></code></pre></div><p>在插件禁用时也要清除。</p><h2 id="烟熏炉配方" tabindex="-1">烟熏炉配方 <a class="header-anchor" href="#烟熏炉配方" aria-label="Permalink to &quot;烟熏炉配方&quot;">​</a></h2><p>这个配方和熔炉完全一样，只是要创建的类变成了 <code>SmokingRecipe</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">SmokingRecipe</span><span style="color:var(--shiki-color-text);"> smkr </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">SmokingRecipe(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;a_smoking_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLACK_WOOL</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE_WOOL</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">1.2</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">200</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>虽然在原版 Minecraft 中，烟熏炉被设计为用来烹饪食物，但看上去这里并没有额外的限制。</p><p>同样，这里可以使用 <code>RecipeChoice.MaterialChoice</code> 进行「多合一」。</p><p>别忘了注册和清除啊！</p><h2 id="高炉配方" tabindex="-1">高炉配方 <a class="header-anchor" href="#高炉配方" aria-label="Permalink to &quot;高炉配方&quot;">​</a></h2><p>我可以不多讲吗……算了，本小马没办法放下心来，还是再说一遍吧~</p><p>高炉在原版 Minecraft 中的设定是只能用于熔炼矿物，速度加倍但燃料消耗也加倍。</p><p>这里值得注意的一点是，「燃料消耗」这个已经无法更改了，因此，如果你的配方消耗时间不进行相应的修改，玩家就会觉得不太爽。</p><p>高炉配方的类是 <code>BlastingRecipe</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">BlastingRecipe</span><span style="color:var(--shiki-color-text);"> br </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BlastingRecipe(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;a_blasting_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLACK_WOOL</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE_WOOL</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">0.8</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">100</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>同样，这里可以使用 <code>RecipeChoice.MaterialChoice</code> 进行「多合一」。</p><p>所有原版物品的高炉烧炼时间都是 100。当然，利用这个机制，你可以制作「只能用高炉烧炼的物品」。</p><h2 id="营火配方" tabindex="-1">营火配方 <a class="header-anchor" href="#营火配方" aria-label="Permalink to &quot;营火配方&quot;">​</a></h2><p>这也和熔炉一样，只是营火不存在「燃料」的概念，因此应当适当延长烧炼时间。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">CampfireRecipe</span><span style="color:var(--shiki-color-text);"> cr </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">CampfireRecipe(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;a_campfire_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLACK_WOOL</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE_WOOL</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">0.8</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">300</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>同样，这里可以使用 <code>RecipeChoice.MaterialChoice</code> 进行「多合一」。</p><p>不过不建议修改营火的配方，不然把羊毛放在上面……</p><p>总觉得哪里有点奇怪……</p><h2 id="切石配方" tabindex="-1">切石配方 <a class="header-anchor" href="#切石配方" aria-label="Permalink to &quot;切石配方&quot;">​</a></h2><p>这也和熔炉的原理是一样的，只是没有「烧炼时间」和「经验值」的概念。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">StoneCuttingRecipe</span><span style="color:var(--shiki-color-text);"> scp </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">StoneCuttingRecipe(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;a_stone_cutting_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLACK_WOOL</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE_WOOL</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>同样，这里可以使用 <code>RecipeChoice.MaterialChoice</code> 进行「多合一」。（嘴皮子都快磨烂了，记住记住记住~）</p><h2 id="锻造台配方" tabindex="-1">锻造台配方 <a class="header-anchor" href="#锻造台配方" aria-label="Permalink to &quot;锻造台配方&quot;">​</a></h2><p>最后一个！</p><p>锻造台被认为是只能用于升级钻石装备到下界合金装备的物品……谁说的！</p><p><code>SmithingRecipe</code> 用于创建这个配方，这里强制使用了 <code>RecipeChoice</code>，如果要使用单个材料，也得创建新的 <code>RecipeChoice.MaterialChoice</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">SmithingRecipe</span><span style="color:var(--shiki-color-text);"> smr </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">SmithingRecipe(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> NamespacedKey(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-token-function);">插件主类名</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">instance</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;a_smithing_recipe&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">IRON_HELMET</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> RecipeChoice</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">MaterialChoice(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">LEATHER_HELMET</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> RecipeChoice</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">MaterialChoice(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">IRON_INGOT</span><span style="color:var(--shiki-token-function);">)</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>前两个参数还是一样，第三个参数是「被升级的物品」，最后那个参数是「升级耗材」，上面的例子中我们允许使用铁锭将皮革头盔升级到铁头盔。</p><p>最后两个 <code>RecipeChoice.MaterialChoice</code> 的构造方法中都可以放入多个物品，<strong>任何一组匹配</strong>就可生成最终的产物。</p><h2 id="当心冲突" tabindex="-1">当心冲突 <a class="header-anchor" href="#当心冲突" aria-label="Permalink to &quot;当心冲突&quot;">​</a></h2><p>Bukkit 对于冲突的合成表（原料相同之类的），其行为是<strong>未定义的</strong>！未定义的行为将由各个服务端自己决定，有的服务端采取「后来居上」，有的服务端采取「先到先得」，因此<strong>永远不要尝试覆盖合成表</strong>！</p><p>此外，在创建 <code>NamespacedKey</code> 时，不要创建同名的合成表——也许会出错，谁知道呢？对于这种<strong>未定义</strong>的行为，<strong>不要冒险</strong>。</p>`,112),i=[e];function p(l,c,r,k,h,y){return n(),a("div",null,i)}const d=s(t,[["render",p]]);export{u as __pageData,d as default};
