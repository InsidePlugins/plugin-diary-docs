import{_ as t,o as k,c as a,S as i}from"./chunks/framework.7f03344f.js";const h=JSON.parse('{"title":"1-2 Bukkit 的二次呼吸","description":"","frontmatter":{},"headers":[],"relativePath":"Volume1/1-2.md","filePath":"docs/Volume1/1-2.md","lastUpdated":1698403164000}'),o={name:"Volume1/1-2.md"},e=i('<h1 id="_1-2-bukkit-的二次呼吸" tabindex="-1">1-2 Bukkit 的二次呼吸 <a class="header-anchor" href="#_1-2-bukkit-的二次呼吸" aria-label="Permalink to &quot;1-2 Bukkit 的二次呼吸&quot;">​</a></h1><h2 id="bukkit的诞生" tabindex="-1">Bukkit的诞生 <a class="header-anchor" href="#bukkit的诞生" aria-label="Permalink to &quot;Bukkit的诞生&quot;">​</a></h2><p>最开始只有 Minecraft 原版服务端，各个世界千篇一律，玩家玩着玩着都开始无聊打哈欠了……</p><p>于是，Bukkit 出现了，试图改变这一现状。</p><p>这里借用一个我之前看到的很恰当的比喻：</p><blockquote><p>Mojang 制造的 Minecraft 原版服务端，可以把它想象成一个盒子，你在外面是不知道它怎么工作的。</p><p>后来一个叫 Bukkit 的人看不下去了，在盒子上面戳了一个洞，允许开发者把一些东西塞进去，<strong>塞进去的东西就是后来插件的雏形</strong>。</p></blockquote><p>Bukkit 项目一经开始就受到热烈欢迎，许多开发者纷纷投入开发之中。终于能够改写自己最喜欢的游戏了，谁不想试试呢？</p><p>Bukkit 服务端是最早的插件服务端，它通过反混淆 Minecraft 服务端源代码进行了修改，并直接发布修改后的服务端使得服主可以方便地使用。Bukkit API 规范自那时也被确定。</p><p>不过 Bukkit 犯了一个致命的错误，这个错误导致 Bukkit 项目被迫终止，我们马上就会看到。</p><h2 id="不幸的-bukkit" tabindex="-1">不幸的 Bukkit <a class="header-anchor" href="#不幸的-bukkit" aria-label="Permalink to &quot;不幸的 Bukkit&quot;">​</a></h2><blockquote><p>后来 Mojang 发现不对啊，Bukkit 这家伙怎么拿着我的东西在那展览呢？</p><p>Mojang 越想越不对劲，于是拿着 EULA（最终用户许可条款）和 DMCA（数字千年版权法案）把 Bukkit 告上了法庭。</p></blockquote><p>Bukkit 使用了 Mojang 的源代码，这是 Mojang 不喜欢的，和故事中一样，Bukkit 败诉，项目被迫停止。</p><h2 id="bukkit-的继任者" tabindex="-1">Bukkit 的继任者 <a class="header-anchor" href="#bukkit-的继任者" aria-label="Permalink to &quot;Bukkit 的继任者&quot;">​</a></h2><p>Bukkit 停止后，开发者们当然不乐意啦。开什么玩笑？之前辛辛苦苦写的插件不能用了？</p><p>然而生气归生气，DMCA 是没办法挑战的，于是开发者们只好无比失望地洗洗睡了……</p><p>后来有一天，Bukkit 的一些开发人员想到了办法。</p><blockquote><p>既然我不能把盒子打洞之后给你，那我就把打洞的方法教给你嘛！</p></blockquote><p>开发人员们想到了新的办法：提供一个不包含 Minecraft 源代码的<strong>部署工具</strong>，里面记载了修改服务端的方法。</p><p>要使用时，这个工具会在服主的计算机上下载一份 Minecraft 客户端，完成反编译、注入、重新编译、打包等工作。<strong>就像一个安装程序一样</strong>。你可能见到过的 <code>BuildTools.jar</code> 就是它。</p><p>由于以 Bukkit 为名继续项目可能不方便，开发人员们创立了新的服务端：Spigot。</p><blockquote><p>Spigot 看着 Bukkit 的图纸，又在盒子上打了个洞，和原来的 Bukkit API 一起，放入 <code>BuildTools.jar</code> 中。这个加上去的 API，就是 Spigot API。</p><p>Paper 觉得 Spigot 的运转速度太慢了，于是拿着 Spigot 的盒子又打了几个洞，还把盒子加强了一番。这就是 Paper 服务端。</p></blockquote><h2 id="bukkit-api" tabindex="-1">Bukkit API <a class="header-anchor" href="#bukkit-api" aria-label="Permalink to &quot;Bukkit API&quot;">​</a></h2><p>接下来请各位读者把时间切换回到 Bukkit 被起诉前那个平静的午后，并将时间定格在这里。</p><p>Bukkit 将盒子内部进行了一番整理，并且弄出来了一根管子，我们只要按着管子的形状往里面塞东西就行了。</p><p>在现实世界中，这就是 Bukkit 提供的 API。Bukkit 规定了一套修改 Minecraft 服务端的统一标准。正是有了这个标准，功能繁多的插件才能有序而高效地运行。</p>',25),u=[e];function p(r,n,c,l,s,d){return k(),a("div",null,u)}const _=t(o,[["render",p]]);export{h as __pageData,_ as default};
