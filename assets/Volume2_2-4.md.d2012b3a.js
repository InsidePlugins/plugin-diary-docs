import{_ as s,o,c as a,S as n}from"./chunks/framework.7f03344f.js";const d=JSON.parse('{"title":"2-4 命令处理器","description":"","frontmatter":{},"headers":[],"relativePath":"Volume2/2-4.md","filePath":"docs/Volume2/2-4.md","lastUpdated":1698403164000}'),e={name:"Volume2/2-4.md"},t=n(`<h1 id="_2-4-命令处理器" tabindex="-1">2-4 命令处理器 <a class="header-anchor" href="#_2-4-命令处理器" aria-label="Permalink to &quot;2-4 命令处理器&quot;">​</a></h1><p>很多插件都提供了使用自定义命令的方法。既然它们能做到，我们当然也能做到。</p><p>命令处理分两部分构成：命令注册和命令处理。</p><h2 id="命令注册" tabindex="-1">命令注册 <a class="header-anchor" href="#命令注册" aria-label="Permalink to &quot;命令注册&quot;">​</a></h2><p>命令注册这一步不使用 Java，而要在 <code>plugin.yml</code> 中完成。</p><p><code>plugin.yml</code> 中注册命令的要求如下：</p><ul><li>写在 <code>commands</code> 键中，一个命令占用一个键</li><li>这个键指向的是另一个「字典」（对象）</li><li><s>必须包含 <code>usage</code> 和 <code>description</code>，<code>aliases</code> 和 <code>permissions</code> 与 <code>permission-message</code> 是可选的， 由于原版的权限很少，<code>permission</code> 一般不用。</s></li><li><code>usage</code>、<code>description</code>、<code>aliases</code>、<code>permissions</code> 与 <code>permission-message</code> 全都是可选的。也就是说，命令指向的那个对象可以是空的。</li></ul><p>一个合法的命令如下：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">HelloWorld</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">main</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">rarityeg.helloworld.HelloWorld</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">version</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1.0</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">api-version</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1.16</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"># YAML 中的注释，一行有效</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"># 以上是插件基本信息，以下是命令注册</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">commands</span><span style="color:var(--shiki-token-keyword);">:</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">superkill</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 命令的基本名，请不要使用奇怪的字符！</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">aliases</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 别名，方便玩家使用</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      - </span><span style="color:var(--shiki-token-string-expression);">&quot;skill&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      - </span><span style="color:var(--shiki-token-string-expression);">&quot;sk&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">usage</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;/superkill &lt;player-name&gt;&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 用法</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">description</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;Kill some player.&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 描述</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">permission</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;minecraft.command.kill&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 需要的权限，通常不用</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">permission-message</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;Only killer can do that!&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 无权限返回的消息，通常不用</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>谨按，注册命令时，只有基本名是必须的。其它所有项都可以留空，比如：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">commands</span><span style="color:var(--shiki-token-keyword);">:</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">superkill</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 命令的基本名。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-comment);"># 没有任何内容。usage, description 等项目全部都是可选的。</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">anothercommand</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 第二个指令。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">yetanothercommand</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 第三个指令。</span></span></code></pre></div><p>ThatRarityEG 原文中误以 <code>usage</code> 和 <code>description</code> 两项为必填，实则为选填。今改正。加删除线的是原文。</p></div><p>这里要说明的一点是，<code>plugin.yml</code> 中只允许英文，所以现在大家请忍耐一下，稍后我们可以自定义命令无效时返回的消息。</p><p>这样命令就注册好啦，没错，这一步不需要编写代码，Bukkit 会为我们完成这项工作。</p><h2 id="命令处理" tabindex="-1">命令处理 <a class="header-anchor" href="#命令处理" aria-label="Permalink to &quot;命令处理&quot;">​</a></h2><h3 id="命令处理函数" tabindex="-1">命令处理函数 <a class="header-anchor" href="#命令处理函数" aria-label="Permalink to &quot;命令处理函数&quot;">​</a></h3><p>命令注册好后，我们就需要在命令被输入时进行处理。</p><p>一个命令被玩家使用时通常是这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">/命令名称 参数 参数 参数 BlahBlah</span></span></code></pre></div><p>参数之间是以空格分开的。</p><p>命令处理和事件处理比较类似，不同的是我们需要一个<strong>命令处理器</strong>。</p><p>要让 Bukkit 认识到这是一个命令处理器，我们需要实现它提供的接口（签订协议），这个接口就是 <code>org.bukkit.command.CommandExecutor</code>。</p><p>这个接口中有一个必须实现的方法，它叫 <code>onCommand</code>，它的签名如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onCommand(</span><span style="color:var(--shiki-token-keyword);">CommandSender</span><span style="color:var(--shiki-token-function);"> sender</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Command</span><span style="color:var(--shiki-token-function);"> command</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> label</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> args)</span></span></code></pre></div><p>接受四个值，返回一个布尔（逻辑）值：</p><ul><li><code>CommandSender sender</code>：命令的发送者</li><li><code>Command command</code>：命令对象</li><li><code>String label</code>：玩家实际使用的名称（别名），即使用别名时，上面的命令对象是一样的，而这里的 <code>label</code> 是不一样的</li><li><code>String[] args</code>：参数，以数组形式传递</li></ul><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>什么是数组</strong>？</p><p><strong>数组</strong>（Array）是 Java 用来组织多个同类对象时的方法之一。在类名后面加上 <code>[]</code> 即表示一个「装着」该类的数组。</p><p>你可以把数组想象成一些对象整齐地排在内存的某处，我们可以把它们作为一个整体传递，也可以取其中的一个。</p></div><h3 id="如何编写命令处理函数" tabindex="-1">如何编写命令处理函数 <a class="header-anchor" href="#如何编写命令处理函数" aria-label="Permalink to &quot;如何编写命令处理函数&quot;">​</a></h3><p>那我们要怎么编写这个函数呢？下面我还是以「输入 <code>/superkill &lt;玩家名&gt;</code> 时杀死玩家」为例，演示命令处理函数的写法。</p><p>首先创建一个新的类代表命令处理器，再按照接口 <code>CommandExecutor</code> 的规范，写好签名：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">command</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Command</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">command</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">CommandExecutor</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">command</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">CommandSender</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Commander</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">implements</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">CommandExecutor</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onCommand</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">CommandSender</span><span style="color:var(--shiki-color-text);"> sender</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Command</span><span style="color:var(--shiki-color-text);"> command</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> label</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">[] args) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这里 <code>sender</code>、<code>command</code>、<code>label</code> 和 <code>args</code> 都是<strong>函数内部名称</strong>，也就是说，只是由我们来起一个名字方便表示，所以换成其它别的名字也没有问题（只需要同时修改函数内的相应部分）。</p><p><code>@ParametersAreNonnullByDefault</code> 是一个注解，看名字就知道，它表示<strong>各个参数都不是</strong> <code>null</code>，那我们就可以放心地使用这四个参数了。</p><p>顺便说一句，这个注解是 Java 提供的。那还有哪些东西（接口、类、注解）是 Java 提供的呢？</p><ul><li><code>java</code> 包下的所有内容，例如 <code>java.util</code>，<code>java.io</code> 等</li><li><code>javax</code> 包下的所有内容，例如 <code>javax.swing</code>，<code>javax.awt</code> 等</li><li><code>sun</code> 包下的所有内容，例如 <code>sun.reflect</code> 等</li></ul><p>差不多就是这些。使用它们时我们无须像导入 <code>spigot-1.16.5.jar</code> 那样操作。</p><p>回到正题上来。</p><p>命令被触发时，我们的命令处理函数将被调用。而我们要实现的功能很简单：获取第一个参数，并杀死对应的玩家。</p><p>首先我们应该检查参数是否正确，由于我们只需要第一个参数，因此 <code>args</code> 的长度大于等于 1，也就是不等于 0 就可以了。</p><p>至于查找玩家，Bukkit 提供了一个方法，该方法是 <code>org.bukkit.Bukkit</code> 的一个静态（<code>static</code>）方法（类方法），签名如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Nullable</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getPlayer(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> name)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>那么我们就可以实现这个功能了：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Bukkit</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">command</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Command</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">command</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">CommandExecutor</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">command</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">CommandSender</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">entity</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Commander</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">implements</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">CommandExecutor</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onCommand</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">CommandSender</span><span style="color:var(--shiki-color-text);"> commandSender</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Command</span><span style="color:var(--shiki-color-text);"> command</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> label</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">[] args) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-comment);">// 参数数量太少，拒绝处理</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);"> player </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(args[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// args[0] 是参数的第一项，args[1] 是参数的第二项，以此类推</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (player </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-comment);">// 如果这个玩家不存在，getPlayer 将返回 null，如果调用 null 的方法，将引发 NullPointerException 异常</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">player</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setHealth</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// setHealth 设置玩家血量，0 为死亡</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>根据上面的注释，你应该可以独自看懂。</p><p>现在只剩一个问题了：为什么要返回 <code>true</code> 和 <code>false</code>？</p><p>这是<strong>命令处理标志位</strong>，返回 <code>true</code> 代表「命令语法正确」，<code>false</code> 代表「命令语法错误」。</p><p>如果返回 <code>false</code>，Bukkit 会向该命令的使用者发送 <code>usage</code> 中的内容提醒使用者使用正确的语法，仅此而已。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>为什么多余参数不能删掉</strong>？</p><p>这里我们没有用到 <code>sender</code> 和 <code>label</code>，那为什么不能把它们删掉呢？</p><p>别忘了，Java 是用<strong>方法签名</strong>识别一个方法的，如果我们改变了参数列表，也就是改变了方法签名，Bukkit 要求 Java 调用这个方法时，Java 就会找不到并且报错的！所以，即使麻烦一点，也要写上。</p></div><p>这样命令处理器就编写好了。</p><h3 id="注册命令处理器" tabindex="-1">注册命令处理器 <a class="header-anchor" href="#注册命令处理器" aria-label="Permalink to &quot;注册命令处理器&quot;">​</a></h3><p>和事件处理器一样，我们需要注册命令处理器。在插件主类 <code>onEnable</code> 中写上：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPluginCommand</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;superkill&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPluginCommand</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;superkill&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setExecutor</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Commander()</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>应该很简单。至于为什么要多一个 <code>null</code> 判定，是因为 Bukkit 并不能保证一定能获得 <code>superkill</code> 这个命令，万一它不存在呢？</p><p>你可能会说，我都写到 <code>plugin.yml</code> 里了，怂啥？</p><p>可是，Java 不是专门为插件开发设计的，它不知道什么是 <code>plugin.yml</code>，不保证能够满足 Bukkit 的要求。所以虽然麻烦，但还是要这样写。</p><p>好啦，这样，在游戏里面就可以使用 <code>superkill</code> 这个命令啦！</p><hr><p>这里我们只是大致地讲了一下命令处理器的基本知识，实际上已经足够常规使用。在后面的章节中，我们会使用更高级的 <code>TabExecutor</code> 完成命令提示补全功能。</p>`,56),l=[t];function r(i,p,c,k,y,v){return o(),a("div",null,l)}const u=s(e,[["render",r]]);export{d as __pageData,u as default};
