import{_ as s,o as a,c as o,S as n}from"./chunks/framework.7f03344f.js";const h=JSON.parse('{"title":"3-3 深入研究玩家","description":"","frontmatter":{},"headers":[],"relativePath":"Volume3/3-3.md","filePath":"docs/Volume3/3-3.md","lastUpdated":1698403164000}'),e={name:"Volume3/3-3.md"},t=n(`<h1 id="_3-3-深入研究玩家" tabindex="-1">3-3 深入研究玩家 <a class="header-anchor" href="#_3-3-深入研究玩家" aria-label="Permalink to &quot;3-3 深入研究玩家&quot;">​</a></h1><p>玩家是 Minecraft 的主体，没有玩家还谈什么游戏！</p><p>这一节我们专门研究玩家，这个类是 <code>Player</code> 接口。</p><h2 id="与玩家有关的事件" tabindex="-1">与玩家有关的事件 <a class="header-anchor" href="#与玩家有关的事件" aria-label="Permalink to &quot;与玩家有关的事件&quot;">​</a></h2><p>之前我们说过，<code>PlayerXXXEvent</code> 是属于玩家的事件，可以通过 <code>getPlayer</code> 获取涉及到的玩家。</p><h2 id="uuid" tabindex="-1">UUID <a class="header-anchor" href="#uuid" aria-label="Permalink to &quot;UUID&quot;">​</a></h2><p>打开 <code>Player</code> 类的 JavaDocs（或者反编译查看源代码），你能看到许多方法。</p><p>UUID 是区别不同玩家所使用的标识符，正版账号的 UUID 由 Mojang 提供，盗版账号的 UUID 则由 <code>OfflinePlayer:</code> + 玩家的名字并进行哈希计算得出，当然这项工作已经由 Bukkit 为我们完成了。</p><p><code>getUniqueId</code> 获得一个实体的 UUID，因为不仅玩家有 UUID，Minecraft 中的羊、末影龙、火焰弹也是有 UUID 的。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> id </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;ThatRarityEG&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getUniqueId</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 无论在哪个服务端上，上面这个 id 都是相同的</span></span></code></pre></div><p>正版玩家的 UUID 是<strong>跟随账号</strong>的，不会因改名而改变。不过，如果名字相同，盗版玩家的 UUID 也不会改变。因此，我们建议使用 UUID 查找玩家。</p><p>Bukkit 提供了通过 UUID 查找玩家的方法重载，签名如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Nullable</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getPlayer(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-token-function);"> id)</span></span></code></pre></div><p>另外还可以通过这个方法计算玩家的盗版 UUID：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Nullable</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getPlayerUniqueId(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> playerName)</span></span></code></pre></div><p>这个方法<strong>不需要玩家在线也能运转</strong>，它这样工作：</p><ul><li>如果服务器在离线模式下，则计算出这个名字对应的盗版 UUID</li><li>如果服务器在正版模式下，并且玩家没有注册正版账号，则返回 <code>null</code>。</li><li>如果服务器在正版模式下，并且玩家注册了正版账号……？？？</li></ul><p>最后一种情况的行为是不确定的，得到的结果不可靠，因此，对于正版玩家，应当等玩家在线时再使用 <code>getUniqueId</code> 来获取 UUID。</p><h2 id="踢出玩家" tabindex="-1">踢出玩家 <a class="header-anchor" href="#踢出玩家" aria-label="Permalink to &quot;踢出玩家&quot;">​</a></h2><p><code>kickPlayer</code> 方法用于将玩家踢出服务器。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;RarityEG&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">kickPlayer</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;信号不好&quot;</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>就可以踢出名为 RarityEG 的玩家，踢出玩家时需要提供原因，所以这里可以填入诸如 <code>java.lang.NullPointerException</code> 或者「随机轰炸」之类的内容来迷惑玩家。（说真的——不要这样做！）</p><h2 id="给予物品" tabindex="-1">给予物品 <a class="header-anchor" href="#给予物品" aria-label="Permalink to &quot;给予物品&quot;">​</a></h2><p>要给玩家物品，一般使用 <code>getInventory</code> 获得物品栏再进行 <code>addItem</code>。这里一样是提供 <code>ItemStack</code>，它们的签名：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">NotNull</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">PlayerInventory</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getInventory()</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">NotNull</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">HashMap&lt;</span><span style="color:var(--shiki-color-text);">Integer</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> ItemStack</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">addItem(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-token-punctuation);">...</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">items</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);"> throws </span><span style="color:var(--shiki-token-keyword);">IllegalArgumentException</span></span></code></pre></div><p><s><code>addItem</code> 返回的 <code>HashMap</code> 中包含了新物品栏中槽位与物品的对应关系，不过大多数情况下我们不使用这个结果。</s></p><p><s><code>ItemStack...</code> 表示「可以传入任意个 <code>ItemStack</code> 类型的参数」，一个可以，两个也可以，几十上百个呢？那可能就像它说的一样，会触发 <code>IllegalArgumentException</code> 异常。</s></p><p><s>这里的 <code>ItemStack</code> 和上一节中的一样，可以进行各种设置后再交给玩家。</s></p><p><code>ItemStack...</code> 表示「可以传入任意个 <code>ItemStack</code> 类型的参数」，一个可以，两个也可以，几十上百个也可以。它名叫「可变参数」，即 Varargs。用法例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addItem</span><span style="color:var(--shiki-color-text);">(stack1);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addItem</span><span style="color:var(--shiki-color-text);">(stack2);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addItem</span><span style="color:var(--shiki-color-text);">(stack3);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addItem</span><span style="color:var(--shiki-color-text);">(stack1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> stack2</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> stack3);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 使用 Varargs 传入三个参数。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 这一行的效果，等同于上面三条语句。</span></span></code></pre></div><p><code>addItem</code> 返回的 <code>HashMap</code> 包含了放不下的物品堆。在映射关系中，值是物品堆，键是该物品堆在 Varargs 中的序数。对于 <code>addItem</code> 方法而言，<code>items</code> 可以看成是一个 <code>ItemStack[]</code> 数组。每个参数在这数组中都占一个位置。一旦物品栏放不下某个物品堆，就将它在数组中的序号记录下来，置于 <code>HashMap</code> 里。假如物品栏里有足够的空间容纳传入的物品堆，那么返回的 <code>HashMap</code> 就是空的。</p><p><code>addItem</code> 方法不可以接受 <code>null</code> 作为参数。每一个参数都必须非空。<code>inventory.addItem(stack1, stack2, null);</code> 会引发 <code>IllegalArgumentException</code> 异常。</p><p>作为参数的每个 <code>ItemStack</code> 都和上一节中的一样，可以进行各种设置后再交给玩家。</p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>原文中，对 <code>addItem</code> 方法的介绍有误。该方法的返回值并非新物品栏中槽位与物品的对应关系，而是无法添加入物品栏中的物品堆。<code>IllegalArgumentException</code> 仅在传入空值时抛出。如果传入上百个物品堆，那么多出的部分会被放在 <code>HashMap</code> 里返回，不会有异常被抛出。此处依照 Bukkit 文档改正。上方加删除线的是原文。</p></div><h2 id="给予经验" tabindex="-1">给予经验 <a class="header-anchor" href="#给予经验" aria-label="Permalink to &quot;给予经验&quot;">​</a></h2><p>要给玩家经验，直接使用 <code>Player</code> 接口的 <code>giveExp</code> 即可：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">default</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">giveExp(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> amount)</span></span></code></pre></div><p>它还有一个变种：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">giveExp(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> amount</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-token-function);"> applyMending)</span></span></code></pre></div><p>如果将 <code>applyMending</code> 设为 <code>false</code>，那么这次添加的经验将不会用于「经验修补」附魔的修复，而直接加入了玩家经验条。</p><p>如果要单独进行修复呢？</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">applyMending(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> amount)</span></span></code></pre></div><p>返回值是剩余的经验值。至于这些到底有没有加入到玩家的经验条中，要看各个版本的实现。</p><p>另外，如果要直接给玩家等级（在附魔时比较常用）：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">giveExpLevels(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> amount)</span></span></code></pre></div><p>你可能会想知道玩家现在的经验等级：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getLevel()</span></span></code></pre></div><p>还有一个不怎么常用的 <code>getExp</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">float</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getExp()</span></span></code></pre></div><p>这个方法返回「到下一个等级的进度」，也就是说，如果你刚升到 26 级，那么这个值就接近 0，如果你马上就要 27 级了，那么这个值就接近 1。</p><p>如果要计算玩家的具体经验值，就需要先用 <code>getLevel</code> 获得等级，再通过 <code>getExp</code> 的结果获得经验进度，然后用 <a href="https://wiki.biligame.com/mc/%E7%BB%8F%E9%AA%8C#%E7%BB%8F%E9%AA%8C%E7%AD%89%E7%BA%A7" target="_blank" rel="noreferrer">这张表</a> 进行计算。这个相对而言比较困难，而且通常没有很大的意义（万一哪天 Mojang 改了经验值计算方式你就要重新来）。大多数情况下，有等级就足够了。</p><h2 id="展示内容" tabindex="-1">展示内容 <a class="header-anchor" href="#展示内容" aria-label="Permalink to &quot;展示内容&quot;">​</a></h2><p>展示给玩家的内容有几种：物品栏 GUI、书本视图、计分板、BOSS 血条等。</p><p>物品栏 GUI 我们已经说过，这里我们介绍书本视图。</p><p>要给玩家展示一本书，可以使用 <code>openBook</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">openBook(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-token-function);"> book)</span></span></code></pre></div><p>这里只能使用 <code>Material.WRITTEN_BOOK</code>，<strong>不能使用</strong> <code>Material.WRITING_BOOK</code>！</p><p>在调用 <code>openBook</code> 前：</p><ul><li>先创建一个 <code>ItemStack</code>，转换为 <code>BookMeta</code></li><li>确认 <code>ItemStack</code> 已经设置过了<strong>标题</strong>、<strong>作者</strong>、<strong>内容</strong>，三项缺一不可</li><li>玩家处在一个可以接受信息的状态，玩家如果正在激烈地战斗，把书显示出来显然不合适</li></ul><h2 id="操作玩家数据" tabindex="-1">操作玩家数据 <a class="header-anchor" href="#操作玩家数据" aria-label="Permalink to &quot;操作玩家数据&quot;">​</a></h2><p>玩家的生命值、饱食度、生命上限等都可设置：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);"> hacker </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;Hacker&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">hacker</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setHealth</span><span style="color:var(--shiki-color-text);">((</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 生命值</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">hacker</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setFoodLevel</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 饱食度</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">hacker</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setMaxHealth</span><span style="color:var(--shiki-color-text);">((</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 生命上限</span></span></code></pre></div><p>等等。</p><p>需要注意的是有些方法（例如 <code>setHealth</code>）并没有写在 <code>Player</code> 接口中，而是写在了更通用的 <code>Damageable</code> 接口中，尝试使用 JavaDocs 中的搜索来找出它们吧！</p><h2 id="移动玩家" tabindex="-1">移动玩家 <a class="header-anchor" href="#移动玩家" aria-label="Permalink to &quot;移动玩家&quot;">​</a></h2><p>要移动玩家，可以使用 <code>teleport</code> 方法，演示如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">player</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">teleport</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Location(</span><span style="color:var(--shiki-token-constant);">player</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getWorld()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">64</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">10000</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// x，y，z</span></span></code></pre></div><p><code>Location</code> 是玩家的新位置，它包含四个信息：</p><ul><li>X</li><li>Y（高度）</li><li>Z</li><li>玩家所属的世界</li></ul><p>一般我们都是在当前世界中移动，因此可以通过 <code>player.getWorld</code> 方法获取玩家当前所属的世界。</p><h2 id="设置资源包" tabindex="-1">设置资源包 <a class="header-anchor" href="#设置资源包" aria-label="Permalink to &quot;设置资源包&quot;">​</a></h2><p><code>setResourcePack</code> 用于<strong>建议</strong>玩家使用一个资源包，这里只是<strong>建议</strong>，玩家是否接受需要在客户端决定。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setResourcePack(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> url</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> hash)</span></span></code></pre></div><p>这里的 <code>hash</code> 是资源包的 SHA-1 校验码，通常应该由资源包的制作者向你提供。（当然也可以自己算）</p><p>如果想知道玩家到底有没有接受资源包，可以调用这个方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Nullable</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">PlayerResourcePackStatusEvent</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Status</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getResourcePackStatus()</span></span></code></pre></div><p>返回值是 <code>PlayerResourcePackStatusEvent.Status</code> 枚举中的一个：</p><ul><li><code>ACCEPTED</code>，下载已经开始</li><li><code>DECLINED</code>，玩家拒绝</li><li><code>FAILED_DOWNLOAD</code>，下载失败</li><li><code>SUCCESSFULLY_LOADED</code>，已经加载</li></ul><p>所以如果万不得已，需要强制设置玩家资源包时，可以监听 <code>PlayerResourcePackStatusEvent</code>，并等到 <code>getResourcePackStatus</code> 返回的结果是 <code>PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED</code> 时再允许玩家做别的事。</p><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>请尊重玩家</strong>！</p><p>也许这样可以让玩家没法卸载资源包，但玩家有权退出服务器！亦请了解很多玩家的机器性能<strong>并不好</strong>，可能在加载资源包的过程中崩溃！此外，如果你的 CDN 分发速度不快……玩家没有那么好的耐心！<strong>请尊重玩家的选择</strong>！</p></div><h2 id="设置移动速度" tabindex="-1">设置移动速度 <a class="header-anchor" href="#设置移动速度" aria-label="Permalink to &quot;设置移动速度&quot;">​</a></h2><p>这里的移动速度指的是走路速度，不影响玩家的跳跃。也就是说，即使你把速度设置为 0，玩家仍然能够通过跳跃来进行行进。</p><p>与此相对的还有一个设置飞行速度，可用于鞘翅的飞行或者创造模式。</p><p>两个方法的签名分别是：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setWalkSpeed(</span><span style="color:var(--shiki-token-keyword);">float</span><span style="color:var(--shiki-token-function);"> value)</span><span style="color:var(--shiki-color-text);"> throws </span><span style="color:var(--shiki-token-keyword);">IllegalArgumentException</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setFlySpeed(</span><span style="color:var(--shiki-token-keyword);">float</span><span style="color:var(--shiki-token-function);"> value)</span><span style="color:var(--shiki-color-text);"> throws </span><span style="color:var(--shiki-token-keyword);">IllegalArgumentException</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 只能从 -1 到 1，否则会抛出异常</span></span></code></pre></div><p>同样它们还有对应的 <code>getWalkSpeed</code> 与 <code>getFlySpeed</code> 用于检测玩家的当前速度。</p><p>另外这里还有几个方法可以检测玩家的移动状态：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isSneaking()</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 是否在潜行</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isSprinting()</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 是否在冲刺</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isFlying()</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 是否在飞行</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 附赠三个 set 方法</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setSneaking(</span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-token-function);"> sneak)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setSprinting(</span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-token-function);"> sprinting)</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setFlying(</span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-token-function);"> flying)</span></span></code></pre></div><p>另外还有一个不怎么常用的方法，可以允许玩家在生存模式飞行：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setAllowFlight(</span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-token-function);"> flight)</span></span></code></pre></div><p>理论上这个可以突破配置文件中 <code>allow-flight</code> 的限制，但笔者没有经过确认。即使可以，很可能也会被某些反作弊插件拦下来，那对玩家就太冤枉了，所以不建议使用。</p><h2 id="重设重生点" tabindex="-1">重设重生点 <a class="header-anchor" href="#重设重生点" aria-label="Permalink to &quot;重设重生点&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setBedSpawnLocation(@</span><span style="color:var(--shiki-token-keyword);">Nullable</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Location</span><span style="color:var(--shiki-token-function);"> location)</span></span></code></pre></div><p>这就是重设重生点的方法。要注意的是，在 1.15 及以前的版本中，<strong>请不要将玩家的重生点设在下界或末地，否则可能会出现意料之外的后果</strong>！</p><p>这个方法需要目标位置是一张床，如果不是，可以使用下面这个变种：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setBedSpawnLocation(@</span><span style="color:var(--shiki-token-keyword);">Nullable</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Location</span><span style="color:var(--shiki-token-function);"> location</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-token-function);"> force)</span></span></code></pre></div><p>第二个参数传入 <code>true</code> 即可强制重设，也不需要有床。</p><h2 id="发送信息" tabindex="-1">发送信息 <a class="header-anchor" href="#发送信息" aria-label="Permalink to &quot;发送信息&quot;">​</a></h2><p>这个我们已经做过了，里面可以使用 <code>ChatColor</code> 设置颜色样式。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sendMessage(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> message)</span></span></code></pre></div><p>以及它的批量发送版本：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sendMessage(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);">[] messages)</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 又见到数组了</span></span></code></pre></div><p>还可以「假装」是某个实体发给该玩家的：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sendMessage(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-token-function);"> sender</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> message)</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 批量版本</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sendMessage(</span><span style="color:var(--shiki-token-keyword);">UUID</span><span style="color:var(--shiki-token-function);"> sender</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);">[] messages)</span></span></code></pre></div><p>由于所有的实体（<code>Entity</code>）都有 <code>getUniqueId</code>，因此可用这个方法实现「我和末影龙聊天」这样的效果。</p><p>如果我想向玩家发送 <code>§</code> 这样的字符呢？</p><p>可以使用：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">sendRawMessage(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> message)</span></span></code></pre></div><p>这会将 <code>message</code> 原封不动地发给玩家，不进行解析或者渲染。</p><h2 id="控制玩家说话" tabindex="-1">控制玩家说话 <a class="header-anchor" href="#控制玩家说话" aria-label="Permalink to &quot;控制玩家说话&quot;">​</a></h2><p>可以使用 <code>Player</code> 接口的这个方法让玩家说话：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">chat(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> msg)</span></span></code></pre></div><p>这当然也可以用来执行命令，但如果要执行命令，还有一个专门的：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">performCommand(@</span><span style="color:var(--shiki-token-keyword);">NotNull</span><span style="color:var(--shiki-token-function);"> command)</span></span></code></pre></div><p>通过这个方法执行命令不需要输入 <code>/</code>，笔者也不知道 Bukkit 为什么要设置两个方法，一般用 <code>chat</code> 就好的。</p><hr><p>上面我们只是非常简略地介绍了有关 <code>Player</code> 接口的一些实用方法，限于篇幅无法全部介绍，你可以参考 <a href="https://papermc.io/javadocs/paper/1.16/org/bukkit/entity/Player.html" target="_blank" rel="noreferrer">有关 <code>Player</code> 接口的 JavaDocs</a>。</p>`,117),l=[t];function i(p,r,c,k,d,v){return a(),o("div",null,l)}const u=s(e,[["render",i]]);export{h as __pageData,u as default};
