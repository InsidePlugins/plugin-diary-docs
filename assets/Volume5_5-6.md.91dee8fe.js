import{_ as s,o as n,c as o,S as a}from"./chunks/framework.7f03344f.js";const u=JSON.parse('{"title":"5-6 原始 JSON 文本","description":"","frontmatter":{},"headers":[],"relativePath":"Volume5/5-6.md","filePath":"docs/Volume5/5-6.md","lastUpdated":1698403164000}'),t={name:"Volume5/5-6.md"},e=a(`<h1 id="_5-6-原始-json-文本" tabindex="-1">5-6 原始 JSON 文本 <a class="header-anchor" href="#_5-6-原始-json-文本" aria-label="Permalink to &quot;5-6 原始 JSON 文本&quot;">​</a></h1><p>在 Minecraft 原版中，我们可以为文字定义一些特殊效果，例如鼠标移上去时显示介绍，单击复制到剪贴板……这不是什么魔法，事实上，实现这样的功能很简单。</p><p>这项功能叫<strong>原始 JSON 文本</strong>，如果不知道它，可以先阅读 <a href="https://wiki.biligame.com/mc/%E5%8E%9F%E5%A7%8BJSON%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F" target="_blank" rel="noreferrer">Wiki 上的有关内容</a>。</p><p>在 Bukkit 中，我们无法直接发送一个 JSON 对象到客户端，但这不算什么，有人已经为我们提供了等效的 API。</p><h2 id="bungeecord-提供的-api" tabindex="-1">BungeeCord 提供的 API <a class="header-anchor" href="#bungeecord-提供的-api" aria-label="Permalink to &quot;BungeeCord 提供的 API&quot;">​</a></h2><p>这一套 API 不是 Bukkit API 的一部分，它是由 BungeeCord 提供的。哦，别紧张，我们不需要额外的库。由于这个 API 很常用，它已经被 Spigot 和 Paper 等服务端集成了。</p><p>BungeeCord 的聊天 API 位于 <code>net.md_5.bungee.chat</code> 这个包下，看到 <code>md_5</code> 时你是不是「咯噔」了一下？没错，笔者一开始也想到了 4-1 时候的噩梦，不过后来发现，这是误会。<code>md_5</code> 是 Spigot 服务端的一位作者——BungeeCord 是 TA 开发的。</p><p>要说明的是，BungeeCord 的 JavaDocs 并不是 Paper 的一部分，它有自己的 JavaDocs：</p><p><a href="https://javadoc.io/static/net.md-5/bungeecord-chat/1.16-R0.4/net/md_5/bungee/api/chat/package-summary.html" target="_blank" rel="noreferrer">https://javadoc.io/static/net.md-5/bungeecord-chat/1.16-R0.4/net/md_5/bungee/api/chat/package-summary.html</a></p><p>另外，这里我们只是要实现<strong>聊天栏按钮</strong>这一功能，因此仅介绍此 API 的一部分。</p><h2 id="演示" tabindex="-1">演示 <a class="header-anchor" href="#演示" aria-label="Permalink to &quot;演示&quot;">​</a></h2><p>BungeeCord 就 BungeeCord 吧，反正能够实现我们的功能就行。</p><p>我们要用到的是 <code>net.md_5.bungee.chat.TextComponent</code> 这个类。</p><p>下面我们演示如何创建一个链接，并且在玩家单击时让 Minecraft 将其打开。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);"> url </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">TextComponent(</span><span style="color:var(--shiki-token-string-expression);">&quot;点我前往 Love-And-Tolerance 官网！&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 创建一个文本组件</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setHoverEvent</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">HoverEvent(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">HoverEvent</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Action</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">SHOW_TEXT</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-comment);">// 动作：显示文本</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> Text(</span><span style="color:var(--shiki-token-string-expression);">&quot;https://love-tolerance.com/&quot;</span><span style="color:var(--shiki-token-function);">) </span><span style="color:var(--shiki-token-comment);">// 内容：普通文本</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setClickEvent</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ClickEvent(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">ClickEvent</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Action</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">OPEN_URL</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-comment);">// 动作：打开 URL</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-string-expression);">&quot;https://love-tolerance.com/&quot;</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-comment);">// 要打开的 URL</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setColor</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">ChatColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">GOLD</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 设置颜色</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Objects</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">requireNonNull</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;ThatRarityEG&quot;</span><span style="color:var(--shiki-color-text);">))</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">sendMessage</span><span style="color:var(--shiki-color-text);">(url);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 发送！</span></span></code></pre></div><p>我们先不谈它是什么原理，我们看看效果（1.16.5 原版<s>，资源包是 Love-And-Tolerance，语言是 Modern Equish Full</s>）：</p><p><img src="https://s2.loli.net/2023/06/19/EMawyOr1umiSYqg.png" alt="HOVER.png"></p><p><img src="https://s2.loli.net/2023/06/19/AkqjVQ8IF5zu7o3.png" alt="CLICK.png"></p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>有鉴于图床失效、原图丢失，上图系定稿后再行修补，截图时未使用前述资源包和语言。</p></div><p>好，接下来我们解释这是怎么做到的。</p><h2 id="分块" tabindex="-1">分块 <a class="header-anchor" href="#分块" aria-label="Permalink to &quot;分块&quot;">​</a></h2><p>首先，我们要转换一下思路，在 BungeeCord 开发者的眼里，一个文本可以被拆分成不可再分的小「块」，这个「块」就是 <code>BaseComponent</code>，它是下面要说到的 <code>TextComponent</code> 的父类。</p><p>每一「块」具有这样的特点：</p><ul><li>同样的颜色和样式（加粗、斜体等）</li><li>同样的行为（悬浮标签和点击操作等）</li></ul><p>上面的例子中，整个 URL 是一「块」，因为它样式相同（金色），行为相同（悬浮显示 URL，点击打开 URL）。</p><p>分块之后，我们只需要分别创建每一块就可以了。</p><h2 id="基础文本" tabindex="-1">基础文本 <a class="header-anchor" href="#基础文本" aria-label="Permalink to &quot;基础文本&quot;">​</a></h2><p>首先，实例化一个 <code>TextComponent</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);"> url </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">TextComponent(</span><span style="color:var(--shiki-token-string-expression);">&quot;基本文本&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这里的文本是基本文本，稍后将对它们整体设置样式。</p><p>那我要是想分别设置每一个字的样式呢？</p><p>对不起，不行，这是一「块」，样式应当相同。如果需要单独设置样式，请将它接着拆分。</p><p>然后我们可以对其设置颜色与样式：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setColor</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">ChatColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">GOLD</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 颜色</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setBold</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 加粗</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItalic</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 斜体</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setUnderlined</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 下划线</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setStrikeThrough</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 删除线</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">url</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setObfuscated</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 变模糊</span></span></code></pre></div><p>请留意一下，这里的 <code>ChatColor</code> 是 <code>net.md_5.bungee.api.ChatColor</code>，不是 <code>org.bukkit.ChatColor</code>。</p><p>接下来进入最有趣的部分。</p><h2 id="设置鼠标悬浮事件" tabindex="-1">设置鼠标悬浮事件 <a class="header-anchor" href="#设置鼠标悬浮事件" aria-label="Permalink to &quot;设置鼠标悬浮事件&quot;">​</a></h2><p><code>setHoverEvent</code> 设置当鼠标悬浮时要做的事。</p><p>这个方法需要一个 <code>HoverEvent</code> 对象，该对象的构造方法如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">HoverEvent(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">HoverEvent</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Action</span><span style="color:var(--shiki-token-function);"> action</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">Content</span><span style="color:var(--shiki-token-function);"> content</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span></span></code></pre></div><p><code>action</code> 表示「要做之事」，<code>content</code> 表示显示的内容。</p><p>说到「要做之事」，你可能会想到事件处理，很遗憾，这里不行，事实上 Minecraft 能做的事情很有限，那都有哪些事情呢？参考 <code>HoverEvent.Action</code> 枚举，我们看到：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">enum</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Action</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        SHOW_TEXT</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 显示文本</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        SHOW_ITEM</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 显示物品</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        SHOW_ENTITY; </span><span style="color:var(--shiki-token-comment);">// 显示实体标签</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>实际上 <code>content</code> 的类型是与 <code>action</code> 有关的：，不能随便写：</p><ul><li>如果 <code>action</code> 是 <code>SHOW_TEXT</code>，<code>content</code> 就得是 <code>new Text(...)</code></li><li>如果 <code>action</code> 是 <code>SHOW_ITEM</code>，<code>content</code> 就得是 <code>new Item(...)</code></li><li>如果 <code>action</code> 是 <code>SHOW_ENTITY</code>，<code>content</code> 就得是 <code>new Entity(...)</code></li></ul><p><em><code>Text</code>，<code>Item</code> 和 <code>Entity</code> 都是 <code>net.md_5.bungee.api.chat.hover.content</code> 包下的，别导入错了！</em></p><p>我们逐一介绍。</p><p><code>Text</code> 类的构造方法很简单：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Text(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> text)</span></span></code></pre></div><p>提供一个 <code>String</code> 即可。</p><p><code>Item</code> 用于基于 NBT 显示物品的信息，至于怎么获取 NBT……自己看着办吧（笑）。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Item(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> count</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">ItemTag</span><span style="color:var(--shiki-token-function);"> tag</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// Item 构造方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ItemTag</span><span style="color:var(--shiki-color-text);"> tag </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ItemTag</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">ofNbt</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);">NBT 标签</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-color-text);">());</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 如何制造 ItemTag，NBT 的获取可以使用反射</span></span></code></pre></div><p><code>Entity</code> 类用于显示一个实体的信息：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Entity(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> type</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-comment);">// 类型，尚不明确</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    @</span><span style="color:var(--shiki-token-keyword);">NonNull</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> id</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-comment);">// getUniqueId().toString() 即可</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-token-function);"> name </span><span style="color:var(--shiki-token-comment);">// 名字，也可以使用 BaseComponent，例如 new TextComponent(&quot;SHEEP_REALMS&quot;)</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span></span></code></pre></div><p>提供的 UUID 可能是与某个实体相关的……也不明确。</p><p>总而言之，<strong>虽然鼠标悬浮时可以显示文本、物品、实体</strong>，但<strong>只有文本才用起来方便</strong>。</p><h2 id="设置点击事件" tabindex="-1">设置点击事件 <a class="header-anchor" href="#设置点击事件" aria-label="Permalink to &quot;设置点击事件&quot;">​</a></h2><p><code>setClickEvent</code> 设置当点击时要做的事。</p><p>这个方法需要一个 <code>ClickEvent</code> 对象，该对象的构造方法如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ClickEvent(</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-constant);">ClickEvent</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Action</span><span style="color:var(--shiki-token-function);"> action</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> content</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">)</span></span></code></pre></div><p>和上面很像，只不过 <code>content</code> 变成了普通的 <code>String</code>。</p><p>点击时能做的事同样很有限，可以参考 <code>ClickEvent.Action</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">OPEN_URL</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 建议打开 URL</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">OPEN_FILE</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 打开文件，多人游戏无法使用</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">RUN_COMMAND</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 以玩家身份运行命令</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">SUGGEST_COMMAND</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 建议玩家使用命令</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">CHANGE_PAGE</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 换页，仅在书中可用</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">COPY_TO_CLIPBOARD; </span><span style="color:var(--shiki-token-comment);">// 复制到剪贴板</span></span></code></pre></div><p><code>OPEN_FILE</code> 多人游戏中无法使用，因此不介绍。</p><p><code>OPEN_URL</code> 用于建议客户端打开一个 URL，<code>content</code> 即为 URL 地址。</p><p><code>RUN_COMMAND</code> 以玩家身份执行 <code>content</code>（需要带 <code>/</code>），这是<strong>聊天栏按钮最大的作用</strong>，你可以控制玩家执行一条命令，并使用命令处理器完成处理，这也是一种 CLI。</p><p><code>SUGGEST_COMMAND</code> 将 <code>content</code> 打在玩家聊天窗口，但不默认发送，需要玩家确认。</p><p><code>COPY_TO_CLIPBOARD</code> 单击将 <code>content</code> 复制到剪贴板。</p><p><code>CHANGE_PAGE</code> 用于切换书页，仅用在 <code>BookMeta</code> 的 <code>setPages</code> 方法中。虽然页面是 <code>int</code> 类型，但这里还是要写成 <code>String</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ClickEvent(</span><span style="color:var(--shiki-token-constant);">ClickEvent</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">Action</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">CHANGE_PAGE</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;3&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 切换第三页</span></span></code></pre></div><hr><p>用这个方法做出每一「块」后，再将它们小心地收集到一起，以后就可以使用它们啦！</p><p>发送消息，设置书页，设置告示牌时都可以使用呢……而且这些方法通常都支持多个 <code>BaseComponent</code>，依次填进去就行啦。</p><hr><p>因此我们总结出使用奇特文本的方法：</p><ol><li>创建 <code>TextComponent</code></li><li>设置样式</li><li>设置悬浮事件： <ul><li><code>new HoverEvent(HoverEvent.Action.XXX, new XXX(...))</code></li></ul></li><li>设置点击事件： <ul><li><code>new ClickEvent(ClickEvent.Action.XXX, &quot;参数&quot;)</code></li></ul></li><li>放到需要的地方去</li></ol><p>就这些，很简单，对吧？配合命令使用，<code>TextComponent</code> 能够发挥出不小的威力呢~</p>`,77),l=[e];function i(p,c,r,k,v,h){return n(),o("div",null,l)}const d=s(t,[["render",i]]);export{u as __pageData,d as default};
