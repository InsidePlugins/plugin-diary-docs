import{_ as s,o as n,c as o,S as a}from"./chunks/framework.7f03344f.js";const x=JSON.parse('{"title":"6-3 为更好的自己","description":"","frontmatter":{},"headers":[],"relativePath":"Volume6/6-3.md","filePath":"docs/Volume6/6-3.md","lastUpdated":1698403164000}'),t={name:"Volume6/6-3.md"},l=a(`<h1 id="_6-3-为更好的自己" tabindex="-1">6-3 为更好的自己 <a class="header-anchor" href="#_6-3-为更好的自己" aria-label="Permalink to &quot;6-3 为更好的自己&quot;">​</a></h1><p>这一节我们会编写一个<strong>类库</strong>（Class Library），用来简化插件开发的代码。</p><p>怎么简化呢？我们举个例子，有时候我们只需要设置物品的名称，这时候就得：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">im</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setDisplayName</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;SomeItem&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(im);</span></span></code></pre></div><p>我们可以把它封装成一个方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setDisplayName(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> name)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>以后就只需要一行代码了。</p><h2 id="建造模式" tabindex="-1">建造模式 <a class="header-anchor" href="#建造模式" aria-label="Permalink to &quot;建造模式&quot;">​</a></h2><p>我们首先来学习一下建造模式，这是一个概念。</p><p>建造模式通常有两个特点：</p><ul><li>就地修改</li><li>返回修改后的对象</li></ul><p>非建造模式的代码写起来像这样：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">doThis</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">doThat</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">xxxx</span><span style="color:var(--shiki-color-text);">();</span></span></code></pre></div><p>建造模式的代码写起来像这样：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">a</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">doThis</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">doThat</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">xxxx</span><span style="color:var(--shiki-color-text);">();</span></span></code></pre></div><p>这可以减少代码的行数，还能使得程序简洁。</p><p>下面我们就来试试吧！</p><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><p>既然我们学习了 Maven，我们自然要使用 Maven 啦！</p><p>在 IDEA 的「Project Structure」中添加新模块，选择 Maven，可随意命名，我就叫它「RarityCommons」。</p><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>RarityCommons 的许可协议</strong></p><p>RarityCommons 不适用首页的许可，它遵循 <a href="https://www.gnu.org/licenses/gpl-3.0.html" target="_blank" rel="noreferrer">GNU 通用公共许可证（第三版）</a>，请仔细阅读该许可证。该许可证也包含在其代码仓库中。</p><p><img src="https://www.gnu.org/graphics/gplv3-with-text-136x68.png" alt="GPLv3.png"></p></div><p>添加 Paper 作为依赖，在 <code>pom.xml</code> 中添加：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-string-expression);">repositories</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">repository</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        &lt;</span><span style="color:var(--shiki-token-string-expression);">id</span><span style="color:var(--shiki-color-text);">&gt;papermc&lt;/</span><span style="color:var(--shiki-token-string-expression);">id</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        &lt;</span><span style="color:var(--shiki-token-string-expression);">url</span><span style="color:var(--shiki-color-text);">&gt;https://papermc.io/repo/repository/maven-public/&lt;/</span><span style="color:var(--shiki-token-string-expression);">url</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;/</span><span style="color:var(--shiki-token-string-expression);">repository</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">&lt;/</span><span style="color:var(--shiki-token-string-expression);">repositories</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-string-expression);">dependencies</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;</span><span style="color:var(--shiki-token-string-expression);">dependency</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        &lt;</span><span style="color:var(--shiki-token-string-expression);">groupId</span><span style="color:var(--shiki-color-text);">&gt;com.destroystokyo.paper&lt;/</span><span style="color:var(--shiki-token-string-expression);">groupId</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        &lt;</span><span style="color:var(--shiki-token-string-expression);">artifactId</span><span style="color:var(--shiki-color-text);">&gt;paper-api&lt;/</span><span style="color:var(--shiki-token-string-expression);">artifactId</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        &lt;</span><span style="color:var(--shiki-token-string-expression);">version</span><span style="color:var(--shiki-color-text);">&gt;1.16.5-R0.1-SNAPSHOT&lt;/</span><span style="color:var(--shiki-token-string-expression);">version</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        &lt;</span><span style="color:var(--shiki-token-string-expression);">scope</span><span style="color:var(--shiki-color-text);">&gt;provided&lt;/</span><span style="color:var(--shiki-token-string-expression);">scope</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    &lt;/</span><span style="color:var(--shiki-token-string-expression);">dependency</span><span style="color:var(--shiki-color-text);">&gt;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">&lt;/</span><span style="color:var(--shiki-token-string-expression);">dependencies</span><span style="color:var(--shiki-color-text);">&gt;</span></span></code></pre></div><p>单击右上角的「同步」，稍等一会，导入即完成。</p><p>在 <code>java</code> 下创建包，随意命名（只要你能够记住），我就命名为 <code>rarityeg.commons</code>。</p><p>由于类库并不是一个插件，因此也不需要主类，不需要 <code>plugin.yml</code>，我们可以直接开始编写工具类。</p><h2 id="改造-javaplugin" tabindex="-1">改造 <code>JavaPlugin</code> <a class="header-anchor" href="#改造-javaplugin" aria-label="Permalink to &quot;改造 \`JavaPlugin\`&quot;">​</a></h2><p><code>JavaPlugin</code> 中的 <code>instance</code> 问题实在是令人不爽，我们干脆直接把它解决了。</p><p>创建类 <code>JavaPluginR</code>，类名实际上无所谓，但为了自己好用，我就把修改过的类后面加上一个 R。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">commons</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">plugin</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">JavaPlugin</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Nonnull</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">JavaPluginR</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">JavaPlugin</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">JavaPluginR</span><span style="color:var(--shiki-color-text);"> instance; </span><span style="color:var(--shiki-token-comment);">// 小戏法</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Gets the instance of this plugin.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> A instance of this plugin.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@throws</span><span style="color:var(--shiki-token-comment);"> </span><span style="color:var(--shiki-token-function);">IllegalStateException</span><span style="color:var(--shiki-token-comment);"> When this plugin hasn&#39;t been loaded.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">JavaPluginR</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getInstance</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (instance </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) { </span><span style="color:var(--shiki-token-comment);">// null 就抛出错误</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">throw</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">IllegalStateException(</span><span style="color:var(--shiki-token-string-expression);">&quot;This plugin hasn&#39;t been loaded yet!&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> instance; </span><span style="color:var(--shiki-token-comment);">// 不是 null 就返回</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">JavaPluginR</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        super(); </span><span style="color:var(--shiki-token-comment);">// 父类构造方法，Bukkit 使用</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        instance </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;  </span><span style="color:var(--shiki-token-comment);">// 小戏法</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>代码原理很简单，但看上去「正式」了很多。</p><p>首先是我们将 <code>instance</code> 设为了 <code>private</code>，这样可以防止其它类将它修改。</p><p>然后我们编写 <code>getInstance</code> 方法来获取 <code>instance</code>。如果是 <code>null</code> 就抛出异常（实际上一般不可能）。</p><p>最后我们编写了构造方法，先调用 <code>JavaPlugin</code> 的构造方法，再将 <code>instance</code> 设为自己。</p><p>代码中出现了 <code>@NonNull</code>，这表示「返回值不是 <code>null</code>」，这是为了方便自己，同时避免了 <code>NullPointerException</code>。</p><p>那剩下要解释的就只有这一部分了：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">/**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> * Gets the instance of this plugin.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> A instance of this plugin.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> * </span><span style="color:var(--shiki-token-keyword);">@throws</span><span style="color:var(--shiki-token-comment);"> </span><span style="color:var(--shiki-token-function);">IllegalStateException</span><span style="color:var(--shiki-token-comment);"> When this plugin hasn&#39;t been loaded.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> */</span></span></code></pre></div><p>这是 <strong>JavaDocs 的语法</strong>。由于我们的类库最终可能要被别人使用，因此相关的文档要写在其中。这里的文档最终可以被 JavaDoc 工具转换为网页，或者，即使不作为网页，IDEA 也会合理显示 JavaDocs。写好 JavaDocs 很重要！</p><p>当你在编写时，你只需要输入 <code>/**</code>，并按回车，IDEA 就会为你自动编写好左边每一行的 <code>*</code>，并且当你换行时也会自动添加 <code>*</code>。</p><p><code>@returns</code> 表示返回值，后面跟的就是介绍。</p><p><code>@throws</code> 表示可能抛出的异常，先写异常类型再（空一格）写什么时候抛出异常。</p><p>没有前缀的就是该方法的介绍。</p><hr><p>这样，以后我们编写插件，只需要 <code>extends JavaPluginR</code>，再 <code>getInstance</code> 就好啦！没必要自己去写啦！</p><h2 id="itembuilder" tabindex="-1"><code>ItemBuilder</code> <a class="header-anchor" href="#itembuilder" aria-label="Permalink to &quot;\`ItemBuilder\`&quot;">​</a></h2><p>我们编写这样一个类来帮助我们构造 <code>ItemStack</code>，符合建造模式。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">commons</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">net</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">md_5</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bungee</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">api</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">chat</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Bukkit</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">attribute</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Attribute</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">attribute</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">AttributeModifier</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">enchantments</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Enchantment</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Nonnull</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">util</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">*</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> stack;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> meta;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemBuilder</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> originStack) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        stack </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> originStack;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        meta </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Objects</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">requireNonNullElse</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">originStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemFactory</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">stack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getType</span><span style="color:var(--shiki-color-text);">()));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemBuilder</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> originStack</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> originMeta) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        stack </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> originStack;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        meta </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> originMeta;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Return the ItemStack.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The modified ItemStack.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">toItemStack</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">stack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(meta);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> stack;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setDisplayName</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> name) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (name </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setDisplayName</span><span style="color:var(--shiki-color-text);">(name);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setDisplayName</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">... name) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (name </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setDisplayNameComponent</span><span style="color:var(--shiki-color-text);">(name);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">... lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (lore </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">[]... lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (lore </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLoreComponents</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Insert something after the lore.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> lore What to prepend.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The builder.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">appendLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">... lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">insertLoreAt(</span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> lore)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Insert something after the lore.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> lore What to prepend.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The builder.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">appendLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">[]... lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">insertLoreAt(</span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> lore)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Insert something to the very start of the lore.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> lore What to prepend.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The builder.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">prependLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">... lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">insertLoreAt(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> lore)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Insert something to the very start of the lore.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> lore What to prepend.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The builder.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">prependLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">[]... lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">insertLoreAt(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> lore)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Insert a series of things into the Lore at a specified position.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> position Where to insert, negative to count from back.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> lore     What to insert.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The builder.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">insertLoreAt</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> position</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">... lore) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (lore </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">&gt; rawLore </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getLore</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// If null then create</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (rawLore </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">size</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// Reverse position</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (position </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            position </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">size</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> position;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// If writeable</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (rawLore </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> ArrayList </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> rawLore </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> Vector </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> rawLore </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> LinkedList) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addAll</span><span style="color:var(--shiki-color-text);">(position</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLore</span><span style="color:var(--shiki-color-text);">(rawLore);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// Change to Arraylist then add</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">&gt; properLore </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toArray</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">properLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addAll</span><span style="color:var(--shiki-color-text);">(position</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLore</span><span style="color:var(--shiki-color-text);">(properLore);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Insert a series of things into the Lore at a specified position.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> position Where to insert, negative to count from back.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> lore     What to insert.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The builder.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">insertLoreAt</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> position</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">[]... lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (lore </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">[]&gt; rawLore </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getLoreComponents</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (rawLore </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">size</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLoreComponents</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (position </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            position </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">size</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> position;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (rawLore </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> ArrayList </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> rawLore </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> Vector </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> rawLore </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> LinkedList) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addAll</span><span style="color:var(--shiki-color-text);">(position</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLoreComponents</span><span style="color:var(--shiki-color-text);">(rawLore);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">[]&gt; properLore </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">rawLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toArray</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">][</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">properLore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addAll</span><span style="color:var(--shiki-color-text);">(position</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(lore));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLoreComponents</span><span style="color:var(--shiki-color-text);">(properLore);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setLoreByLines</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> lore) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (lore </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setLore(</span><span style="color:var(--shiki-token-constant);">lore</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">split(</span><span style="color:var(--shiki-token-string-expression);">&quot;\\\\r?\\\\n&quot;</span><span style="color:var(--shiki-token-function);">))</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">dropChanges</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        meta </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">stack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setAmount</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> amount) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">stack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setAmount</span><span style="color:var(--shiki-color-text);">(amount);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">clone</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemBuilder(</span><span style="color:var(--shiki-token-constant);">stack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">clone()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">clone())</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * To check if the two ItemBuilders will produce same results.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> builder The object to compare.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> If the stacks are same.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-color-text);"> builder) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-color-text);">(builder </span><span style="color:var(--shiki-token-keyword);">instanceof</span><span style="color:var(--shiki-color-text);"> ItemBuilder)) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> builder) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> spare </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> ((ItemBuilder) builder)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">clone</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toItemStack</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> self </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">clone()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toItemStack</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">spare</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(self);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">hashCode</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">clone()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toItemStack</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">hashCode</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">addEnchants</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> level</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">Enchantment</span><span style="color:var(--shiki-color-text);">... enchantment) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (enchantment </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">Enchantment</span><span style="color:var(--shiki-color-text);"> e </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> enchantment) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (e </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addEnchant</span><span style="color:var(--shiki-color-text);">(e</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> level</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">removeEnchants</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">Enchantment</span><span style="color:var(--shiki-color-text);">... enchantment) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (enchantment </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">Enchantment</span><span style="color:var(--shiki-color-text);"> e </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> enchantment) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (e </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">removeEnchant</span><span style="color:var(--shiki-color-text);">(e);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setUnbreakable</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> unbreakable) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setUnbreakable</span><span style="color:var(--shiki-color-text);">(unbreakable);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Set an attribute modifier, null to remove.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> attribute The attribute.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> am        The modifier.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The builder.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setAttributeModifier</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">Attribute</span><span style="color:var(--shiki-color-text);"> attribute</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">AttributeModifier</span><span style="color:var(--shiki-color-text);"> am) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (attribute </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (am </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">removeAttributeModifier</span><span style="color:var(--shiki-color-text);">(attribute);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addAttributeModifier</span><span style="color:var(--shiki-color-text);">(attribute</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> am);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这里我们写了一些有用的方法。</p><p>现在如果要创建一个物品并进行设置就很简单啦：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemBuilder</span><span style="color:var(--shiki-color-text);"> ib </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemBuilder(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">TORCH</span><span style="color:var(--shiki-token-function);">))</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">ib</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setDisplayName</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;大火球&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setAmount</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">64</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">appendLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;提供光亮&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">prependLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;一个大大的火球&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toItemStack</span><span style="color:var(--shiki-color-text);">();</span></span></code></pre></div><h2 id="syncbukkit" tabindex="-1"><code>SyncBukkit</code> <a class="header-anchor" href="#syncbukkit" aria-label="Permalink to &quot;\`SyncBukkit\`&quot;">​</a></h2><p>我们设计这个类用于执行 <code>Bukkit</code> 对象中的方法，由于 <code>Bukkit</code> 的方法不能在异步方法中被使用，我们设计这个类来完成同步。由于线程设计原因，那些 <code>getXXX</code> 方法没法使用，我们就只设计那些操作性的方法吧。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">commons</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">net</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">md_5</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bungee</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">api</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">chat</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Bukkit</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">GameMode</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">NamespacedKey</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">command</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">CommandSender</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Recipe</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">plugin</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">JavaPlugin</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">scheduler</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">BukkitRunnable</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Nonnull</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">/**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> * Call Bukkit methods asynchronously with BukkitRunnable, not supported for getters.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> * </span><span style="color:var(--shiki-token-keyword);">@see</span><span style="color:var(--shiki-token-comment);"> Bukkit</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> */</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">SyncBukkit</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">JavaPlugin</span><span style="color:var(--shiki-color-text);"> pluginInstance;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">SyncBukkit</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">JavaPlugin</span><span style="color:var(--shiki-color-text);"> plugin) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        pluginInstance </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> plugin;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">dispatchCommand</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">CommandSender</span><span style="color:var(--shiki-color-text);"> cs</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> cmd) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (cs </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> cmd </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">dispatchCommand</span><span style="color:var(--shiki-color-text);">(cs</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> cmd);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setMaxPlayers</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> count) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setMaxPlayers</span><span style="color:var(--shiki-color-text);">(count);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setWhiteList</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> useWhiteList) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setWhitelist</span><span style="color:var(--shiki-color-text);">(useWhiteList);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reloadWhiteList</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">reloadWhitelist</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">broadcast</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">... msg) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (msg </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> s </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> msg) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (s </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                        </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">broadcastMessage</span><span style="color:var(--shiki-color-text);">(s);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">broadcast</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">BaseComponent</span><span style="color:var(--shiki-color-text);">... components) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (components </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">broadcast</span><span style="color:var(--shiki-color-text);">(components);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reload</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">reload</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reloadData</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">reloadData</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">addRecipe</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">Recipe</span><span style="color:var(--shiki-color-text);">... recipes) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (recipes </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">Recipe</span><span style="color:var(--shiki-color-text);"> r </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> recipes) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addRecipe</span><span style="color:var(--shiki-color-text);">(r);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">clearRecipes</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">clearRecipes</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">resetRecipes</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">resetRecipes</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">ParametersAreNullableByDefault</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">removeRecipe</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">NamespacedKey</span><span style="color:var(--shiki-color-text);">... name) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (name </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">NamespacedKey</span><span style="color:var(--shiki-color-text);"> n </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> name) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (n </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                        </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">removeRecipe</span><span style="color:var(--shiki-color-text);">(n);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setSpawnRadius</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> radius) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setSpawnRadius</span><span style="color:var(--shiki-color-text);">(radius);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">shutdown</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">shutdown</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setDefaultGameMode</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">GameMode</span><span style="color:var(--shiki-color-text);"> mode) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setDefaultGameMode</span><span style="color:var(--shiki-color-text);">(mode);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reloadPermissions</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">reloadPermissions</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">reloadCommandAliases</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BukkitRunnable()</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">run</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">reloadCommandAliases</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">runTask</span><span style="color:var(--shiki-color-text);">(pluginInstance);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>另外我们还修改了 <code>JavaPluginR</code>，将 <code>SyncBukkit</code> 作为了它的一个对象。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">commons</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">plugin</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">JavaPlugin</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">javax</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">annotation</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Nonnull</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">JavaPluginR</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">JavaPlugin</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">JavaPluginR</span><span style="color:var(--shiki-color-text);"> instance;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">protected</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">final</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">SyncBukkit</span><span style="color:var(--shiki-color-text);"> syncBukkit;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Gets the instance of this plugin.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> A instance of this plugin.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@throws</span><span style="color:var(--shiki-token-comment);"> </span><span style="color:var(--shiki-token-function);">IllegalStateException</span><span style="color:var(--shiki-token-comment);"> When this plugin hasn&#39;t been loaded.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">JavaPluginR</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getInstance</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (instance </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">throw</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">IllegalStateException(</span><span style="color:var(--shiki-token-string-expression);">&quot;This plugin hasn&#39;t been loaded yet!&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> instance;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Return a synced Bukkit instance so that you can call them in asynchronous methods.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> The synced Bukkit.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@see</span><span style="color:var(--shiki-token-comment);"> SyncBukkit</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Nonnull</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">SyncBukkit</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getSyncBukkit</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> syncBukkit;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">JavaPluginR</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        super();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        instance </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        syncBukkit </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">SyncBukkit(</span><span style="color:var(--shiki-token-constant);">this</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>到这里，我们就创建好了 <code>JavaPluginR</code>、<code>SyncBukkit</code> 和 <code>ItemBuilder</code>，提供了一些方便的方法。</p><h2 id="reflector" tabindex="-1"><code>Reflector</code> <a class="header-anchor" href="#reflector" aria-label="Permalink to &quot;\`Reflector\`&quot;">​</a></h2><p>这个类用于完成 NMS 反射的基础工作。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">commons</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">Bukkit</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Reflector</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> VERSION </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> NMS_PACKAGE </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">private</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> OBC_PACKAGE </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> version </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMinecraftVersion</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> v1 </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">version</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">split</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;\\\\.&quot;</span><span style="color:var(--shiki-color-text);">)[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> v2 </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">version</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">split</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;\\\\.&quot;</span><span style="color:var(--shiki-color-text);">)[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> nmsBaseHead </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;net.minecraft.server.&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">20</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(nmsBaseHead </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;v&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> v1 </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> v2 </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_R&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.ItemStack&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                VERSION </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;v&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> v1 </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> v2 </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_R&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> i;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                NMS_PACKAGE </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> nmsBaseHead </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> VERSION;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                OBC_PACKAGE </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;org.bukkit.craftbukkit.&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> VERSION;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span><span style="color:var(--shiki-color-text);"> ignored) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getNMSPackage</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> NMS_PACKAGE;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getOBCPackage</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> OBC_PACKAGE;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">getVersion</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> VERSION;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这里仅完成了基础工作，其它工作就交由插件开发者完成吧（笑）。</p><h2 id="commandvalidator" tabindex="-1"><code>CommandValidator</code> <a class="header-anchor" href="#commandvalidator" aria-label="Permalink to &quot;\`CommandValidator\`&quot;">​</a></h2><p>编写这个类用来分析命令的参数等信息，检查命令是否符合要求。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">commons</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">CommandValidator</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">enum</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ArgType</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        STRING</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        NUMBER</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        BOOLEAN</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Validate arguments using type assertion.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> args  Arguments of this command.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> types ArgType to compare.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> If the arguments matches those types.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@see</span><span style="color:var(--shiki-token-comment);"> ArgType</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">validate</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">[] args</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ArgType</span><span style="color:var(--shiki-color-text);">... types) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">args</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">types</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">types</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">length</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (types[i] </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ArgType</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">STRING</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">continue</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (types[i] </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ArgType</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">NUMBER</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-function);">isNumber(args[i])</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">continue</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (types[i] </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ArgType</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BOOLEAN</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-function);">isBoolean(args[i])</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Check if the string is a boolean, like &quot;y...&quot;, &quot;n...&quot;, &quot;true&quot;, &quot;false&quot;, &quot;t&quot;, &quot;f&quot;</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> s The string to check.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> If the string is a boolean.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">protected</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isBoolean</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> s) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> sLow </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">s</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toLowerCase</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">sLow</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">startsWith</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;y&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">sLow</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">startsWith</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;n&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">sLow</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;true&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">sLow</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;false&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">sLow</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;t&quot;</span><span style="color:var(--shiki-color-text);">) </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">sLow</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;f&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">    /**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * Check if the string contains a number.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     *</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@param</span><span style="color:var(--shiki-token-comment);"> s The string to check.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     * </span><span style="color:var(--shiki-token-keyword);">@return</span><span style="color:var(--shiki-token-comment);"> If the string contains a number.</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">     */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">protected</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">boolean</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">isNumber</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> s) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">Integer</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">parseInt</span><span style="color:var(--shiki-color-text);">(s);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">NumberFormatException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-constant);">Double</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">parseDouble</span><span style="color:var(--shiki-color-text);">(s);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">NumberFormatException</span><span style="color:var(--shiki-color-text);"> e2) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>原理很简单，就是判断对应的参数是否符合。</p><h2 id="再谈-javapluginr" tabindex="-1">再谈 <code>JavaPluginR</code> <a class="header-anchor" href="#再谈-javapluginr" aria-label="Permalink to &quot;再谈 \`JavaPluginR\`&quot;">​</a></h2><p>最后我们来改进这个类，将文件的读取变得简单些，加上了两个方法而已。</p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>以下代码可谓 RarityCommons 之白璧微瑕，不宜学习。该代码至少有如下问题：</p><ul><li>打开 IO 流时没有使用 try-with-resources，而是手动关闭。</li><li>捕获到异常时，没有关闭流就直接结束了方法。</li><li>Reader 和 Writer 均未指定字符编码。</li><li><code>readLine</code> 方法的返回值不含换行符，因此 <code>readFile</code> 方法所返回的字符串也不含换行符。整个文件的内容会被并入同一行。</li></ul><p>自 Java 8 起，文件读写完全可以使用 NIO 完成，不需要再手动打开流、关闭流。</p><p>可以这么读取文件：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">&gt; lines </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Files</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">readAllLines</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">file</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toPath</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">StandardCharsets</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">UTF_8</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 返回值是按行分割的文件内容。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 列表中的第一个元素是文件的第一行，第二个元素是文件的第二行，依此类推。</span></span></code></pre></div><p>可以这么写入文件：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">&gt; contents </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">List</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">of</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;a&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;b&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;c&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Files</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">write</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">file</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toPath</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> lines</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">StandardCharsets</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">UTF_8</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">StandardOpenOption</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WRITE</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 逐行写入列表内的字符串，每个字符串为一行。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// StandardOpenOption 代表写入的模式。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// WRITE 是抛弃文件内的原有内容，用新内容覆盖。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// APPEND 是保留文件内的原有内容，将新内容添加到文件末。</span></span></code></pre></div></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">/**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> * 请勿复制本方法，原因见上。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Deprecated</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">readFile(</span><span style="color:var(--shiki-token-keyword);">File</span><span style="color:var(--shiki-token-function);"> f)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">StringBuilder</span><span style="color:var(--shiki-color-text);"> builder </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">StringBuilder()</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">BufferedReader</span><span style="color:var(--shiki-color-text);"> reader </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BufferedReader(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> FileReader(f))</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> temp;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">while</span><span style="color:var(--shiki-color-text);"> ((temp </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">reader</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">readLine</span><span style="color:var(--shiki-color-text);">()) </span><span style="color:var(--shiki-token-keyword);">!=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-constant);">builder</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(temp);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">reader</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">close</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">builder</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">IOException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-comment);">/**</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> * 请勿复制本方法，原因见上。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);"> */</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">Deprecated</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">ParametersAreNonnullByDefault</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">writeFile(</span><span style="color:var(--shiki-token-keyword);">File</span><span style="color:var(--shiki-token-function);"> f</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">Serializable</span><span style="color:var(--shiki-token-function);"> data)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> dataS </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">data</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">toString</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">BufferedWriter</span><span style="color:var(--shiki-color-text);"> writer </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">BufferedWriter(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-token-function);"> FileWriter(f))</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">writer</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">write</span><span style="color:var(--shiki-color-text);">(dataS);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">writer</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">close</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">IOException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><hr><p>现在 RarityCommons 就可以用了，虽然我们只在里面放了一些非常非常基础的内容，但它们确实可以方便插件的开发。</p>`,70),r=[l];function e(p,i,c,k,y,h){return n(),o("div",null,r)}const u=s(t,[["render",e]]);export{x as __pageData,u as default};
