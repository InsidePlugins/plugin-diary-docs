import{_ as s,o,c as n,S as a}from"./chunks/framework.7f03344f.js";const u=JSON.parse('{"title":"5-3 粒子效果","description":"","frontmatter":{},"headers":[],"relativePath":"Volume5/5-3.md","filePath":"docs/Volume5/5-3.md","lastUpdated":1698403164000}'),t={name:"Volume5/5-3.md"},l=a(`<h1 id="_5-3-粒子效果" tabindex="-1">5-3 粒子效果 <a class="header-anchor" href="#_5-3-粒子效果" aria-label="Permalink to &quot;5-3 粒子效果&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>注意兼容性</strong>！</p><p>本节中的部分内容可能不与旧版本（1.12.2 及以下）兼容，请使用 1.13 或更高版本！</p></div><p>粒子效果是 Minecraft 中常见的艺术效果。虽然大部分工作都在客户端完成，但粒子效果仍然是在服务端被计算的，并且推送到客户端。</p><p>值得注意的是，如果你在客户端的设置中将「粒子效果」设为了「关闭」，那么插件定义的粒子效果将不一定能生效。之所以说「不一定」，是因为不同服务端的实现不一样。总之，粒子效果<strong>只应当被用来进行装饰</strong>。</p><p>播放粒子效果是 <code>World</code> 接口的一个方法，要获得 <code>World</code> 对象，可通过 <code>Location</code> 类的 <code>getWorld</code> 方法，或者先前介绍到的 <code>Bukkit.getWorlds</code> 方法。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Location</span><span style="color:var(--shiki-color-text);"> location </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getLocation</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">World</span><span style="color:var(--shiki-color-text);"> playerWorld </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">location</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getWorld</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 适合获取一个玩家的世界</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">World</span><span style="color:var(--shiki-color-text);"> nether </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getWorlds</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">get</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 适合固定获取一个世界</span></span></code></pre></div><h2 id="播放一个粒子" tabindex="-1">播放一个粒子 <a class="header-anchor" href="#播放一个粒子" aria-label="Permalink to &quot;播放一个粒子&quot;">​</a></h2><p>播放粒子效果的方法叫做 <code>spawnParticle</code>。值得注意的是，它有<strong>非常多的重载版本</strong>，这次我们只介绍其中最简单的，签名如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">spawnParticle(</span><span style="color:var(--shiki-token-keyword);">Particle</span><span style="color:var(--shiki-token-function);"> particle</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-token-function);"> x</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-token-function);"> y</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-token-function);"> z</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> count)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 最简单的，在指定位置播放指定次数的效果</span></span></code></pre></div><p><em>建议参考该方法的 <a href="https://papermc.io/javadocs/paper/1.16/org/bukkit/World.html#spawnParticle-org.bukkit.Particle-org.bukkit.Location-int-" target="_blank" rel="noreferrer">JavaDocs</a> 以确保你没有错过精彩的内容！</em></p><p><code>Particle</code>（<code>org.bukkit.Particle</code>）枚举中含有许多粒子形状。<code>WATER_BUBBLE</code> 是泡泡，<code>LAVA</code> 是岩浆蹦出的火星，<code>ITEM_CRACK</code> 是物品损坏时碎裂的粒子，还有很多，你可以查询 <code>Particle</code> 枚举。</p><p>这可以播放一个粒子，但只播放一个怎么够呢？</p><h2 id="播放一堆粒子-难看的" tabindex="-1">播放一堆粒子（难看的） <a class="header-anchor" href="#播放一堆粒子-难看的" aria-label="Permalink to &quot;播放一堆粒子（难看的）&quot;">​</a></h2><p>这里需要说明的一点是，<code>spawnParticle</code> 方法<strong>一次只能画出一个粒子</strong>，Minecraft 原版中的粒子也是通过多次调用 <code>spawnParticle</code> 方法画出的。那么只需要传入几个随机数就可以啦~哇，别生气，我是开玩笑的。</p><h2 id="播放一堆粒子-好看的" tabindex="-1">播放一堆粒子（好看的） <a class="header-anchor" href="#播放一堆粒子-好看的" aria-label="Permalink to &quot;播放一堆粒子（好看的）&quot;">​</a></h2><p>我们通过<strong>有规则地画出一些粒子</strong>来画出形状。鉴于计算出需要的位置可能会用到数学库，可以使用 <code>java.lang.Math</code> 类中的方法，不过，下面我们使用几何的力量来解决（笑）。</p><p>粒子效果很多，我们举一个例子：当玩家登录时，在其脚下播放一个六角星。</p><p>首先我们要画出图：</p><p><img src="https://s2.loli.net/2022/04/15/JhWLpNtaOZ7xnIc.jpg" alt="SKETCH.jpg"></p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>有鉴于图床失效、原图丢失，上图系定稿后再行修补，图文未必贴合。</p></div><p><em>绿色为原点（玩家脚下），红色为顶点，黑色为边，蓝色为辅助的直角坐标系。</em></p><p>由于一边计算一边画很慢，我们先将各个点都计算好。为了凸显计算的重要性，我们使用平面几何方法计算出它们（而不使用测量）：</p><p>首先，我们需要计算出 A、B、C、D、E、F 的坐标。</p><p>我们将粒子效果的半径设为 3，即 B（0，3）。</p><p>那么 E 就是（0，-3）。</p><p>A 的横坐标为 cos 30° * 3 ≈ 2.5981（这样的精度已经过分了）</p><p>A 的纵坐标为 sin 30° * 3 = 1.5</p><p>所以 A（2.5981，1.5）</p><p>那么我们求得 C（-2.5981， 1.5），F（2.5981，-1.5），D（-2.5981， -1.5）</p><p>这样六个点就算出来了。</p><p>由于我们是在水平地面上画图，因此 Y 方向偏移量始终为 0，我们在上面的平面图中计算出来的是 X 和 Z 值。（Minecraft 的 Y 是立轴）</p><p>接下来我们只要把线画出来就行了。由于粒子效果只有一个点，因此我们通过<strong>点动成线</strong>的方法画出线。</p><p>每条线段我们使用 300 个点构成，这个数量可以根据服务器的性能适当调整，下面的算法表示了如何计算出线：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">List&lt;double</span><span style="color:var(--shiki-color-text);">[]</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">generateLine(</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-token-function);"> startX</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-token-function);"> startZ</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-token-function);"> endX</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-token-function);"> endZ</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-token-function);"> resolution)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);"> XStep </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (endX </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-color-text);"> startX) </span><span style="color:var(--shiki-token-keyword);">/</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">) resolution;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// X 方向的「单元」</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);"> ZStep </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (endZ </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-color-text);"> startZ) </span><span style="color:var(--shiki-token-keyword);">/</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">) resolution;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// Z 方向的「单元」</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[]&gt; result </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ArrayList</span><span style="color:var(--shiki-color-text);">&lt;&gt;();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;=</span><span style="color:var(--shiki-color-text);"> resolution; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[] point </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[</span><span style="color:var(--shiki-token-constant);">2</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// {x, z} 这样的数组</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> startX;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">] </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> startZ;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">result</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(point);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 加入点阵</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        startX </span><span style="color:var(--shiki-token-keyword);">+=</span><span style="color:var(--shiki-color-text);"> XStep;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        startZ </span><span style="color:var(--shiki-token-keyword);">+=</span><span style="color:var(--shiki-color-text);"> ZStep;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 移动到下一个单元</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> result;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p><em>选用 <code>List</code> 只是编写方便，<code>double[]</code> 是坐标。事实上 <code>spawnParticle</code> 方法可以使用 <code>Location</code> 的实例，但考虑到我们要画的点很多，相比之下，使用 <code>double</code> 数组能节省一些内存开销。</em></p><p>其实算法很简单（就是模拟），X 方向上分成许多段，Z 方向上分成许多段，每次加上「一个单元」就可以画出直线了。<code>a += b</code> 是 <code>a = a + b</code> 的缩写。</p><p>在正式绘画前，我们还需要将六条线画出来：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[]&gt; AC </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">generateLine(</span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">300</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[]&gt; CE </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">generateLine(</span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">300</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[]&gt; EA </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">generateLine(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">300</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[]&gt; BD </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">generateLine(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">300</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[]&gt; DF </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">generateLine(</span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">300</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">List</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[]&gt; FB </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">generateLine(</span><span style="color:var(--shiki-token-constant);">2.5981</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">-</span><span style="color:var(--shiki-token-constant);">1.5</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">300</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这样就做好啦！</p><p>下面的方法用于真正「绘制」每个粒子：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">playMagic(</span><span style="color:var(--shiki-token-keyword);">Location</span><span style="color:var(--shiki-token-function);"> base)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">World</span><span style="color:var(--shiki-color-text);"> world </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getWorld</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[] point </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> AC) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">spawnParticle</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Particle</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">HEART</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">subtract</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[] point </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> CE) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">spawnParticle</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Particle</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">HEART</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">subtract</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[] point </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> EA) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">spawnParticle</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Particle</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">HEART</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">subtract</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[] point </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> BD) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">spawnParticle</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Particle</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">HEART</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">subtract</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[] point </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> DF) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">spawnParticle</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Particle</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">HEART</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">subtract</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">double</span><span style="color:var(--shiki-color-text);">[] point </span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> FB) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">world</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">spawnParticle</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Particle</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">HEART</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">add</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">])</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">base</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">subtract</span><span style="color:var(--shiki-color-text);">(point[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> point[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">]);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p><code>add</code> 是就地修改（Bukkit 缺德 +1），所以我们要用 <code>subtract</code> 减回去。</p><p><code>Particle.HEART</code> 是心形粒子（其它粒子的效果似乎并不好），1 是次数。</p><p>最后，当我们需要播放效果时：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-function);">playMagic(</span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">getPlayer</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getLocation())</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>就可以啦~</p><p>测试效果大概是这样的<s>（OptiFine HD U G6，材质包 Love-And-Tolerance，光影 Sildurs Vibrant Shaders v1.281 Extreme-VL）</s>：</p><p><img src="https://s2.loli.net/2023/06/19/eXmQ3LKOgC8x6kJ.png" alt="EFFECT.png"></p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>有鉴于图床失效、原图丢失，上图系定稿后再行修补，截图时未使用前述材质包和光影。</p></div><p><em>在实际截图时，我将粒子出现的位置向下调了 2 格以便操作。</em></p><hr><p>因此我们总结出粒子 绘画的方法：</p><ol><li>画出图，计算各点位置</li><li>确定分辨率（多少个粒子构成），用函数计算出直线，对于圆锥曲线（双曲线，抛物线，椭圆，圆形）可以使用对应的参数方程来绘制</li><li>在需要播放时，以玩家脚底为原点，添加偏移量（<code>add</code>）后播放即可</li></ol><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>我不想计算</strong>！</p><p>对于直线图形，如果你不想通过平面几何或解析几何计算的话，你可以使用你的画图软件（如「GeoGebra」，一个免费的数学画图工具）测量各个点的位置，再通过乘法得到适当的大小。上面我们编写的函数，对任何直线都适用（需要合适的分辨率）！</p></div>`,54),r=[l];function e(i,p,c,k,y,h){return o(),n("div",null,r)}const d=s(t,[["render",e]]);export{u as __pageData,d as default};
