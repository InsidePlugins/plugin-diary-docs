import{_ as s,o,c as n,S as a}from"./chunks/framework.7f03344f.js";const d=JSON.parse('{"title":"3-1 经典 GUI","description":"","frontmatter":{},"headers":[],"relativePath":"Volume3/3-1.md","filePath":"docs/Volume3/3-1.md","lastUpdated":1698403164000}'),t={name:"Volume3/3-1.md"},e=a(`<h1 id="_3-1-经典-gui" tabindex="-1">3-1 经典 GUI <a class="header-anchor" href="#_3-1-经典-gui" aria-label="Permalink to &quot;3-1 经典 GUI&quot;">​</a></h1><h2 id="gui-的原理" tabindex="-1">GUI 的原理 <a class="header-anchor" href="#gui-的原理" aria-label="Permalink to &quot;GUI 的原理&quot;">​</a></h2><p>你肯定在服务器中不止一次看到过它们的菜单，有的服务器采用右键一个物品，有的采用命令。</p><p>下面是一个简陋的菜单示例。</p><p><img src="https://s2.loli.net/2022/04/15/D6ntRqKBHGEUO5N.png" alt="MENU.png"></p><p>你应该发现，GUI 和 物品栏长得很像（根本就是一个东西好吧），这并非有意为之，而是因为<strong>物品栏是显示可交互 GUI 的方法</strong>。</p><p><em>另外两种 GUI 分别是<strong>聊天栏</strong>和<strong>计分板</strong>，但是它们的功能都没有物品栏 GUI 强大。</em></p><p>物品栏 GUI 的本质就是一个摆放了不同物品的物品栏。还记得吗，我们说<strong>客户端并不知道插件的存在</strong>。在 Minecraft 客户端中，物品栏<strong>不一定要和什么东西关联起来</strong>，物品栏的显示是单独的。也就是说，不是因为你按了箱子导致物品栏打开，而是你按箱子的动作发送到服务端，服务端处理完成后再指示客户端打开物品栏的。</p><p>那我们当然也可以通过插件直接指示客户端打开一个物品栏，这是可以做到的。</p><h2 id="物品堆" tabindex="-1">物品堆 <a class="header-anchor" href="#物品堆" aria-label="Permalink to &quot;物品堆&quot;">​</a></h2><p>Minecraft 使用一个名叫<strong>物品堆</strong>（<code>ItemStack</code>）的类来描述物品堆。所谓物品堆，基本上就是<strong>物品 + 数量</strong>，摆在物品栏中的也不是物品（<code>Item</code>），而是 <code>ItemStack</code>。</p><h2 id="通过代码制作一个基本的-gui" tabindex="-1">通过代码制作一个基本的 GUI <a class="header-anchor" href="#通过代码制作一个基本的-gui" aria-label="Permalink to &quot;通过代码制作一个基本的 GUI&quot;">​</a></h2><h3 id="画出-gui" tabindex="-1">画出 GUI <a class="header-anchor" href="#画出-gui" aria-label="Permalink to &quot;画出 GUI&quot;">​</a></h3><p>一个基本的 GUI 包含以下内容：</p><ul><li>基于哪种物品栏制作？多数插件都使用<strong>箱子</strong>，因为箱子 GUI 的大小可以自定义，而且编号简单易记。</li><li>标题是什么？标题是区分 GUI 的<strong>最方便的方法</strong>。</li><li>包含哪些物品？这应当在实例化 <code>Inventory</code> 类后进行设置。</li></ul><p>这部分不方便用语言说明，我们用一段代码来表述：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Inventory</span><span style="color:var(--shiki-color-text);"> inv </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">createInventory</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;RarityEG&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">*</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">9</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;GUI 标题&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> exitItem </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BARRIER</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">inv</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItem</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> exitItem);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;RarityEG&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">openInventory</span><span style="color:var(--shiki-color-text);">(inv);</span></span></code></pre></div><p><code>Bukkit.createInventory</code> 用于创建一个物品栏（<code>Inventory</code> 对象），默认的物品栏就是箱子 GUI，所以无需修改。</p><p>括号内的三个参数分别是<strong>所属实体</strong>（这里通过服务端获取了一个名为「RarityEG」的玩家），<strong>大小</strong>（必须是 9 的倍数，从 1 * 9 到 6 * 9），<strong>标题</strong>。</p><p>接下来我们实例化了一个 <code>ItemStack</code>，并将它放到了 GUI 的 0 号槽，0 号就是第一个格子（从左往右，从上往下）。<code>Material</code> 枚举里面指出了所有可能的材料，材料可以认为就是<strong>物品的实质</strong>。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>什么是枚举</strong>？</p><p>假如你需要描述一个数据，它有「大」、「中」、「小」三种状态。使用 <code>String</code> 或者 <code>int</code>？那就要判断它们是否在取值范围以内。使用 <code>boolean</code>？对不起，差一个。</p><p>枚举（<code>enum</code>）就是用来解决这种尴尬问题的。<code>enum</code> 规定了一个变量的几种可能取值。要使用枚举的值，可以通过像访问类（静态）变量一样的方法，即 <code>&lt;枚举名&gt;.&lt;值&gt;</code>。</p></div><p>最后用 <code>openInventory</code> 为玩家打开这个 GUI。这样 GUI 就展现在玩家面前，并且在玩家把它关闭前它会一直存在。</p><p>通过设置其中的 <code>ItemStack</code>，可以赋予菜单各种各样的信息，那究竟有哪些可以设置呢？这就是我们下一章要说到的内容了……不过在下一章之前，我们还有一些要讲明白……</p><h3 id="保护-gui" tabindex="-1">保护 GUI <a class="header-anchor" href="#保护-gui" aria-label="Permalink to &quot;保护 GUI&quot;">​</a></h3><p>这里打开的 GUI 和通过箱子打开的 GUI 是完全一样的，没有做限制，也就是说，<strong>玩家是可以把里面的东西拿走的</strong>！</p><p>要避免这种情况，我们又需要进行事件处理了。监听 <code>InventoryClickEvent</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">EventHandler</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onClick(</span><span style="color:var(--shiki-token-keyword);">InventoryClickEvent</span><span style="color:var(--shiki-token-function);"> e)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">Player</span><span style="color:var(--shiki-color-text);"> player </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (Player) </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getWhoClicked</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 只有玩家可以触发 InventoryClickEvent，可以强制转换</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">InventoryView</span><span style="color:var(--shiki-color-text);"> inv </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">player</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getOpenInventory</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">inv</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getTitle</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;GUI 标题&quot;</span><span style="color:var(--shiki-color-text);">)) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 通过标题区分 GUI</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setCancelled</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这里有一点值得注意的地方：我们没有使用 <code>e.getInventory</code> 获得物品栏，而是使用 <code>e.getWhoClicked</code> 获取了点击的玩家（能够触发该事件的只有玩家），再通过 <code>getOpenInventory</code> 获得物品栏，绕了好大一个弯子。笔者也不知道为什么是这样，可能是因为内部机制吧。（<code>getInventory</code> 返回 <code>Inventory</code>，而 <code>getOpenInventory</code> 返回的是 <code>InventoryView</code>）</p><h3 id="获取被点击的物品" tabindex="-1">获取被点击的物品 <a class="header-anchor" href="#获取被点击的物品" aria-label="Permalink to &quot;获取被点击的物品&quot;">​</a></h3><p>要获取被点击的物品，可以通过调用 <code>InventoryClickEvent</code> 的各个方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getRawSlot</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">&lt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">||</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getRawSlot</span><span style="color:var(--shiki-color-text);">() </span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getInventory</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getSize</span><span style="color:var(--shiki-color-text);">()) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 这个方法来源于 Bukkit Development Note</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 如果在合理的范围内，getRawSlot 会返回一个合适的编号（0 ~ 物品栏大小-1）</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 结束处理，使用 return 避免了多余的 else</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> clickedItem </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getCurrentItem</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 获取被点的物品</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (clickedItem </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">){</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 确保不是 null</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 后续处理</span></span></code></pre></div><p>这样我们就得到了被点击物品的 <code>ItemStack</code>，可以由此来判断玩家按下了哪个「按钮」。</p><p>如果要获得点击的格子，可以使用 <code>getSlot</code>，该方法返回被点击格子的编号。</p><h2 id="经典-gui-和数据包-gui" tabindex="-1">经典 GUI 和数据包 GUI <a class="header-anchor" href="#经典-gui-和数据包-gui" aria-label="Permalink to &quot;经典 GUI 和数据包 GUI&quot;">​</a></h2><p>这里创建的 GUI 在玩家打开后就无法再修改（如果你做过前端，就像 React 一样，只能渲染一个新的 GUI 传进去），而且还需要进行保护（GUI 里的物品可都是真的）。更重要的是，<strong>服务端有这个 GUI 的实例</strong>，它在内存里，这种 GUI 被称为<strong>经典 GUI</strong>。</p><p>与经典 GUI 相对的是<strong>数据包 GUI</strong>，数据包 GUI 在使用时，服务端发送一个数据包到客户端，客户端便会渲染 GUI，此后服务端就可以将这个 GUI 的实例删除。数据包 GUI 也能比经典 GUI 做出更美观的效果，然而，数据包 GUI 需要依赖其它插件（ProtocolLib），这超出了我们的讲解范畴，因此只能向大家说声对不起了。</p>`,36),r=[e];function l(i,p,c,k,y,h){return o(),n("div",null,r)}const u=s(t,[["render",l]]);export{d as __pageData,u as default};
