import{_ as s,o as a,c as o,S as l}from"./chunks/framework.7f03344f.js";const y=JSON.parse('{"title":"EX-0-1 Hello World?","description":"","frontmatter":{},"headers":[],"relativePath":"Volume1/EX-0-1.md","filePath":"docs/Volume1/EX-0-1.md","lastUpdated":1698403164000}'),t={name:"Volume1/EX-0-1.md"},e=l(`<h1 id="ex-0-1-hello-world" tabindex="-1">EX-0-1 Hello World? <a class="header-anchor" href="#ex-0-1-hello-world" aria-label="Permalink to &quot;EX-0-1 Hello World?&quot;">​</a></h1><h2 id="行动背景" tabindex="-1">行动背景 <a class="header-anchor" href="#行动背景" aria-label="Permalink to &quot;行动背景&quot;">​</a></h2><blockquote><p>Hello World 中文意思是『你好，世界』。因为 <em>The C Programming Language</em> 中使用它做为第一个演示程序，非常著名，所以后来的程序员在学习编程或进行设备调试时延续了这一习惯。</p></blockquote><p>为了继承这一传统，我们需要让 Bukkit 听我们的，输出一行「Hello, world!」。</p><h2 id="行动规划" tabindex="-1">行动规划 <a class="header-anchor" href="#行动规划" aria-label="Permalink to &quot;行动规划&quot;">​</a></h2><blockquote><p>行动名称：Hello World</p><p>行动代号：EX-0</p><p>行动类别：演习</p><p>涉及章节：</p><ul><li>EX-0-1</li><li>EX-0-2</li></ul><p>难度：绵羊</p></blockquote><p>服务器在运行时，有一个名为<strong>控制台</strong>（Console）的东西，其中显示着来自各种地方的消息。就像 MCBBS 一样，任何插件都有资格在这里发言。</p><p>控制台长得像这样：</p><p><img src="https://s2.loli.net/2022/04/15/kjQFvsXEp8IKytB.png" alt="CONSOLE.png"></p><p>这里看上去不错，那我们就在这里说句话吧~</p><h2 id="开始行动" tabindex="-1">开始行动 <a class="header-anchor" href="#开始行动" aria-label="Permalink to &quot;开始行动&quot;">​</a></h2><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><p>打开 IDEA，单击「New Project」，选择「Java」，单击「Next」两次。</p><p>新窗口要求你输入项目的名字，这里我暂且命名为 <code>RarityPlugins</code>，同时你还可以为项目选择一个合适的存储位置。单击「Finish」完成。</p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>新版本 IntelliJ IDEA 界面有改动，没有「Next」按钮。在「Name」框中输入项目名字以后，「Language」选择 Java，「Build System」选择 IntelliJ，点击右下角「Create」按钮即可。</p><p>这样创建的项目，称为 Ant 项目。与 Ant 并列的，还有 Maven 和 Gradle。三者都是依赖管理工具。对于初学者而言，Ant 用起来最简单。IntelliJ IDEA 为这套依赖管理系统设计了图形化界面，只要动动鼠标就可以完成依赖管理了，所以 Idea 就把 Ant 的名字改成了 IntelliJ。在你学会 Ant 的用法以后，本教程还会介绍 Maven 的使用方法。这就是后话了。</p></div><h3 id="添加依赖" tabindex="-1">添加依赖 <a class="header-anchor" href="#添加依赖" aria-label="Permalink to &quot;添加依赖&quot;">​</a></h3><p>上一节准备好的 Jar 文件还在吧？那就好。</p><p>按下 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>S</kbd> 打开「Project Structure」面板，转到左边的「Modules」，按「-」移除所有现有的 Module。</p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>ThatRarityEG 所写的快捷键适用于 IntelliJ IDEA for Windows。使用其它操作系统的用户，可以点击左上角 Files 唤出下拉列表，再单击 Project Structure 按钮打开面板。</p></div><p>现在，按「+」、「New Module」，弹出一个新的窗口，选择侧边的「Java」，单击「Next」。</p><p>将「Module name」填入 <code>HelloWorld</code>，其它选项保持默认，单击「Finish」。</p><p><img src="https://s2.loli.net/2022/04/15/irGWQagtU2zqIoy.png" alt="MODULE.png"></p><p>单击左边的「Libraries」，点按「+」、「Java」并选择上一节准备好的 Jar 文件，单击「OK」两次。</p><p><img src="https://s2.loli.net/2022/04/15/qXSZurnd7l6jQgs.png" alt="LIB.png"></p><p>现在单击右下角的「Apply」、「OK」，项目就创建完成了！</p><p><img src="https://s2.loli.net/2022/04/15/jlKGACFo9zsMva4.png" alt="DONE.png"></p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>到底怎么回事</strong>？</p><p>一个 Java 项目当然不可能是由一个人完成的，你需要编写的代码往往已经有开发者编写过了，这就叫<strong>轮子</strong>（Wheel）。如果你的项目要使用它，就要把它<strong>导入</strong>。导入的<strong>轮子</strong>就叫<strong>依赖</strong>（Dependency）。</p><p>这里添加了什么依赖呢？<code>spigot-1.16.5.jar</code>……那不就是<strong>服务器</strong>（Server）嘛！</p><p>没错，我们直接将服务端用作依赖就可以了，里面包含了大多数情况下我们需要的代码。</p><p>如果你读了前面的故事，这个依赖就在其中扮演着「洞」的角色。</p></div><h2 id="第一个类" tabindex="-1">第一个类 <a class="header-anchor" href="#第一个类" aria-label="Permalink to &quot;第一个类&quot;">​</a></h2><h3 id="创建包" tabindex="-1">创建包 <a class="header-anchor" href="#创建包" aria-label="Permalink to &quot;创建包&quot;">​</a></h3><p>展开「HelloWorld」（单击左侧的小三角形），右键 <code>src</code> 文件夹，「New」、「Package」，在弹出的框中输入 <code>rarityeg.helloworld</code>。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>到底怎么回事</strong>？</p><p><strong>包</strong>（Package）是存放下面要创建的<strong>类</strong>（Class）的地方。你可以把包想象成一块空间，里面存放着我们插件的代码。</p><p>我们要在 Java 的世界中申请一块空间来创建我们的项目。要向 Java 申请空间，<strong>只需要创建包并给它命名</strong>。</p><p>当然了，名字非常多，我们申请这一块空间，Java 是不会介意的。这里你输入的内容开辟了一个名为 <code>helloworld</code> 的空间。</p></div><h3 id="创建类" tabindex="-1">创建类 <a class="header-anchor" href="#创建类" aria-label="Permalink to &quot;创建类&quot;">​</a></h3><p>在新的包下（右键 <code>helloworld</code> 文件夹），「New」、「Java Class」，输入 <code>HelloWorld</code>。</p><p>IDEA 为你自动补全了代码，像这样：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">helloworld</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">HelloWorld</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><h2 id="一无所知地开始编写代码" tabindex="-1">一无所知地开始编写代码 <a class="header-anchor" href="#一无所知地开始编写代码" aria-label="Permalink to &quot;一无所知地开始编写代码&quot;">​</a></h2><p>现在我们不管三七二十一，将以下代码输入（可以在 IDEA 中按 <kbd>Ctrl</kbd> + <kbd>A</kbd> 全选后按 <kbd>Ctrl</kbd> + <kbd>V</kbd> 覆盖原有代码）：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">package</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">rarityeg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">helloworld</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">plugin</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">java</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">JavaPlugin</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">class</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">HelloWorld</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">extends</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">JavaPlugin</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    @</span><span style="color:var(--shiki-token-keyword);">Override</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onEnable</span><span style="color:var(--shiki-color-text);">() {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-function);">getLogger()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">info</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;Hello, world!&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>好啦，听我的，快点！写进去！</p><h2 id="创建插件标识" tabindex="-1">创建插件标识 <a class="header-anchor" href="#创建插件标识" aria-label="Permalink to &quot;创建插件标识&quot;">​</a></h2><p>接下来我们要告知 Bukkit：「有了插件哦！」</p><p>右键 <code>src</code>，「New」、「File」，输入 <code>plugin.yml</code>，这个文件的名字不能修改，否则 Bukkit 不读。</p><p>其中输入以下内容：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">HelloWorld</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">main</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">rarityeg.helloworld.HelloWorld</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">version</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1.0</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">api-version</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1.16</span></span></code></pre></div><p>这样我们的第一个插件就编写好了。</p><p>你现在肯定希望我讲一讲你刚刚输入了什么，嗯……不是现在，我们要先测试这个插件。</p>`,46),n=[e];function r(p,i,c,k,d,h){return a(),o("div",null,n)}const g=s(t,[["render",r]]);export{y as __pageData,g as default};
