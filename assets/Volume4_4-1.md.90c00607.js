import{_ as s,o,c as a,S as n}from"./chunks/framework.7f03344f.js";const d=JSON.parse('{"title":"4-1 NMS 与反射","description":"","frontmatter":{},"headers":[],"relativePath":"Volume4/4-1.md","filePath":"docs/Volume4/4-1.md","lastUpdated":1698403164000}'),t={name:"Volume4/4-1.md"},e=n(`<h1 id="_4-1-nms-与反射" tabindex="-1">4-1 NMS 与反射 <a class="header-anchor" href="#_4-1-nms-与反射" aria-label="Permalink to &quot;4-1 NMS 与反射&quot;">​</a></h1><h2 id="minecraft-原生服务端" tabindex="-1">Minecraft 原生服务端 <a class="header-anchor" href="#minecraft-原生服务端" aria-label="Permalink to &quot;Minecraft 原生服务端&quot;">​</a></h2><p>Bukkit 是通过修改服务端并包装了一层 API 实现的。也正因为是包装，Bukkit 的 API 无法覆盖 Minecraft 服务端的各个角落。总有一些高级的功能被遗漏掉，比如：NBT 标签。</p><p>这时候我们不得不请求 NMS 的支援。</p><p><em>禁止在 NMS 后带上 K 右边，分号左边，O 下边的那个字符。这是使用 NMS 时最重要的事情（笑）！</em></p><p>NMS 的类都位于 <code>net.minecraft.server.v1_16_R3</code> （对于 1.16.5 而言）这个包下。最后那个包名会随反混淆和 API 的版本不同而变化。（1.15.2 版本下则是 <code>v1_15_R1</code>）</p><p><em>NMS 这个缩写来源于 <code>net.minecraft.server</code> 这个包的包路径首字母，但笔者总觉得它也可以是「Native Minecraft Server」的缩写，是我的错觉吗？</em></p><p>比如，如果要使用 NBT 标签，由于 Bukkit 没有提供这个功能，我们只能这样做：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BARRIER</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 随便创建一个 ItemStack，这是 Bukkit 的 ItemStack</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">net</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">minecraft</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">server</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">v1_16_R3</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> imNMS </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">CraftItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asNMSCopy</span><span style="color:var(--shiki-color-text);">(im);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 转换为 NMS 物品</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">NBTTagCompound</span><span style="color:var(--shiki-color-text);"> nbt </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">imNMS</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getTag</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 获得 NBT</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (nbt </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    nbt </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">NBTTagCompound()</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 防止 NullPointerException</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">nbt</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">set</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;someValue&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">NBTTagString</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">create</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;This is a string.&quot;</span><span style="color:var(--shiki-color-text);">));</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 增加 NBT 键值对</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">imNMS</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setTag</span><span style="color:var(--shiki-color-text);">(nbt);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 把 NBT 返回给 imNMS，就和 ItemMeta 一样</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">CraftItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asBukkitCopy</span><span style="color:var(--shiki-color-text);">(imNMS);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 重新定义 im 变量，将 imNMS 转换为原来的 Bukkit ItemStack</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 之后的处理……</span></span></code></pre></div><p>第二行中，由于 <code>net.minecraft.server.v1_16_R3.ItemStack</code> 和 <code>org.bukkit.inventory.ItemStack</code> 都叫 <code>ItemStack</code>，为了让 Java 区分，其中一个必须带上完整的路径。</p><p>NMS 功能使用起来虽然没有 Bukkit API 那么简便，但原理还是比较清晰的。</p><p>但是，如果这样的调用真的都是这么简单的话，我也没必要编写这一章了，问题就在这里出现了……</p><h2 id="糟糕的兼容性" tabindex="-1">糟糕的兼容性 <a class="header-anchor" href="#糟糕的兼容性" aria-label="Permalink to &quot;糟糕的兼容性&quot;">​</a></h2><p>因为要使用 NMS 的各种类，我们代码的开头加上了：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">net</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">minecraft</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">server</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">v1_16_R3</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">NBTTagCompound</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">net</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">minecraft</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">server</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">v1_16_R3</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">NBTTagString</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">org</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">craftbukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">v1_16_R3</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">inventory</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-keyword);">CraftItemStack</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>然后你编译这个插件，在 1.16.X 的服务端上运行，效果很好。</p><p>然而，当你把这个插件拿到 1.15.2 的服务端上运行时……</p><p><strong>1.15.2 的 Bukkit 根本就不知道什么是 <code>v1_16_R3</code>！它只认识 <code>v1_15_R1</code>！</strong></p><p>不同版本的 Bukkit 服务端中，<code>net.minecraft.server.v?_??_R?</code> 是不一样且不确定的。</p><p>所以，对于从目前 MCBBS 规定的最低不过期版本 1.12.2 开始，我们要为每一个 <code>v1_1X_RX</code> 编写相应的代码，这些代码中还有很多是重复的！</p><p>功能基本一样，就为了一个包名，就得重新编译，不仅要下载各个版本的服务端，服主下载时还容易弄错，什么都不做，还要编译出如此多的文件，这就是浪费。</p><p>但是，很多有名的插件都使用了 NMS 功能（例如更多附魔），但我们却没见到它们这么做，因此肯定有好的解决方法。</p><p>实际上 Java 已经为我们提供了解决这个问题的方法，只要我们能够好好利用就行了~</p><h2 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h2><p>反射为 Java 的兼容性做出了质的改变。虽然使用反射需要编写非常多的代码和错误处理，但这是值得的，反射会给你带来足够的回报！</p><p>反射不需要导入任何库，相关功能包括在 <code>java.lang.reflect</code> 这个包中，这个包已经内置在 JVM 标准库中了。</p><h3 id="什么是反射" tabindex="-1">什么是反射 <a class="header-anchor" href="#什么是反射" aria-label="Permalink to &quot;什么是反射&quot;">​</a></h3><p>反射的原理很简单：<strong>类本身也是一个对象</strong>。</p><p>请再品味一下。</p><p><strong>类本身也是一个对象</strong>。</p><p>那就是说，我们可以使用类来描述一个类。</p><p>说形象点，就是：<strong>蓝图的蓝图</strong>。</p><p>这就叫反射。Java 在运行中会针对它加载的每一个类生成这个类的对象，并将它放在内存的某处。因此，即使在编译时出于某种原因无法指定，也可以在运行时重新得到这个类的信息（照着蓝图画一张蓝图）。</p><hr><p>我们知道，<code>ItemStack</code>（NMS 中的）一定存在，因为 Bukkit 要用到它，虽然<strong>因为运行环境版本不同</strong>，我们不知道它的<strong>具体包名</strong>，但是，它就在那里！一定在内存的哪个地方！</p><p>这就像你要找你的朋友，你知道 TA 的名字，你知道 TA 家在某省某市某区，只是不知道道路，那么，虽然没有直接寻找那么简单，但也一定可以找到 TA 的！</p><p>说白了，我们知道 NMS 的类一定位于 <code>net.minecraft.server.v?_??_R?</code> 这个包下，我们只需要这样一个功能：<strong>根据名称尝试查找一个类</strong>。</p><p>Java 中有个类具有这样的功能，这个类叫 <code>Class</code>，它描述一个类，它有一个静态方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Class&lt;</span><span style="color:var(--shiki-color-text);">T</span><span style="color:var(--shiki-token-keyword);">&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">forName(</span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> name)</span><span style="color:var(--shiki-color-text);"> throws </span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span></span></code></pre></div><p>如果找到了类，它就把类作为一个对象返回。否则触发 <code>ClassNotFoundException</code>。</p><h3 id="开始使用反射" tabindex="-1">开始使用反射 <a class="header-anchor" href="#开始使用反射" aria-label="Permalink to &quot;开始使用反射&quot;">​</a></h3><p>首先我们需要知道当前服务端的版本，否则我们就不知道该尝试加载哪几个类，获取版本很简单：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">[] versions </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMinecraftVersion</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">split</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;\\\\.&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 获得版本号并分割</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> major </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> versions[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">]; </span><span style="color:var(--shiki-token-comment);">// 1</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> minor </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> versions[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">]; </span><span style="color:var(--shiki-token-comment);">// 16</span></span></code></pre></div><p>然而 Bukkit 一个很缺德的地方就是：这只能确定 NMS 包的前两位，而第三位是不知道的！（<code>v1_16_R?</code>）</p><p><em>实际上这不能完全怪 Bukkit，Mojang 也有份。</em></p><p>所以我们不得不进行几次尝试。</p><p>目前已知的是，<code>v1_16_R?</code> 中的 <code>?</code> 是一个整数，且都是从 1 开始的。</p><p>所以我们可以开始尝试：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> revision </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;-1&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> NMSBaseHead </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;net.minecraft.server.v&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> major </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> minor </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_R&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">9</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> versionTest </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> NMSBaseHead </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> i;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(versionTest </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.ItemStack&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        revision </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">; </span><span style="color:var(--shiki-token-comment);">// 只有上一句没有错误才会执行到这里</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">break</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span><span style="color:var(--shiki-color-text);"> ignored) {}</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 异常直接忽略掉</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p><code>Class.forName</code> 用指定的路径寻找类。这里我们查找的是 <code>net.minecraft.server.v?_?_R?.ItemStack</code>，其实查找别的 NMS 类也是一样的。</p><p><code>for</code> 是计数循环，大括号中的内容将被不断执行，直到 <code>i &lt;= 9</code> 不成立。<code>i++</code> 是 <code>i = i + 1</code> 的缩写。<code>int i = 1</code> 只在循环开始时执行一次用来初始化。</p><p><code>forName</code> 会在上文我们提到的「内存的某处」（保存类信息的地方）那里尝试找到我们指示的类，它找不到类时抛出 <code>ClassNotFoundException</code> 异常。只有没有抛出异常时，<code>break</code> 才会执行。</p><p>我们尝试从 <code>R1</code> 到 <code>R9</code> 的全部包，如果还找不到就认为不存在，出现错误。如果找到了，就记录下这个版本号。</p><p>这样版本号确定了，NMS 包名也就确定了。</p><hr><p>接下来我们还是以 NBT 为例说明反射的使用。请各位读者时刻记住：<strong>类也是一个对象</strong>，同样，<strong>方法也是一个对象</strong>。（万物皆可为对象）</p><p>看看我们之前的代码，第一步是 <code>CraftItemStack.asNMSCopy</code>。</p><p>通过上面（不使用反射的 NMS 的代码中）我们的 <code>import</code> 语句，我们知道 <code>CraftItemStack</code> 类位于 <code>org.bukkit.craftbukkit.v?_??_R?</code> 下。</p><p>首先我们需要找到 <code>CraftItemStack</code> 这个类，还是使用 <code>Class.forName</code>，不过由于版本号已经知道了，因此不需要尝试，直接「精准采集」：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-constant);">revision</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;-1&quot;</span><span style="color:var(--shiki-color-text);">)) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 找到了合适的版本</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> NMSPackage </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> NMSBaseHead </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> revision; </span><span style="color:var(--shiki-token-comment);">// 将两段拼接在一起</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> CraftBukkitPackage </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;org.bukkit.craftbukkit.v&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> major </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> minor </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_R&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> revision; </span><span style="color:var(--shiki-token-comment);">// 有些功能位于 org.bukkit.craftbukkit 中，这个被称为 OBC</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 上面两行代码将两个包名「组装」好以便等会使用</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; craftItemStack </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(CraftBukkitPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.inventory.CraftItemStack&quot;</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 查找 org.bukkit.craftbukkit.v?_??_R?.inventory.CraftItemStack</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 后面的代码会写在这里</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">(); </span><span style="color:var(--shiki-token-comment);">// 按道理讲不会再出错了，如果出错就是 NMS 的问题了（不存在的类）</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这里的 <code>&lt;?&gt;</code> 是 <code>Class</code> 的一个模板化（<code>Class</code> 也是一个模板类，似曾相识？），本来这里应该使用被读出来的类进行模板化，但由于我们不知道（事实上是没法让 Java 知道）用 <code>forName</code> 读出的对象是什么类型，因此只能打 <code>?</code> 兜底（Java 自动判断）。</p><p>此外，这里还使用了 <code>org.bukkit.craftbukkit</code> 包，这个包和 <code>net.minecraft.server</code> 一样，都会基于版本而改变。</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>到底怎么回事</strong>？</p><p><code>org.bukkit.craftbukkit</code> 包和 NMS 一样，使用 <code>v?_??_R?</code> 表示版本，这个包简称为 OBC。CraftBukkit 是对 NMS 进行的一次封装（包括反混淆等）。</p><p>如果你观察过 <code>org.bukkit</code> 下其它的正常类，你会发现它们大部分是 <code>interface</code>，也就是接口，而不是常见的 <code>class</code>，实际上 CraftBukkit 才是 Bukkit 的实现。它是 Bukkit 与 Minecraft 原版之间的一个桥梁。也正是如此，CraftBukkit 的代码中不得不使用 <code>net.minecraft.server.v?_??_R?</code> 中的包，导致 CraftBukkit 自身也被「污染」，它的包名也需要拼接而成。</p><p>这里我们使用的 NBT 功能，Bukkit API 没有提供，但 CraftBukkit 提供了，我们就拿来使用。</p><p>本教程中我们不对 NMS 与 OBC 区别称呼，如果读者觉得不能容忍，那只能麻烦各位自己在脑中转换一下了。</p></div><hr><p>继续。</p><p>找到这个类后，我们先像之前一样创建 <code>ItemStack</code>（Bukkit API 中的），这里正常创建就行了：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BARRIER</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>然后我们需要调用 <code>asNMSCopy</code> 方法，那么首先要找到这个方法（方法也是个对象！！！）：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> asNMSCopy </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">craftItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;asNMSCopy&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p><code>getMethod</code> 根据<strong>方法名</strong>和<strong>参数列表</strong>进行查找，听不懂就看图：</p><p><img src="https://s2.loli.net/2023/06/23/4R7YSwQji6zoyIs.png" alt="METHOD.png"></p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>有鉴于图床失效、原图丢失，上图系定稿后再行修补，图文未必贴合。</p></div><p>这里的第一个参数是方法名，后面的是参数类型列表，多个参数按顺序往后排即可。</p><p><code>forName</code> 查出来的就是该类的对象（蓝图的蓝图），对于已知的类，使用 <code>类名.class</code> 直接获得它所属类的对象。</p><p>这里还会抛出 <code>NoSuchMethodException</code> 异常（如果找不到这个方法），需要在后面捕获。</p><p>然后调用这个方法，使用 <code>Method</code> 对象的 <code>invoke</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-color-text);"> NMSItem </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">asNMSCopy</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> im);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 这里的 NMSItem 就是返回值，但我们没办法为它指定类，只好用兜底的 Object</span></span></code></pre></div><p><code>invoke</code> 的第一个参数是实例，这是什么意思呢？</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 如果原来的方法是这样：</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">im</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(itemMeta);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 用反射就要写成这样（获取方法的步骤已省略）：</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">method</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(im</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> itemMeta);</span></span></code></pre></div><p>第一个参数指的是<strong>要以哪个对象的身份调用这个方法</strong>，后面的是该方法的剩余参数。由于 <code>asNMSCopy</code> 是一个类（静态）方法，因此不需要指定对象，那就设为 <code>null</code>。听不懂？看图看图……</p><p><img src="https://s2.loli.net/2023/06/23/4Uw3FqoVxk7JCpA.png" alt="INVOKE.png"></p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>有鉴于图床失效、原图丢失，上图系定稿后再行修补，图文未必贴合。</p></div><p><em><code>invoke</code> 还会抛出 <code>IllegalAccessException</code> 和 <code>InvocationTargetException</code>（如果本来是 <code>private</code> 却被直接 <code>invoke</code>，或者该对象不存在这个方法时会触发），错误真多啊！不过仔细想想也在情理之中，毕竟我们在做本来应该由 Java 来做的事情嘛。</em></p><p>下一步我们需要获得 NBT，那么我们需要得到 <code>ItemStack</code> 和 <code>NBTTagCompound</code> 两个类。<code>ItemStack</code> 类用来调用 <code>getTag</code> 方法，而 <code>NBTTagCompound</code> 用于在没有 NBT 时创建新对象。</p><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>当心同名</strong>！</p><p>这里的 <code>ItemStack</code> 是 <code>net.minecraft.server.v?_??_R?</code> 包下的 <code>ItemStack</code>，不是 API 中的 <code>org.bukkit.inventory.ItemStack</code>！</p></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; itemStack </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.ItemStack&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; nbtTagCompound </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.NBTTagCompound&quot;</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>然后调用 <code>getTag</code> 获得 NBT，并判断是不是空：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> getTag </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">itemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;getTag&quot;</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// getTag 方法</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-color-text);"> nbt </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">getTag</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(NMSItem); </span><span style="color:var(--shiki-token-comment);">// 执行</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (nbt </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) { </span><span style="color:var(--shiki-token-comment);">// null 判定还是一样</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">Constructor</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; createNewTag </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">nbtTagCompound</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getConstructor</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 获得构造方法，默认的构造方法没有参数，所以我们也不传</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    nbt </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">createNewTag</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">newInstance</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 创建新实例，相当于 new</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这很简单，同时这里又抛出了异常 <code>InstantiationException</code>，我们还是把它捕获写在下面。</p><hr><p>这样总算准备好 NBT 了。</p><p>然后我们需要调用 <code>set</code> 方法设置 NBT，这就需要找到 <code>NBTTagString</code> 类。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; nbtTagString </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.NBTTagString&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; nbtBase </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.NBTBase&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> setNBTString </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">nbtTagCompound</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;set&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">String</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> nbtBase);</span></span></code></pre></div><p>还记得吗，<code>set</code> 方法的两个参数分别是 <code>String</code> 和 <code>NBTBase</code>（反编译可知），我们将这两个类传给 <code>getMethod</code> 让它帮我们找到正确的方法。再说一遍——在 <code>getMethod</code> 中，<strong>已知类用 <code>.class</code> 直接取得，未知类用 <code>forName</code> 查找的结果</strong>。（总之你传入的是一个 <code>Class</code> 对象就行了）</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>到底怎么回事</strong>？</p><p>你可能会问，刚刚我们使用的明明是 <code>NBTTagString</code> 啊，为什么这里要用 <code>NBTBase</code> 呢？</p><p>实际上在 <code>NBTTagCompound</code> 类中，<code>set</code> 方法只有一个，它的参数是 <code>NBTBase</code>，<code>NBTBase</code> 是 <code>NBTTagString</code> 的父类，刚刚我们只是「碰巧」放入了 <code>NBTTagString</code> 而已。</p><p>但 <code>getMethod</code> 没有这么强大，它不会查找参数类的子类，因此这里只能用 <code>NBTBase</code> 来查找了。</p></div><p>然后我们需要获得 <code>NBTTagString.create</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> createNBTTagString </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">nbtTagString</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;create&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">String</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>然后 <code>invoke</code> 一下，获得一个 <code>NBTTagString</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-color-text);"> stringValue </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">createNBTTagString</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;This is a string.&quot;</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>这和 <code>NBTTagString.create(&quot;This is a string&quot;);</code> 一样。</p><p>然后终于可以进行 <code>set</code> 了！</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">setNBTString</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(nbt</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;someValue&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> stringValue);</span></span></code></pre></div><p>这样就完成了 <code>set</code>，然后我们需要把这个 NBT 返回给 <code>NMSItem</code>，这需要用到 <code>setTag</code> 方法，不用说，我们还要获取：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> setTag </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">itemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;setTag&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> nbtTagCompound);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">setTag</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(NMSItem</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> nbt);</span></span></code></pre></div><p>最后调用 <code>asBukkitCopy</code> 重新创建 <code>im</code> 变量：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> asBukkitCopy </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">craftItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;asBukkitCopy&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> itemStack);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (ItemStack) </span><span style="color:var(--shiki-token-constant);">asBukkitCopy</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> NMSItem);</span></span></code></pre></div><p>这里用了强制类型转换返回到 <code>ItemStack</code>（Bukkit API 中的）。</p><p>最后我们来看错误处理：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">NoSuchMethodException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">IllegalAccessException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">InvocationTargetException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">InstantiationException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>捕捉了这么多错误，果然反射是个不让人省心的呢~（笑）</p><p>最后贴出完整代码，注释给出了和上面直接使用 NMS 写代码时的对应关系：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);">[] versions </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Bukkit</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMinecraftVersion</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">split</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;\\\\.&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> major </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> versions[</span><span style="color:var(--shiki-token-constant);">0</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> minor </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> versions[</span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">];</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> revision </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;-1&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> NMSBaseHead </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;net.minecraft.server.v&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> major </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> minor </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_R&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">for</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">int</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">1</span><span style="color:var(--shiki-color-text);">; i </span><span style="color:var(--shiki-token-keyword);">&lt;=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">9</span><span style="color:var(--shiki-color-text);">; i</span><span style="color:var(--shiki-token-keyword);">++</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> versionTest </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> NMSBaseHead </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> i;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(versionTest </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.ItemStack&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        revision </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> i </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">break</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span><span style="color:var(--shiki-color-text);"> ignored) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">!</span><span style="color:var(--shiki-token-constant);">revision</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">equals</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;-1&quot;</span><span style="color:var(--shiki-color-text);">)) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> NMSPackage </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> NMSBaseHead </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> revision;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> CraftBukkitPackage </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;org.bukkit.craftbukkit.v&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> major </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> minor </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;_R&quot;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> revision;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// 以上都是准备工作，下面正式开始</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-keyword);">try</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; craftItemStack </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(CraftBukkitPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.inventory.CraftItemStack&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BARRIER</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> asNMSCopy </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">craftItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;asNMSCopy&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">ItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-color-text);"> NMSItem </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">asNMSCopy</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> im);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 相当于 CraftItemStack.asNMSCopy(im); </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; itemStack </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.ItemStack&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; nbtTagCompound </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.NBTTagCompound&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> getTag </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">itemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;getTag&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-color-text);"> nbt </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">getTag</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(NMSItem);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 相当于 NBTTagCompound nbt = imNMS.getTag();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">if</span><span style="color:var(--shiki-color-text);"> (nbt </span><span style="color:var(--shiki-token-keyword);">==</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-keyword);">Constructor</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; createNewTag </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">nbtTagCompound</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getConstructor</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            nbt </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">createNewTag</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">newInstance</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-comment);">// 相当于 nbt = new NBTTagCompound();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; nbtTagString </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.NBTTagString&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Class</span><span style="color:var(--shiki-color-text);">&lt;</span><span style="color:var(--shiki-token-keyword);">?</span><span style="color:var(--shiki-color-text);">&gt; nbtBase </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Class</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">forName</span><span style="color:var(--shiki-color-text);">(NMSPackage </span><span style="color:var(--shiki-token-keyword);">+</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;.NBTBase&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> setNBTString </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">nbtTagCompound</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;set&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">String</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> nbtBase);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> createNBTTagString </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">nbtTagString</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;create&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">String</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">class</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Object</span><span style="color:var(--shiki-color-text);"> stringValue </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">createNBTTagString</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;This is a string.&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">setNBTString</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(nbt</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;someValue&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> stringValue);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 相当于 nbt.set(&quot;someValue&quot;, NBTTagString.create(&quot;This is a string.&quot;));</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> setTag </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">itemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;setTag&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> nbtTagCompound);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">setTag</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(NMSItem</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> nbt);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 相当于 imNMS.setTag(nbt);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-keyword);">Method</span><span style="color:var(--shiki-color-text);"> asBukkitCopy </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">craftItemStack</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getMethod</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;asBukkitCopy&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> itemStack);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (ItemStack) </span><span style="color:var(--shiki-token-constant);">asBukkitCopy</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">invoke</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> NMSItem);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 相当于 im = CraftItemStack.asBukkitCopy(imNMS);</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 主要处理到此结束，以下为异常捕获</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    } </span><span style="color:var(--shiki-token-keyword);">catch</span><span style="color:var(--shiki-color-text);"> (</span><span style="color:var(--shiki-token-keyword);">ClassNotFoundException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">NoSuchMethodException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">IllegalAccessException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">InvocationTargetException</span><span style="color:var(--shiki-color-text);"> | </span><span style="color:var(--shiki-token-keyword);">InstantiationException</span><span style="color:var(--shiki-color-text);"> e) {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">e</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">printStackTrace</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 出错我们也没办法，只能输出了</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p><em>要测试上面的代码，只需要把它写在 <code>onEnable</code> 方法中就可以了，如果运行正常，它就什么都不做（笑）。当然不可能有异常的啦，笔者已经进行过测试了~</em></p><h3 id="反射总结" tabindex="-1">反射总结 <a class="header-anchor" href="#反射总结" aria-label="Permalink to &quot;反射总结&quot;">​</a></h3><p>其实我们只是在使用类与方法之前先获取了它们而已（万物皆可对象，再说一遍），反射和正常的代码没什么区别。</p><p>不过这样写确实很累，就像在两座山之间走钢丝，还要一边看着地图。万一哪个地方本来应该写成 <code>NMSPackage + &quot;.ItemStack&quot;</code>，结果不小心把 <code>.</code> 漏掉了，那可就很麻烦了。编写反射的代码时，我们不得不照着原来的代码，提心吊胆地进行编写。</p><p>但是我们的努力很快就得到了回报！以上代码可以写在一个单独的方法中：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">static</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setNBTString(</span><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-token-function);"> im</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> tag</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-token-function);"> value)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>以后设置任何 NBT 都只需要：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">setNBTString(im</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;anotherValue&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;BlahBlah&quot;</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>并且这个方法可以在任何 Bukkit 的服务端版本中工作！（实际上有时候会出问题，不过那毕竟是少数）</p><h3 id="反编译的重要性" tabindex="-1">反编译的重要性 <a class="header-anchor" href="#反编译的重要性" aria-label="Permalink to &quot;反编译的重要性&quot;">​</a></h3><p>在编写上述代码时，你可能尝试过到 JavaDocs 中查找 <code>net.minecraft.server</code> 包下的一些内容。很遗憾，NMS 的内容没有被记载在 JavaDocs 中。目前比较方便的方法是使用反编译：</p><ul><li>先按照常规的方法写好代码（不使用反射）</li><li>按着 <kbd>Ctrl</kbd> 并用左键点击想知道的类，IDEA 就会帮你反编译它，并显示出所有的方法</li><li>按 <kbd>Ctrl</kbd> + <kbd>F</kbd> 进行查找</li><li>知道了各个方法的类型后，我们就可以 <code>getMethod</code> 啦~</li></ul><p>另外你还可以利用 IDEA 的全局搜索：按两下 <kbd>Shift</kbd>，输入你要查找的类名，在上方菜单中选择「Classes」，就可以进行搜索啦~</p><h2 id="更好的解决方案" tabindex="-1">更好的解决方案？ <a class="header-anchor" href="#更好的解决方案" aria-label="Permalink to &quot;更好的解决方案？&quot;">​</a></h2><p>实际上解决 NMS 问题还有很多别的方法，例如使用 Java Agent，或者动态修改字节码，或者……</p><p>但是笔者目前不准备介绍它们。</p><p>的确，反射的代码繁琐，编写难度大，而且会带来额外的性能开销。不过，<strong>这都不足以成为你拒绝反射的理由</strong>。</p><ol><li>掌握了反射，再学习别的方法会易如反掌</li><li>反射不需要额外的依赖，并且经过 Java 的长期优化，性能已经相当高</li><li>反射有利于你学习面向对象思想</li><li>反射的实现稳定，其它的插件由它们的作者维护，要求可能不会很严格，而反射由 Oracle（Hotspot JVM）或 Eclipse（OpenJ9 JVM）维护</li></ol><p>在所有不需要用到其它库/插件的环境中，反射是<strong>最为简单的</strong>，而依靠其它的插件……抱歉，不是我不相信其它插件，但是 <code>java.lang.reflect</code> 包和 <code>xxx.xxx</code> 包相比，能够包含在 <code>java</code> 这个包中的，应该都是更好的实现吧？</p><p>也许你想用更好的解决方法，只要你能达到目的，笔者仍然全力支持，毕竟我们的教程叫做「插件开发教程」，不叫「反射学习教程」嘛~</p>`,132),r=[e];function l(i,p,c,k,y,v){return o(),a("div",null,r)}const u=s(t,[["render",l]]);export{d as __pageData,u as default};
