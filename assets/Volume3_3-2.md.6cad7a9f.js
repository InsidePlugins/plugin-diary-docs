import{_ as s,o as a,c as o,S as e}from"./chunks/framework.7f03344f.js";const y=JSON.parse('{"title":"3-2 奇怪的物品","description":"","frontmatter":{},"headers":[],"relativePath":"Volume3/3-2.md","filePath":"docs/Volume3/3-2.md","lastUpdated":1698403164000}'),t={name:"Volume3/3-2.md"},n=e(`<h1 id="_3-2-奇怪的物品" tabindex="-1">3-2 奇怪的物品 <a class="header-anchor" href="#_3-2-奇怪的物品" aria-label="Permalink to &quot;3-2 奇怪的物品&quot;">​</a></h1><p>这节里面我们研究下 <code>ItemStack</code>。</p><h2 id="物品数量" tabindex="-1">物品数量 <a class="header-anchor" href="#物品数量" aria-label="Permalink to &quot;物品数量&quot;">​</a></h2><p>通过使用 <code>ItemStack</code> 的 <code>setAmount</code> 方法可以设置物品的数量（超过堆叠上限时可能会出问题）。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> item </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BARRIER</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setAmount</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">32</span><span style="color:var(--shiki-color-text);">); </span><span style="color:var(--shiki-token-comment);">// 设置为 32 个</span></span></code></pre></div><p><code>setAmount</code> 有其对应的 <code>getAmount</code> 方法返回当前的数量。</p><h2 id="物品信息" tabindex="-1">物品信息 <a class="header-anchor" href="#物品信息" aria-label="Permalink to &quot;物品信息&quot;">​</a></h2><p><code>ItemStack</code> 的信息存储在一个对象中（废话），这个对象是一个 <code>ItemMeta</code> 类的实例。物品名称、物品描述等都由这个对象控制。</p><p>获取 <code>ItemMeta</code>，只需要调用 <code>getItemMeta</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> im </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span></code></pre></div><p>Bukkit 这里有个很缺德的地方。</p><div class="danger custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M10 14C10 15.1 9.1 16 8 16 6.9 16 6 15.1 6 14 6 12.9 6.9 12 8 12 9.1 12 10 12.9 10 14Z&#39;/%3E%3Cpath d=&#39;M10 1.6C10 1.2 9.8 0.9 9.6 0.7 9.2 0.3 8.6 0 8 0 7.4 0 6.8 0.2 6.5 0.6 6.2 0.9 6 1.2 6 1.6 6 1.7 6 1.8 6 1.9L6.8 9.6C6.9 9.9 7 10.1 7.2 10.2 7.4 10.4 7.7 10.5 8 10.5 8.3 10.5 8.6 10.4 8.8 10.3 9 10.1 9.1 9.9 9.2 9.6L10 1.9C10 1.8 10 1.7 10 1.6Z&#39;/%3E%3C/svg%3E" style="background-color:#DA0B50;clip-path:circle();" width="24px" height="24px"> <strong>当心</strong>！</p><p>Bukkit 在获取 <code>ItemMeta</code> 时，返回的是<strong>一个副本</strong>，我们对它进行修改后，还需要使用 <code>item.setItemMeta</code> 返回给物品堆。这就像读写文件一样：内存中的内容如果不保存，就不会写入磁盘。</p><p>很快你就会发现，这种做法实在太不方便了，但我们也没办法，这是规定。</p></div><h2 id="自定义物品信息" tabindex="-1">自定义物品信息 <a class="header-anchor" href="#自定义物品信息" aria-label="Permalink to &quot;自定义物品信息&quot;">​</a></h2><p>普通的物品信息由两部分组成：</p><ul><li>物品名字</li><li>物品介绍</li></ul><p>这两部分都是可以使用<strong>文字样式</strong>（<code>ChatColor</code>）的，可以给文字染成不同的颜色。</p><p><em>实际上物品信息还包含 NBT 标签，但由于 NBT 是一个 NMS 功能（Minecraft 服务端的底层功能），要跨版本使用它需要更多的步骤（反射），我们会在更高级的部分见到它。</em></p><h3 id="自定义物品名称" tabindex="-1">自定义物品名称 <a class="header-anchor" href="#自定义物品名称" aria-label="Permalink to &quot;自定义物品名称&quot;">​</a></h3><p>要设置物品的名字，可以使用 <code>ItemMeta</code> 类的 <code>setDisplayName</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">im</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setDisplayName</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;这个东西的名字&quot;</span><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>这里可以使用 <code>ChatColor.XXX</code> 加在前面来设置颜色。</p><p><code>setDisplayName</code> 有其对应的 <code>getDisplayName</code> 方法用于获得物品的显示名称。</p><h3 id="自定义物品介绍" tabindex="-1">自定义物品介绍 <a class="header-anchor" href="#自定义物品介绍" aria-label="Permalink to &quot;自定义物品介绍&quot;">​</a></h3><p>啥是物品介绍捏？你应该看过苦力怕掉落的音乐唱片吧？</p><blockquote><p><strong>音乐唱片</strong> ← 这是 <code>DisplayName</code> 显示名称</p><p>C418 - Cat ← 这是 <code>Lore</code> 介绍</p></blockquote><p>物品的介绍稍微有点复杂，它是一个 <code>List&lt;String&gt;</code> 类，使用 <code>setLore</code> 方法进行设置：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">im</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setLore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Arrays</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">asList</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;第一行&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;第二行&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;blahblah&quot;</span><span style="color:var(--shiki-color-text);">));</span></span></code></pre></div><p><code>Arrays.asList</code> 是一个快速创建 <code>List</code> 的方法，它按顺序把几个参数「组装」成一个 <code>List</code>。</p><p>物品介绍一般想写多长就可以多长，但把《哈姆雷特》读进来再 <code>setLore</code> 肯定会出问题。此外，就算 Minecraft 能够忍受，你的玩家很可能没法忍受！（记住，窗口的大小是有限的）</p><p><em>附魔并不是 <code>Lore</code> 的一部分，附魔保存在物品的 NBT 中。</em></p><p>同样，<code>setLore</code> 有其对应的 <code>getLore</code> 方法获得物品的介绍。</p><h2 id="物品信息的子类" tabindex="-1">物品信息的子类 <a class="header-anchor" href="#物品信息的子类" aria-label="Permalink to &quot;物品信息的子类&quot;">​</a></h2><p><code>ItemMeta</code> 只有这些信息，但 <code>ItemMeta</code> 的子类有很多其它的功能。</p><h3 id="书本信息" tabindex="-1">书本信息 <a class="header-anchor" href="#书本信息" aria-label="Permalink to &quot;书本信息&quot;">​</a></h3><p>书本信息保存在 <code>BookMeta</code> 类中，它是 <code>ItemMeta</code> 的子类。书本能够进行设置书页等操作。</p><p>要获取 <code>BookMeta</code>，需要进行强制类型转换，同时，创建 <code>ItemStack</code> 时的材质<strong>必须是成书（<code>Material.WRITTEN_BOOK</code>）或者编写中的书（<code>Material.WRITING_BOOK</code>）</strong>！</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">BookMeta</span><span style="color:var(--shiki-color-text);"> bookMeta </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (BookMeta) </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span></code></pre></div><p>书本信息可以做很多的事情，设置书本内容是最常见的功能：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">bookMeta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setTitle</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;咏 e&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">bookMeta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setAuthor</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;咏士&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">bookMeta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setPages</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;第一页放一些 e&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;第二页中放更多的 e&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;eee\\neeeeeeeeeeeeeeeeeeeeeeeeeeee\\neeeeeeee&quot;</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 这三个方法都有对应的 getXXX 方法</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// Title、Author 和 Pages 都要设置，否则 Minecraft 会认为无效</span></span></code></pre></div><p>此外还可以通过 <code>setGeneration</code> 方法设置书的版本（「原版」、「副本」、「副本的副本」）。</p><p>返还时直接返还就好了：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(bookMeta);</span></span></code></pre></div><h3 id="药水信息" tabindex="-1">药水信息 <a class="header-anchor" href="#药水信息" aria-label="Permalink to &quot;药水信息&quot;">​</a></h3><p>这里我们只谈药水，不谈药水效果，那个东西我们到后面再说。</p><p>获取药水信息几乎和书本信息一样，只要你的 <code>Material</code> 是 <code>POTION</code>、<code>LINGERING_POTION</code> 或 <code>SPLASH_POTION</code> 就行。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">PotionMeta</span><span style="color:var(--shiki-color-text);"> pm </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> (PotionMeta) </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span></code></pre></div><p>药水同样可以设置一些药水独有的东西：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">pm</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setColor</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">Color(</span><span style="color:var(--shiki-token-constant);">223</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">48</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-token-function);"> </span><span style="color:var(--shiki-token-constant);">127</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// RGB 颜色</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">pm</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setBasePotionData</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">PotionData(</span><span style="color:var(--shiki-token-constant);">PotionType</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WATER</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 药水基础信息</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">pm</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addCustomEffect</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">null</span><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 添加药水效果——不要这样写！</span></span></code></pre></div><p><em><code>addCustomEffect</code> 那里不要像我一样写 <code>null</code>！会出问题！</em></p><p>这不是全部，这只是一部分，查询 JavaDocs 可以得到更多信息，另外，如果你不想在浏览器和 IDEA 之间切换，可以使用反编译……</p><div class="info custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 16 16&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M9.1 0C10.2 0 10.7 0.7 10.7 1.6 10.7 2.6 9.8 3.6 8.6 3.6 7.6 3.6 7 3 7 2 7 1.1 7.7 0 9.1 0Z&#39;/%3E%3Cpath d=&#39;M5.8 16C5 16 4.4 15.5 5 13.2L5.9 9.1C6.1 8.5 6.1 8.2 5.9 8.2 5.7 8.2 4.6 8.6 3.9 9.1L3.5 8.4C5.6 6.6 7.9 5.6 8.9 5.6 9.8 5.6 9.9 6.6 9.5 8.2L8.4 12.5C8.2 13.2 8.3 13.5 8.5 13.5 8.7 13.5 9.6 13.2 10.4 12.5L10.9 13.2C8.9 15.2 6.7 16 5.8 16Z&#39;/%3E%3C/svg%3E" style="background-color:#0B87DA;clip-path:circle();" width="24px" height="24px"> <strong>查看源代码</strong></p><p>在 IDEA 中，按着 <kbd>Ctrl</kbd> 并用左键单击类名（例如 <code>ItemMeta</code>）就可以查看它的源代码，IDEA 会将该类反编译并向你展示。或者，你也可以通过按两下 <kbd>Shift</kbd> 进行全局搜索。</p></div><hr><p>限于篇幅，我们无法介绍 <code>ItemMeta</code> 的全部子类（还有旗帜、装备、烟花等等等等），但不要着急。记得吗？我说过你在某个地方可以找到它们的用法，想不起来了？那我再说一遍：JavaDocs。</p><p>你可以在 <a href="https://papermc.io/javadocs/paper/1.16/org/bukkit/inventory/meta/ItemMeta.html" target="_blank" rel="noreferrer"><code>ItemMeta</code> 页面</a> 的「All Known Subinterfaces」那里找到它的子接口，点击就可以查看相应的类。JavaDocs 可谓是插件开发最重要的资料之一，本教程无法教给你 Bukkit 的所有内容，但它的 JavaDocs 可以，<strong>一定要会用 JavaDocs</strong>！</p>`,54),l=[n];function i(c,p,r,k,h,d){return a(),o("div",null,l)}const u=s(t,[["render",i]]);export{y as __pageData,u as default};
