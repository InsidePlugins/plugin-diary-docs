import{h as e,o as l,c as r,k as s,t as i,S as t}from"./chunks/framework.7f03344f.js";const p=t(`<h1 id="ac-3-3-cutecoin-part-3" tabindex="-1">AC-3-3 CuteCoin Part 3 <a class="header-anchor" href="#ac-3-3-cutecoin-part-3" aria-label="Permalink to &quot;AC-3-3 CuteCoin Part 3&quot;">​</a></h1><h2 id="启动服务端" tabindex="-1">启动服务端 <a class="header-anchor" href="#启动服务端" aria-label="Permalink to &quot;启动服务端&quot;">​</a></h2><p>将「CuteCoin」丢进 <code>plugins</code> 文件夹，启动一次服务端，<strong>保存服务端打开</strong>。</p><p>修改配置文件，输入合适的值（这里我只配置了 MySQL）：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">mysql</span><span style="color:var(--shiki-token-keyword);">:</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">use</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># false 以使用文件，true 以使用 MySQL</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">host</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">localhost</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 数据库主机</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">db-name</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">cutecoin</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 数据库名</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">username</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">root</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 用户名</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">password</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">mylittlepony</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 密码，这个根据你自己的设置</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">port</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">3306</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 端口</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">save-threshold</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">30</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);"># 数据库写入缓存时间，0 以禁用（仅在关闭时保存）</span></span></code></pre></div><p>同时我们还要在数据库中创建新的数据库：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">CREATE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">DATABASE</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">cutecoin</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p><strong>别急着重启服务器</strong>，在控制台输入：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">/reload confirm</span></span></code></pre></div><p>等一小会，配置就被重新加载了，这个指令也适用于插件代码的修改，怎么样，是不是很方便？</p><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>reload 指令可以用于热重载插件。服务端运行该指令时，会卸载各个插件，然后重新启动它们。在这一过程中，配置文件被重新读取。所谓「插件代码的修改」，是指开发者在 IDE 里修改插件的源代码并编译出一个新 Jar 文件以后，粘贴到服务端 plugins 目录内以替换原 Jar 文件的过程。开发者修改代码、编译、粘贴并替换文件时，无需关闭服务器。替换文件后，执行 reload 指令，即可卸载旧的插件，改用新的 Jar，运行新的代码。「热重载」一词，强调重载插件时无需关服。与热重载相对的，是重启服务器。关闭服务器时插件自然会被卸载，开启服务器时自然要加载插件。因而在服务器关闭之后、开启以前，可以修改配置、替换旧 Jar。开服时就能读取新配置、运行新的代码。</p><p>reload 指令并不完善，常常导致匪夷所思的问题。比如 William_Shi 调试自己的某个插件时发现，使用该指令会导致 <code>StackOverFlowError</code>，且没有任何报错堆栈，无法排查原因。又如，粘液科技插件的作者表示，如果使用该指令来安装粘液科技插件，可能会导致内存泄漏。详见 <a href="https://github.com/Slimefun/Slimefun4/wiki/Installing-Slimefun#how-to-install" target="_blank" rel="noreferrer">Slimefun4 Wiki</a> 中的内容。像 Plugman、Yum 等插件也是大同小异，它们是用于热重载插件的插件，提供了在服务端运行时加载、卸载单个插件的功能，但也不可能保证重载插件时不出问题。</p><p>编者谨按，用于重载插件的最好方法必然是重启服务器。如果一个插件在开启服务器时不产生报错，在服务端正常关闭时能恰当卸载，那就足够。至于输入 reload 指令后，无论产生什么报错，又何伤乎？在调试插件时，如果每次都重启服务器，往往失之低效，因此才把 reload 指令作为无可奈何的选择，惟有「方便」这一优点。而「稳定」则根本无从谈起。任何一个服主，如果要向自己的生产环境服务端内添加一个新插件，都应该重新启动服务器。（生产环境指正式上线给用户使用的程序，调试环境指内部测试的程序）。所以对插件开发者而言，只要插件在重启服务器时不会出错，就堪称合格。</p></div><p>重新加载之后：</p><p><img src="https://s2.loli.net/2022/04/15/Fqn7c9IuvrVkT8U.png" alt="SUCDB.png"></p><p>看上去是个不错的开始！</p><h2 id="开始测试" tabindex="-1">开始测试 <a class="header-anchor" href="#开始测试" aria-label="Permalink to &quot;开始测试&quot;">​</a></h2><p>打开 Minecraft 客户端，加入服务器。</p><h2 id="然后呢" tabindex="-1">然后呢？ <a class="header-anchor" href="#然后呢" aria-label="Permalink to &quot;然后呢？&quot;">​</a></h2>`,17),c=t('<p>虽然笔者也可以把调试的过程放在这里，但笔者更想看看你解决问题的能力。</p><hr><p>不知道如何下手？这里有些小提示：</p><ul><li>在聊天栏输入「货币名 数量」就可以获得相应的货币（测试使用）。</li><li>试试看，你会发现<strong>数据似乎无法正常保存</strong>，试着用 <code>info</code> 方法输出 <code>DIRTY_LIST</code> 的值，看看到底哪里出了问题吧！</li><li>为这个插件添加 API 和 CLI，以及 OP 用的指令。</li><li>测试完工后，记得<strong>删除测试代码</strong>！（不然就成了后门了！）</li></ul><p>我没有把完整的源代码仓库放在这里，因为源代码实际上在前面都已经展示了，笔者认为，如果你不亲手改好一个插件，你是无法体会到插件开发成功后的那种成就感的。另外，<strong>亲手输入代码</strong>，单纯的复制粘贴是没有用的！</p><h2 id="行动结束" tabindex="-1">行动结束 <a class="header-anchor" href="#行动结束" aria-label="Permalink to &quot;行动结束&quot;">​</a></h2><p>（一定要改完了再按这个按钮啊）</p>',7),k=s("p",null,[s("button",{type:"button",class:"btn-unconfirmed",style:{width:"100%",transition:"500ms"},onclick:"this.innerHTML=' ✓ 恭喜！';document.getElementById('hiddenEle').style.display = 'block';this.className='btn-confirmed';this.onclick=function(){};"}," ❔ 确认行动结束 ")],-1),h=s("div",{id:"hiddenEle",style:{display:"none"}},[s("blockquote",null,[s("p",null,"行动结果：最终胜利！")]),s("p",null,"恭喜！我想到这个时候你应该非常激动，嗯，这是你应得的。"),s("p",null,"到此为止，本教程的主要部分就落下帷幕了，听一首歌，然后前往最后一章，笔者还有一点想说的。"),s("iframe",{frameborder:"no",border:"0",marginwidth:"0",marginheight:"0",width:"100%",height:"86",src:"//music.163.com/outchain/player?type=2&id=28077561&auto=0&height=66"})],-1),g=JSON.parse('{"title":"AC-3-3 CuteCoin Part 3","description":"","frontmatter":{},"headers":[],"relativePath":"Volume8/AC-3-3.md","filePath":"docs/Volume8/AC-3-3.md","lastUpdated":1698403164000}'),d={name:"Volume8/AC-3-3.md"},_=Object.assign(d,{setup(y){const o=e(0),n=["单击开始事件还原","RarityEG：这次轮到你了。","RarityEG：找出程序 Bug 的方法，我在 AC-1-3 和 AC-1-4 中有提到过。","RarityEG：……","RarityEG：让我看看你的能力，就当是结业考试吧。","事件模拟已结束——单击重新模拟"];return(v,a)=>(l(),r("div",null,[p,s("div",{onClick:a[0]||(a[0]=u=>{o.value++}),class:"btn-event"},i(n[o.value%6]),1),c,k,h]))}});export{g as __pageData,_ as default};
