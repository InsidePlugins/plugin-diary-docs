import{_ as s,o,c as n,S as a}from"./chunks/framework.7f03344f.js";const u=JSON.parse('{"title":"5-7 Adventure API","description":"","frontmatter":{},"headers":[],"relativePath":"Volume5/5-7.md","filePath":"docs/Volume5/5-7.md","lastUpdated":1698403164000}'),t={name:"Volume5/5-7.md"},e=a(`<h1 id="_5-7-adventure-api" tabindex="-1">5-7 Adventure API <a class="header-anchor" href="#_5-7-adventure-api" aria-label="Permalink to &quot;5-7 Adventure API&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title"><img src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 1028 1024&#39; transform=&#39;scale(0.6)&#39; fill=&#39;%23fff&#39;%3E%3Cpath d=&#39;M1018.319924 112.117535q4.093748 9.210934 6.652341 21.492179t2.558593 25.585928-5.117186 26.609365-16.374994 25.585928q-12.281245 12.281245-22.003898 21.492179t-16.886712 16.374994q-8.187497 8.187497-15.351557 14.32812l-191.382739-191.382739q12.281245-11.257808 29.167958-27.121083t28.144521-25.074209q14.32812-11.257808 29.679676-15.863275t30.191395-4.093748 28.656239 4.605467 24.050772 9.210934q21.492179 11.257808 47.589826 39.402329t40.425766 58.847634zM221.062416 611.554845q6.140623-6.140623 28.656239-29.167958t56.289041-56.80076l74.710909-74.710909 82.898406-82.898406 220.038979-220.038979 191.382739 192.406177-220.038979 220.038979-81.874969 82.898406q-40.937484 39.914047-73.687472 73.175753t-54.242167 54.753885-25.585928 24.562491q-10.234371 9.210934-23.539054 19.445305t-27.632802 16.374994q-14.32812 7.16406-41.960921 17.398431t-57.824197 19.957024-57.312478 16.886712-40.425766 9.210934q-27.632802 3.070311-36.843736-8.187497t-5.117186-37.867173q2.046874-14.32812 9.722653-41.449203t16.374994-56.289041 16.886712-53.730448 13.304682-33.773425q6.140623-14.32812 13.816401-26.097646t22.003898-26.097646z&#39;/%3E%3C/svg%3E" style="background-color:#057E3D;clip-path:circle();" width="24px" height="24px"> <strong>编者注</strong></p><p>本节内容由 <a href="https://github.com/freeze-dolphin" target="_blank" rel="noreferrer">Freeze_Dolphin</a> 撰写，<a href="https://github.com/William-Shi233" target="_blank" rel="noreferrer">William_Shi</a> 校订。</p></div><h2 id="什么是-adventure-api" tabindex="-1">什么是 Adventure API <a class="header-anchor" href="#什么是-adventure-api" aria-label="Permalink to &quot;什么是 Adventure API&quot;">​</a></h2><p>在 5-6 节中，ThatRarityEG 道席已经介绍了 Minecraft 中的「奇特文本」，或称「富文本（Rich Text）」。比如，要向玩家发送一条聊天消息，内容为「Hello」，颜色为金色。「Hello」五个字符就是「纯文本（Plain Text）」。而颜色是金色的「Hello」，就是「富文本」。</p><p>要想发送这样的一条富文本聊天消息，传统写法是 <code>player.sendMessage(&quot;§6Hello&quot;)</code>，即用「§6」表示金色。在 1-1 节中，ThatRarityEG 曾提到「Minecraft 是 C/S 架构」，即云服务端会向客户端发送数据包以告知服务器内发生之事。插件欲向客户端发送消息时，实际上是令服务端向客户端发送了一个「聊天消息数据包」。在 1.16.5 版本下拦截数据包，可以发现数据包里并没有 <code>§6Hello</code> 字符串，只有一段 JSON 文本：</p><div class="language-JSON"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">{</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;extra&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> [</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;bold&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;italic&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;underlined&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;strikethrough&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;obfuscated&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;color&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;gold&quot;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      </span><span style="color:var(--shiki-token-keyword);">&quot;text&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;Hello&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  ]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">&quot;text&quot;</span><span style="color:var(--shiki-token-punctuation);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>这就是说，高版本 Minecraft 不再用分节符「§」来调整文本的颜色、下划线等格式。富文本都用 JSON 来表示。「§6」是旧版本的过时写法。但是如果调用 <code>sendMessage(String)</code> 直接发送上述 JSON 文本，客户端只会显示一串原封不动的 JSON。很显然，这是因为 Java 是一门面向对象的语言。上述 JSON 文本，不应该由插件开发者自己直接写出，而是应该由服务端抽象出某种表示富文本的类（假设其名为 <code>SomeKindOfRichTextClass</code>），把纯文本及其格式分别作为字段存储，然后提供一个序列化为 JSON 字符串的方法。插件开发者要发送消息时，就新建一个富文本类的实例，调整格式及文本，再调用服务端提供的 <code>sendMessage(SomeKindOfRichTextClass)</code> 方法将这个富文本对象发送给玩家。<code>sendMessage</code> 方法中，服务端要调用序列化方法，把富文本对象转成 JSON 字符串，之后把字符串作为数据包的一部分发送给玩家。</p><p>所以在 Spigot 服务端中，就有了 BungeeCord Chat API。被抽象出的富文本类是 <code>BaseComponent</code> 及其实现类。<code>sendMessage(BaseComponent)</code> 方法将 <code>BaseComponent</code> 作为参数。<code>ComponentSerializer</code> 类能将 <code>BaseComponent</code> 转为 JSON 字符串。而 Paper 又引入了一套新的 Adventure API。那么就会有新的类取代 <code>BaseComponent</code>，也会有新的 <code>sendMessage</code> 方法适配之。</p><p>在 Minecraft 中，不仅聊天消息支持富文本格式，以下内容亦然：</p><ul><li>实体的名称</li><li>血条的标题</li><li>计分板的标题与计分项的名称</li><li>物品堆的名称与 Lore</li><li>书本物品堆的内容</li><li>物品栏的标题</li><li>……</li></ul><p>上文提到，不可以直接将 JSON 字符串作为 <code>sendMessage</code> 方法的参数。同理，也不可能将 JSON 字符串作为 <code>ItemMeta#setDisplayName</code> 方法的参数。但是在 Spigot API 中，并不存在 <code>ItemMeta#setDisplayName(BaseComponent)</code> 方法。这也就是说，在聊天消息和书本内容以外的领域，开发者都只能用「§6」这样的旧写法来调整富文本格式。于是就出现了 Adventure API。</p><h2 id="为什么要介绍-adventure-api" tabindex="-1">为什么要介绍 Adventure API <a class="header-anchor" href="#为什么要介绍-adventure-api" aria-label="Permalink to &quot;为什么要介绍 Adventure API&quot;">​</a></h2><p>假如 Adventure API 仅仅只是添加了几个 <code>sendMessage</code>、<code>setDisplayName</code> 这样的方法，那么本教程并不需要单独作介绍。在 5-6 当中添加一段「编者注」，给出一段代码示例即可。但是，Paper 团队把那些以 <code>String</code> 或 <code>BaseComponent</code> 为参数的旧方法，统统标作过时。这很可能令 Spigot 插件开发者无所适从，以至误以为 Paper 服务端中不能给玩家发送聊天消息。</p><p>有鉴于原作者 ThatRarityEG 道席常用 Paper API 编程，并在 EX-2-1 中建议读者将 Paper 服务端作为依赖，必须对这些「过时」方法的替代品作论述。</p><h2 id="adventure-api-使用方法介绍" tabindex="-1">Adventure API 使用方法介绍 <a class="header-anchor" href="#adventure-api-使用方法介绍" aria-label="Permalink to &quot;Adventure API 使用方法介绍&quot;">​</a></h2><p>本节教程仅简要介绍 Adventure API 的部分常用内容。<a href="https://docs.advntr.dev/" target="_blank" rel="noreferrer">官方文档</a> 中包含了全部用法。</p><p>自从 1.16.5 build#473 起，Adventure API 已内置于 Paper 服务端中，就像是 BungeeCord Chat API 内置于 Spigot 服务端中那样。使用 Adventure API 时不需要另行打包。</p><p>在 Adventure API 中，替代 <code>BaseComponent</code> 的是 <code>net.kyori.adventure.text.Component</code>。</p><p>下面，我们将会创建一个功能性物品，作为使用 Adventure API 的示范。该物品是一把「神奇的剪刀」，玩家在潜行时用它剪羊毛可以获得双倍产物。</p><details class="details custom-block"><summary>最终效果</summary><p><img src="https://s2.loli.net/2023/07/21/EVtL3UwZmJMoTHl.png" alt="ITEM_ORIG.png"></p><p>在 Lore 中，「左 Shift」这段字符串并不是魔法值，它会跟随客户端的「潜行」键变化。</p><p>如果客户端将「潜行」键设为「左Alt」，那么物品堆会自动变为这样：</p><p><img src="https://s2.loli.net/2023/07/21/szbGDyp2AjtC8uP.png" alt="ITEM_MOD.png"></p></details><p>首先，要声明一个物品堆：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> item </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">SHEARS</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span></code></pre></div><p>这只是一把普通的剪刀，与从创造模式物品栏中刚拿出来的剪刀无异。</p><p>跟上脚步，我们要修改它的 <code>ItemMeta</code> 了。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> meta </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// ...</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(meta);</span></span></code></pre></div><p>首先是展示名：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">displayName</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;神奇的剪刀&quot;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">            </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLUE</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">);</span></span></code></pre></div><p>从语义上不难看出，这段代码的意思就是「设定展示名，并且将展示名设为蓝色」。</p><p>物品堆的 Lore 也是如法炮制：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">lore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">List</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">of</span><span style="color:var(--shiki-color-text);">( </span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 使用 Java 9 新增的工厂函数构造一个 List。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 空行。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;使用 Shift + 右键 来剪下更多羊毛&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">YELLOW</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">));</span></span></code></pre></div><p>有人可能会问，一直用原版的颜色太单调了，是否可以使用 1.16 新增的 RGB 颜色？</p><p>的确，我们刚刚一直在使用 <code>NamedTextColor</code> 枚举来引用原版内置的几种颜色。虽然方便，但选择有限，容易与其它插件所提供的物品堆配色重复，致使界面单调。</p><p>因此，我们可以使用 <code>TextColor.color(int)</code> 方法来给字符着色。</p><p>访问 <a href="https://www.sojson.com/rgb.html" target="_blank" rel="noreferrer">SOJSON</a> 网站，你可以在调色盘里选色，并获取颜色的十六进制代码。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;使用 Shift + 右键 来剪下更多羊毛&quot;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">TextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0xFFFACD</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 在 Java 源代码中，数字默认是十进制。0x 开头的数字是十六进制。0xFFFACD 即十进制下的 16775885。</span></span></code></pre></div><p>接下来，要创建一个获取物品的渠道，用上你前面学过的知识，比如在玩家进服的时候把物品堆添加进物品栏里：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-color-text);">@</span><span style="color:var(--shiki-token-keyword);">EventHandler</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">public</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">void</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">onJoin(</span><span style="color:var(--shiki-token-keyword);">PlayerJoinEvent</span><span style="color:var(--shiki-token-function);"> evt)</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-comment);">// ItemStack item = ...</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-constant);">evt</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getInventory</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">addItem</span><span style="color:var(--shiki-color-text);">(item);</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">}</span></span></code></pre></div><p>或许我们需要给这个进服的玩家（你自己）作一些提示。我们可以用 <code>sendMessage</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-comment);">// 可以在 TextComponent 上使用 .append() 方法来拼接另外一个 TextComponent。</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">Component</span><span style="color:var(--shiki-color-text);"> prefix </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;[&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">GRAY</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;提醒&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">WHITE</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;] &quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">GRAY</span><span style="color:var(--shiki-color-text);">));</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">evt</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getPlayer</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">sendMessage</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">prefix</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;你收到了一件物品!&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">YELLOW</span><span style="color:var(--shiki-color-text);">)));</span></span></code></pre></div><p>注册好监听器，然后进入服务器：</p><p><img src="https://s2.loli.net/2023/07/21/R4CGpBg38encyZ1.png" alt="MESSAGE.png"></p><p>提示信息如期播报，那么物品呢？</p><p>是的，我们也拿到物品了！但是我想你也注意到了……物品上的文字都是斜体的。</p><p>这是因为 <code>displayName</code> 和 <code>lore</code> 被设置时，默认带有斜体标签。我们只要在开头取消这个斜体即可：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;神奇的剪刀&quot;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLUE</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">decoration</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">TextDecoration</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">ITALIC</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">) </span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 将「斜体」属性设为「假」，覆盖默认值。</span></span></code></pre></div><p>结束了……吗？</p><p>不，还有一个问题，客户端是可以自定义按键的，如果玩家设定的「潜行」键不是 <kbd>Shift</kbd>，那该怎么办？</p><p>如你所愿，Adventure API 提供了获取客户端按键的方法，这次不是 <code>Component.text()</code> 了，请看：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">keybind</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;key.sneak&quot;</span><span style="color:var(--shiki-color-text);">)</span></span></code></pre></div><p>返回的是一个 <code>KeybindComponent</code>，我们可以将其与 <code>TextComponent</code> 拼接起来。依然使用 <code>.append()</code> 方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;使用 &quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">TextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0xFFFACD</span><span style="color:var(--shiki-color-text);">))</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">decoration</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">TextDecoration</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">ITALIC</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">keybind</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;key.sneak&quot;</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot; + &quot;</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">keybind</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;key.mouse.right&quot;</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot; 来剪下更多羊毛&quot;</span><span style="color:var(--shiki-color-text);">))</span></span></code></pre></div><p>至此，物品创建已经结束，下面是完整的代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> item </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">SHEARS</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> meta </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">displayName</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;神奇的剪刀&quot;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLUE</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">decoration</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">TextDecoration</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">ITALIC</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">lore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">List</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">of</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-comment);">// 空行</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;使用 &quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">TextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">0xFFFACD</span><span style="color:var(--shiki-color-text);">))</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">decoration</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">TextDecoration</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">ITALIC</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">keybind</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;key.sneak&quot;</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot; + &quot;</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">keybind</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;key.mouse.right&quot;</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">                </span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">append</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot; 来剪下更多羊毛&quot;</span><span style="color:var(--shiki-color-text);">))</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        )</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">);</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(meta);</span></span></code></pre></div><h2 id="minimessage-使用方法介绍" tabindex="-1">MiniMessage 使用方法介绍 <a class="header-anchor" href="#minimessage-使用方法介绍" aria-label="Permalink to &quot;MiniMessage 使用方法介绍&quot;">​</a></h2><p>上面这个简单的例子中，已经充斥着冗长的 <code>append</code>。如果要创建更复杂的文本，那还得了！有没有更简单的方法？</p><p>「MiniMessage」应运而生，它将近似于旧版「§」的文本格式带进了高版本，同时新增了多个高级功能。</p><p>欲查看全部用法，烦请查阅 <a href="https://docs.advntr.dev/minimessage/format.html" target="_blank" rel="noreferrer">官方文档</a>。</p><p>我们可以利用 MiniMessage 改写上述代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">MiniMessage</span><span style="color:var(--shiki-color-text);"> msg </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">MiniMessage</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">miniMessage</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 这个方法的返回值可以被重复使用。</span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 建议将其作为静态字段放在插件主类中，以避免重复创建 MiniMessage 对象。</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ItemStack</span><span style="color:var(--shiki-color-text);"> item </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">new</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">ItemStack(</span><span style="color:var(--shiki-token-constant);">Material</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">SHEARS</span><span style="color:var(--shiki-token-function);">)</span><span style="color:var(--shiki-color-text);">;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">ItemMeta</span><span style="color:var(--shiki-color-text);"> meta </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">getItemMeta</span><span style="color:var(--shiki-color-text);">();</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">displayName</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">msg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">deserialize</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;&lt;!italic&gt;&lt;blue&gt;神奇的剪刀&quot;</span><span style="color:var(--shiki-color-text);">)); </span></span>
<span class="line"><span style="color:var(--shiki-token-comment);">// 感叹号「!」表示否定，即取消「斜体」效果。</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">meta</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">lore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">List</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">of</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-constant);">msg</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">deserialize</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;&lt;!italic&gt;&lt;color:#FFFACD&gt;使用 &lt;key:key.sneak&gt; + &lt;key:key.mouse.right&gt; 来剪下更多羊毛&quot;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// 这里使用 &lt;color&gt; 标签指定 RGB 颜色，别忘了添加「#」前缀符号。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">        </span><span style="color:var(--shiki-token-comment);">// &lt;key&gt; 标签表示一个快捷键。</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">));</span></span>
<span class="line"><span style="color:var(--shiki-token-constant);">item</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">setItemMeta</span><span style="color:var(--shiki-color-text);">(meta);</span></span></code></pre></div><h2 id="adventure-api-中的序列化工具" tabindex="-1">Adventure API 中的序列化工具 <a class="header-anchor" href="#adventure-api-中的序列化工具" aria-label="Permalink to &quot;Adventure API 中的序列化工具&quot;">​</a></h2><p>上文中提到，纯文本（Plain Text）即不含颜色、加粗、斜体等格式的文本。在应用 Adventure API 时，常常需要去除文本格式，将富文本转为纯文本。这时该怎么办呢？</p><p>你可能会想到 <code>Component.toString()</code> 方法，但是很遗憾，该方法的返回值包含了元数据，并不是我们想要的纯文本。</p><p>此时需要使用 <code>PlainTextComponentSerializer</code>，其使用方法很简单：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> result </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">PlainTextComponentSerializer</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">plainText</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">serialize</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;test&quot;</span><span style="color:var(--shiki-color-text);">));</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">getLogger()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">info</span><span style="color:var(--shiki-color-text);">(result);</span></span></code></pre></div><p>除了 <code>PlainTextComponentSerializer</code> 以外，还有多种序列化工具，比如 <code>JSONComponentSerializer</code>。它可以将 <code>Component</code> 转化为 JSON 字符串：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">String</span><span style="color:var(--shiki-color-text);"> json </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">JSONComponentSerializer</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">json</span><span style="color:var(--shiki-color-text);">()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">serialize</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">Component</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">text</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&quot;test&quot;</span><span style="color:var(--shiki-color-text);">)</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">color</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-constant);">NamedTextColor</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-constant);">BLUE</span><span style="color:var(--shiki-color-text);">));</span></span>
<span class="line"><span style="color:var(--shiki-token-function);">getLogger()</span><span style="color:var(--shiki-token-punctuation);">.</span><span style="color:var(--shiki-token-function);">info</span><span style="color:var(--shiki-color-text);">(json);</span></span></code></pre></div><p>那么 Adventure API 的基本功能，你都会使用啦！如果需要进一步了解血条、计分板等内容，记得查阅<a href="https://docs.advntr.dev/" target="_blank" rel="noreferrer">官方文档</a>哦~</p><h2 id="附言" tabindex="-1">附言 <a class="header-anchor" href="#附言" aria-label="Permalink to &quot;附言&quot;">​</a></h2><p>Paper 团队将 <code>sendMessage(String)</code>、<code>setDisplayName(String)</code> 等方法全部标记为过时。或有新手据此注解认为在 Paper 服务端中决不能调用此类方法，否则恐有 <code>UnsupportedOperationException</code> 之虞。非是。</p><p>William_Shi 案，<a href="https://docs.papermc.io/paper/adding-plugins#finding-plugins" target="_blank" rel="noreferrer">Paper 官方文档</a>云：「Paper is compatible with both Spigot and Bukkit plugins.」意指基于 Spigot API 所开发的插件都可以在 Paper 服务端上运转。须知 Spigot 服务端中并无 <code>displayName(Component)</code> 方法。如废止 <code>setDisplayName(String)</code>，恐怕不能运行的 Spigot 插件多于半数，Paper 团队又怎敢冒天下之大不韪呢？又，如果要在 Spigot 服务端中使用 Adventure API，固然可以自行将其打包入插件中，但是 Paper 为 Adventure API 作了很多 Native Support，比如给 <code>CommandSender</code> 类添加了 <code>sendMessage(Component)</code> 方法，在 Spigot API 中不之有也，因而使用起来迂回绕远。至于在物品堆显示名处用上富文本，以笔者之孤陋寡闻、蓬衡蕞品，未详其法焉。</p><p>本教程的几位维护者对于 Paper API 的看法不尽相同。西席 ThatRarityEG 老师偏爱 Paper API，于其有知遇之恩的时任 MCBBS 编程开发版主 dengyu 道席亦然。学生 William_Shi 不自揆，曾对 Paper 团队所加的过时注解发表过微辞。版主 dengyu 道席认为教程应当多花些笔墨介绍 Paper API 中的独有内容，纂修 Freeze_Dolphin 道席为之勤苦笔耕。William_Shi 谨以恩师离尘，夙愿洵不可违，故校订是篇。然对 Paper API 实昧通津，如有舛错疏漏之处，烦请读者雅正。</p>`,71),l=[e];function i(p,r,c,k,v,h){return o(),n("div",null,l)}const d=s(t,[["render",i]]);export{u as __pageData,d as default};
